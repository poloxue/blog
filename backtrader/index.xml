<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>首页 on Backtrader 中文</title><link>https://www.poloxue.com/backtrader/</link><description>Recent content in 首页 on Backtrader 中文</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/backtrader/index.xml" rel="self" type="application/rss+xml"/><item><title>Analyzers</title><link>https://www.poloxue.com/backtrader/docs/12-analyzers/01-analyzers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/12-analyzers/01-analyzers/</guid><description>&lt;h1 id="分析器"&gt;分析器&lt;a class="anchor" href="#%e5%88%86%e6%9e%90%e5%99%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;无论是回测还是交易，能够分析交易系统的表现对于理解是否不仅仅获得了利润，而且是否在实现利润的过程中承担了过多的风险，或者与参考资产（或无风险资产）相比是否真的值得付出努力，都是关键。&lt;/p&gt;
&lt;p&gt;这就是分析器对象的作用：提供对已发生情况或当前情况的分析。&lt;/p&gt;
&lt;p&gt;分析器的性质
接口的设计参照了线条对象，例如具有 next 方法，但有一个主要的区别：分析器不包含线条。&lt;/p&gt;
&lt;p&gt;这意味着它们在内存方面不是很消耗资源，因为即使在分析了成千上万个价格条之后，它们可能仍然只在内存中保存单个结果。&lt;/p&gt;
&lt;h2 id="在生态系统中的位置"&gt;在生态系统中的位置&lt;a class="anchor" href="#%e5%9c%a8%e7%94%9f%e6%80%81%e7%b3%bb%e7%bb%9f%e4%b8%ad%e7%9a%84%e4%bd%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;分析器对象（如同策略、观察者和数据）通过 cerebro 实例添加到系统中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;addanalyzer(ancls, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;但在 cerebro.run 操作期间，对于系统中存在的每个策略，将会发生以下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ancls 在 cerebro.run 期间会用 *args 和 **kwargs 实例化&lt;/li&gt;
&lt;li&gt;ancls 实例将会附加到策略上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着：&lt;/p&gt;
&lt;p&gt;如果回测运行包含例如 3 个策略，那么将创建 3 个 ancls 实例，并且每个实例将附加到不同的策略上。&lt;/p&gt;
&lt;p&gt;结论：分析器分析单个策略的表现，而不是整个系统的表现。&lt;/p&gt;
&lt;h2 id="附加位置"&gt;附加位置&lt;a class="anchor" href="#%e9%99%84%e5%8a%a0%e4%bd%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;某些分析器对象可能实际上使用其他分析器来完成其工作。例如：SharpeRatio 使用 TimeReturn 的输出进行计算。&lt;/p&gt;
&lt;p&gt;这些子分析器或从属分析器也将插入到创建它们的同一策略中。但它们对用户是完全不可见的。&lt;/p&gt;
&lt;h2 id="属性"&gt;属性&lt;a class="anchor" href="#%e5%b1%9e%e6%80%a7"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了完成预期的工作，分析器对象提供了一些默认属性，这些属性会自动传递并在实例中设置，以便于使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.strategy&lt;/code&gt;：对分析器对象正在运行的策略子类的引用。策略可以访问的任何内容，分析器也可以访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.datas[x]&lt;/code&gt;：策略中存在的数据源数组。虽然可以通过策略引用访问，但快捷方式使工作更舒适。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.data&lt;/code&gt;：对 &lt;code&gt;self.datas[0]&lt;/code&gt; 的快捷方式，以增加舒适度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.dataX&lt;/code&gt;：对不同的 &lt;code&gt;self.datas[x]&lt;/code&gt; 的快捷方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一些其他别名可用，尽管它们可能有些多余：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self.dataX_Y&lt;/code&gt;，其中 X 是对 &lt;code&gt;self.datas[X]&lt;/code&gt; 的引用，Y 指的是线条，最终指向 &lt;code&gt;self.datas[X].lines[Y]&lt;/code&gt;。
如果线条有名称，还可以使用以下命名：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self.dataX_Name&lt;/code&gt;，解析为 &lt;code&gt;self.datas[X].Name&lt;/code&gt;，按名称而不是按索引返回线条。
对于第一个数据，最后两个快捷方式在没有初始 X 数字引用的情况下可用。例如：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self.data_2&lt;/code&gt; 指 &lt;code&gt;self.datas[0].lines[2]&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;self.data_close&lt;/code&gt; 指 &lt;code&gt;self.datas[0].close&lt;/code&gt;。&lt;/p&gt;</description></item><item><title>Broker</title><link>https://www.poloxue.com/backtrader/docs/10-broker/01-broker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/10-broker/01-broker/</guid><description>&lt;h1 id="broker"&gt;Broker&lt;a class="anchor" href="#broker"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="类-backtraderbrokersbackbroker"&gt;类 &lt;code&gt;backtrader.brokers.BackBroker()&lt;/code&gt;&lt;a class="anchor" href="#%e7%b1%bb-backtraderbrokersbackbroker"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Broker 经纪商模拟器，该模拟支持不同的订单类型，检查提交订单的现金需求与当前现金的对比，跟踪每次 Cerebro 迭代的现金和价值，并保持不同数据的当前头寸。&lt;/p&gt;
&lt;p&gt;现金在每次迭代中调整，对于期货等工具来说，当价格变化时，会在实际经纪商中增加或减少现金。
支持的订单类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Market&lt;/code&gt;：将在下一个柱的第一个tick（即开盘价）执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Close&lt;/code&gt;：用于日内交易，订单以会话最后一个柱的收盘价执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Limit&lt;/code&gt;：如果在会话期间看到给定的限价则执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stop&lt;/code&gt;：如果看到给定的止损价，则执行市场订单&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StopLimit&lt;/code&gt;：如果看到给定的止损价，则启动限价订单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为经纪商由 Cerebro 实例化，用户通常不需要替换经纪商实例，因此参数不受用户控制。&lt;/p&gt;
&lt;p&gt;要更改参数，有两种选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;手动创建带所需参数的 Broker，用 &lt;code&gt;cerebro.broker = instance&lt;/code&gt; 将该实例设置为这个经纪商；&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;set_xxx&lt;/code&gt; 方法通过 &lt;code&gt;cerebro.broker.set_xxx&lt;/code&gt; 设置参数，其中 &lt;code&gt;xxx&lt;/code&gt; 代表设置参数名称；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，&lt;code&gt;cerebro.broker&lt;/code&gt; 是一个由 Cerebro 的 &lt;code&gt;getbroker&lt;/code&gt; 和 &lt;code&gt;setbroker&lt;/code&gt; 方法支持的属性。&lt;/p&gt;
&lt;h2 id="参数"&gt;参数&lt;a class="anchor" href="#%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;cash&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;10000&lt;/td&gt;
 &lt;td&gt;起始现金&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;commission&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;CommInfoBase(percabs=True)&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;适用于所有资产的基础佣金方案&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;checksubmit&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;在将订单接受到系统之前检查保证金/现金&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;eosbar&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;对于日内 Bar，考虑与会话结束时间相同的柱为会话结束。通常不会这样，因为许多交易所会在会话结束后几分钟内为许多产品生成一些柱（最终拍卖）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;filler&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;一个可调用对象，签名为 &lt;code&gt;callable(order, price, ago)&lt;/code&gt;。&lt;br/&gt;&lt;br/&gt;参数说明：&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- &lt;code&gt;order&lt;/code&gt;：显然是执行中的订单。这提供了对数据的访问（包括 ohlc 和成交量值）、执行类型、剩余大小（&lt;code&gt;order.executed.remsize&lt;/code&gt;）等。&lt;/li&gt;&lt;li&gt;- &lt;code&gt;price&lt;/code&gt;：订单将在 &lt;code&gt;ago&lt;/code&gt; 柱中执行的价格&lt;/li&gt;&lt;li&gt;- &lt;code&gt;ago&lt;/code&gt;：用于从 &lt;code&gt;order.data&lt;/code&gt; 提取 ohlc 和成交量价格的索引。在大多数情况下，这将是 0，但在某些角落情况下，对于 &lt;code&gt;Close&lt;/code&gt; 订单，这将是 -1。&lt;/li&gt;&lt;li&gt;- 可调用对象必须返回执行的大小（值 &amp;gt;= 0）&lt;/li&gt;&lt;/ul&gt;可调用对象当然可以是一个 &lt;code&gt;__call__&lt;/code&gt; 符合上述签名的对象。默认情况下，订单将一次性完全执行。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;slip_perc&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;0.0&lt;/td&gt;
 &lt;td&gt;用于买卖订单上下滑动价格的绝对百分比（且为正值）。&lt;br/&gt;注意：0.01 是 1%，0.001 是 0.1%&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;slip_fixed&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;0.0&lt;/td&gt;
 &lt;td&gt;用于买卖订单上下滑动价格的单位百分比（且为正值）。&lt;br/&gt;注意：如果 &lt;code&gt;slip_perc&lt;/code&gt; 非零，则优先于此。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;slip_open&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;是否滑动专门使用下一个柱的开盘价执行的订单价格。例如，市场订单将在下一个可用tick执行，即柱的开盘价。这也适用于其他一些执行，因为逻辑尝试检测开盘价是否会匹配请求的价格/执行类型在移动到新柱时。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;slip_match&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;- 如果为 True，经纪商将通过在高/低价位封顶滑点来提供匹配，以防它们超出。&lt;br/&gt;&lt;br/&gt;- 如果为 False，经纪商将不会使用当前价格匹配订单，并将在下一次迭代中尝试执行&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;slip_limit&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;- 限价订单，给定确切的匹配价格请求，即使 &lt;code&gt;slip_match&lt;/code&gt; 为 False，也会被匹配。&lt;br/&gt;- 此选项控制该行为。&lt;br/&gt;- 如果为 True，那么限价订单将通过在限价/高低价位封顶价格进行匹配&lt;br/&gt;- 如果为 False 且滑点超出上限，则不会有匹配&lt;br/&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;slip_out&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;即使价格超出高-低范围，也提供滑点。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;coc&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;Cheat-On-Close 将其设置为 True 与 &lt;code&gt;set_coc&lt;/code&gt; 启用，将“市场”订单与订单条的收盘价匹配。这实际上是作弊，因为柱已关闭，任何订单都应首先与下一个柱的价格匹配&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;coo&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;Cheat-On-Open 将其设置为 True 与 &lt;code&gt;set_coo&lt;/code&gt; 启用，将“市场”订单与开盘价匹配，例如使用设置为 True 的计时器，因为这种计时器在经纪商评估之前执行&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;int2pnl&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;将生成的利息（如果有）分配给减少头寸的操作的利润和亏损（无论是多头还是空头）。在某些情况下，这可能是不希望的，因为不同的策略在竞争，利息将以不确定的方式分配给其中任何一个。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;shortcash&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;如果为 True，则在卖空类似股票的资产时将增加现金，并且该资产的计算价值将为负值。&lt;br/&gt;- 如果为 False，则现金将作为操作成本扣除，计算的价值将为正值，以最终得到相同的金额&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;fundstartval&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;100.0&lt;/td&gt;
 &lt;td&gt;此参数控制基金式绩效测量的起始值，即：现金可以增加和扣除，增加股票数量。绩效不是使用投资组合的净资产价值来衡量，而是使用基金的价值&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;fundmode&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;如果设置为 True，诸如 TimeReturn 的分析器可以基于基金价值而不是总净资产价值自动计算回报&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="方法"&gt;方法&lt;a class="anchor" href="#%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;签名&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;set_cash(cash)&lt;/td&gt;
 &lt;td&gt;设置现金参数（别名：setcash）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;get_cash()&lt;/td&gt;
 &lt;td&gt;返回当前现金（别名：getcash）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;get_value(&lt;br/&gt; datas=None, &lt;br/&gt; mkt=False, &lt;br/&gt; lever=False&lt;br/&gt;)&lt;/td&gt;
 &lt;td&gt;返回给定数据的投资组合价值（如果数据为 None，则返回总投资组合价值）（别名：getvalue）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_eosbar(eosbar)&lt;/td&gt;
 &lt;td&gt;设置 eosbar 参数（别名：seteosbar）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_checksubmit(checksubmit)&lt;/td&gt;
 &lt;td&gt;设置 checksubmit 参数&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_filler(filler)&lt;/td&gt;
 &lt;td&gt;设置用于成交量填充执行的填充器&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_coc(coc)&lt;/td&gt;
 &lt;td&gt;配置 Cheat-On-Close 方法以在订单柱上买入收盘价&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_coo(coo)&lt;/td&gt;
 &lt;td&gt;配置 Cheat-On-Open 方法以在订单柱上买入收盘价&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_int2pnl(int2pnl)&lt;/td&gt;
 &lt;td&gt;配置将利息分配给利润和亏损&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_fundstartval(fundstartval)&lt;/td&gt;
 &lt;td&gt;设置基金式绩效跟踪器的起始值&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_slippage_perc(&lt;br/&gt; perc, &lt;br/&gt; slip_open=True, &lt;br/&gt; slip_limit=True, &lt;br/&gt; slip_match=True, &lt;br/&gt;&amp;amp;emspslip_out=False&lt;br/&gt;)&lt;/td&gt;
 &lt;td&gt;配置滑点为基于百分比&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;set_slippage_fixed(&lt;br/&gt; fixed, &lt;br/&gt; slip_open=True, &lt;br/&gt; slip_limit=True, &lt;br/&gt; slip_match=True, &lt;br/&gt; slip_out=False&lt;br/&gt;)&lt;/td&gt;
 &lt;td&gt;配置滑点为固定点数&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;get_orders_open(safe=False)&lt;/td&gt;
 &lt;td&gt;返回仍然打开的订单（未执行或部分执行）的可迭代对象。返回的订单不得被触摸。如果需要订单操作，请将参数 safe 设置为 True&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;getcommissioninfo(data)&lt;/td&gt;
 &lt;td&gt;检索与给定数据相关的 &lt;code&gt;CommissionInfo&lt;/code&gt; 方案&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;setcommission(&lt;br/&gt; commission=0.0, &lt;br/&gt; margin=None, &lt;br/&gt; mult=1.0, &lt;br/&gt; commtype=None, &lt;br/&gt; percabs=True, &lt;br/&gt; stocklike=False, &lt;br/&gt; interest=0.0, &lt;br/&gt; interest_long=False, &lt;br&gt; leverage=1.0, &lt;br/&gt; automargin=False, &lt;br/&gt; name=None&lt;br/&gt;)&lt;/td&gt;
 &lt;td&gt;为 Broker 设置 &lt;code&gt;CommissionInfo&lt;/code&gt; 对象，参考 &lt;code&gt;CommInfoBase&lt;/code&gt; 文档介绍。&lt;br/&gt;&lt;br/&gt;如果 name 为 None，这将是没有找到其他 &lt;code&gt;CommissionInfo&lt;/code&gt; 方案的资产的默认设置&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;addcommissioninfo(&lt;br/&gt; comminfo, name=None&lt;br/&gt;)&lt;/td&gt;
 &lt;td&gt;添加 &lt;code&gt;CommissionInfo&lt;/code&gt; 对象，如果 name 为 None，将成为所有资产的默认设置&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;getposition(data)&lt;/td&gt;
 &lt;td&gt;返回给定数据的当前头寸状态（一个 &lt;code&gt;Position&lt;/code&gt; 实例）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;get_fundshares()&lt;/td&gt;
 &lt;td&gt;返回基金模式中的当前股票数量&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;get_fundvalue()&lt;/td&gt;
 &lt;td&gt;返回基金式的股票价值&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;add_cash(cash)&lt;/td&gt;
 &lt;td&gt;添加/移除系统现金（使用负值移除）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>Cerebro</title><link>https://www.poloxue.com/backtrader/docs/05-cerebro/01-cerebro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/05-cerebro/01-cerebro/</guid><description>&lt;h1 id="cerebro"&gt;Cerebro&lt;a class="anchor" href="#cerebro"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Cerebro&lt;/code&gt; 是 Backtrader 的核心类，负责整个系统的运行。&lt;/p&gt;
&lt;p&gt;它的功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集输入（数据源）、执行者（策略）、观察者、评论者（分析器）和记录者（编写器），确保系统的正常运行。&lt;/li&gt;
&lt;li&gt;执行回测或实时数据供给和交易。&lt;/li&gt;
&lt;li&gt;返回回测结果。&lt;/li&gt;
&lt;li&gt;提供策略绘图功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="创建-cerebro-实例"&gt;创建 &lt;code&gt;Cerebro&lt;/code&gt; 实例&lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba-cerebro-%e5%ae%9e%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;创建 &lt;code&gt;Cerebro&lt;/code&gt; 实例时，可以通过传递一些控制参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro(&lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些参数会影响系统的执行，具体的参数说明可以参考文档（也可以应用于后续的 &lt;code&gt;run&lt;/code&gt; 方法）。&lt;/p&gt;
&lt;h2 id="添加数据源"&gt;添加数据源&lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最常见的方式是使用 &lt;code&gt;cerebro.adddata(data)&lt;/code&gt; 添加数据源，&lt;code&gt;data&lt;/code&gt; 是已实例化的数据源。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;mypath.days&amp;#39;&lt;/span&gt;, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="数据的重采样与重放"&gt;数据的重采样与重放&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e7%9a%84%e9%87%8d%e9%87%87%e6%a0%b7%e4%b8%8e%e9%87%8d%e6%94%be"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Cerebro&lt;/code&gt; 也支持对数据进行重采样或重放：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重采样&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;mypath.min&amp;#39;&lt;/span&gt;, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Minutes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;重放数据&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;mypath.min&amp;#39;&lt;/span&gt;, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Minutes)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;replaydata(data, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以同时使用多种类型的数据源，包括常规数据、重采样数据和重放数据。但需要确保它们的时间对齐。详见文档中的 &lt;strong&gt;多时间框架&lt;/strong&gt; 和 &lt;strong&gt;数据重采样&lt;/strong&gt; 部分。&lt;/p&gt;
&lt;h2 id="添加策略"&gt;添加策略&lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Cerebro&lt;/code&gt; 接受策略类并传递相关参数，即使没有优化，也可以使用以下方式添加策略：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(MyStrategy, myparam1&lt;span style="color:#f92672"&gt;=&lt;/span&gt;value1, myparam2&lt;span style="color:#f92672"&gt;=&lt;/span&gt;value2)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="策略优化"&gt;策略优化&lt;a class="anchor" href="#%e7%ad%96%e7%95%a5%e4%bc%98%e5%8c%96"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在优化时，参数需要作为可迭代对象传递。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;optstrategy(MyStrategy, myparam1&lt;span style="color:#f92672"&gt;=&lt;/span&gt;range(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会运行 &lt;code&gt;MyStrategy&lt;/code&gt; 10次，&lt;code&gt;myparam1&lt;/code&gt; 的值从 10 到 19。&lt;/p&gt;
&lt;h2 id="添加其他组件"&gt;添加其他组件&lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0%e5%85%b6%e4%bb%96%e7%bb%84%e4%bb%b6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;你可以通过以下方法为回测添加额外的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;addwriter&lt;/code&gt;&lt;/strong&gt;：记录回测数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;addanalyzer&lt;/code&gt;&lt;/strong&gt;：分析回测结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;addobserver&lt;/code&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;code&gt;addobservermulti&lt;/code&gt;&lt;/strong&gt;：添加观察者，实时跟踪策略执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="自定义经纪人"&gt;自定义经纪人&lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bb%8f%e7%ba%aa%e4%ba%ba"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Cerebro&lt;/code&gt; 默认使用 Backtrader 内建的经纪人，但你也可以自定义经纪人：&lt;/p&gt;</description></item><item><title>Data Feeds</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/01-datafeeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/01-datafeeds/</guid><description>&lt;h2 id="数据源"&gt;数据源&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 提供了一组数据源解析器（在撰写本文时都是基于 CSV 的）以便从不同来源加载数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yahoo（在线或已保存到文件）&lt;/li&gt;
&lt;li&gt;VisualChart（参见 &lt;a href="https://www.visualchart.com"&gt;www.visualchart.com&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;Backtrader CSV（自定义格式用于测试）&lt;/li&gt;
&lt;li&gt;通用 CSV 支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从快速入门指南中可以清楚地看到，您可以将数据源添加到 Cerebro 实例中。这些数据源稍后将在策略中可用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.datas&lt;/code&gt; 数组（按插入顺序）&lt;/li&gt;
&lt;li&gt;数组对象的别名：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.data&lt;/code&gt; 和 &lt;code&gt;self.data0&lt;/code&gt; 指向第一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.dataX&lt;/code&gt; 指向数组中索引为 X 的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是插入方式的快速提醒：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader.feeds &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; btfeeds
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;wheremydatacsvis.csv&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data) &lt;span style="color:#75715e"&gt;# 可以传递一个 &amp;#39;name&amp;#39; 参数用于绘图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="数据源通用参数"&gt;数据源通用参数&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e9%80%9a%e7%94%a8%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个数据源可以直接从 Yahoo 下载数据并将其输入系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 数据源常用参数：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;dataname&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;必须提供&lt;/strong&gt;。其含义因数据源类型而异，例如文件路径、股票代码等。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;''&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;用于绘图时的装饰性名称。如果未指定，可能会从 &lt;code&gt;dataname&lt;/code&gt; 派生（例如：文件路径的最后一部分）。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;fromdate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;mindate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Python &lt;code&gt;datetime&lt;/code&gt; 对象，表示应忽略此日期之前的任何数据。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;todate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;maxdate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Python &lt;code&gt;datetime&lt;/code&gt; 对象，表示应忽略此日期之后的任何数据。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;timeframe&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;TimeFrame.Days&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;时间框架。可能的值包括：&lt;code&gt;Ticks&lt;/code&gt;、&lt;code&gt;Seconds&lt;/code&gt;、&lt;code&gt;Minutes&lt;/code&gt;、&lt;code&gt;Days&lt;/code&gt;、&lt;code&gt;Weeks&lt;/code&gt;、&lt;code&gt;Months&lt;/code&gt; 和 &lt;code&gt;Years&lt;/code&gt;。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;compression&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;每个实际条形图的条形数。仅在数据重采样/重放中有效。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;sessionstart&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;数据会话的开始时间。可用于重采样等目的。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;sessionend&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;数据会话的结束时间。可用于重采样等目的。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="csv-数据源通用参数"&gt;CSV 数据源通用参数&lt;a class="anchor" href="#csv-%e6%95%b0%e6%8d%ae%e6%ba%90%e9%80%9a%e7%94%a8%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参数（除了通用参数外）：&lt;/p&gt;</description></item><item><title>Interactive Brokers</title><link>https://www.poloxue.com/backtrader/docs/15-livetrading/01-interactive-brokers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/15-livetrading/01-interactive-brokers/</guid><description>&lt;h1 id="盈透interactive-brokers"&gt;盈透（Interactive Brokers）&lt;a class="anchor" href="#%e7%9b%88%e9%80%8finteractive-brokers"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;与盈透（Interactive Brokers）的集成支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时数据馈送&lt;/li&gt;
&lt;li&gt;实时交易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：尽管已经尽力测试了尽可能多的错误条件和情况，但代码（像任何其他软件一样）可能包含错误。在进入生产环境之前，请使用纸面交易账户或 TWS 演示帐户彻底测试任何策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：与互动经纪商的交互是通过使用 IbPy 模块进行的，该模块在使用前必须安装。目前在 Pypi 中没有该模块的包（撰写本文时），但可以使用以下命令通过 pip 安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip install git+https://github.com/blampe/IbPy.git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您的系统中没有 git（例如在 Windows 上安装），以下命令也可以正常工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip install https://github.com/blampe/IbPy/archive/master.zip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;源码包含一个完整的示例，位于：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;samples/ibtest/ibtest.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该示例无法涵盖所有可能的用例，但它试图提供广泛的见解，并应强调在使用回测模块或实时数据模块时没有实际差异。&lt;/p&gt;
&lt;p&gt;需要注意的一点是：&lt;/p&gt;
&lt;p&gt;示例在任何交易活动开始之前，都会等待 &lt;code&gt;data.LIVE&lt;/code&gt; 数据状态通知。这可能是任何实时策略中都需要考虑的事项。&lt;/p&gt;
&lt;h2 id="存储模型与直接模型"&gt;存储模型与直接模型&lt;a class="anchor" href="#%e5%ad%98%e5%82%a8%e6%a8%a1%e5%9e%8b%e4%b8%8e%e7%9b%b4%e6%8e%a5%e6%a8%a1%e5%9e%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与互动经纪商的交互支持两种模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储模型（推荐）&lt;/li&gt;
&lt;li&gt;直接与数据馈送类和经纪商类交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储模型提供了一种明确的分离模式，用于创建经纪商和数据。以下两个代码片段应更好地作为示例。&lt;/p&gt;
&lt;p&gt;首先是存储模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ibstore &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stores&lt;span style="color:#f92672"&gt;.&lt;/span&gt;IBStore(host&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, port&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7496&lt;/span&gt;, clientId&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;35&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ibstore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;EUR.USD-CASH-IDEALPRO&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;，&lt;code&gt;port&lt;/code&gt; 和 &lt;code&gt;clientId&lt;/code&gt; 传递到 IBStore 中，用于打开连接。&lt;/li&gt;
&lt;li&gt;然后使用 &lt;code&gt;getdata&lt;/code&gt; 创建数据馈送，并使用 backtrader 中所有数据馈送中常见的参数 &lt;code&gt;dataname&lt;/code&gt; 请求 EUR/USD 外汇对。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接使用模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;IBData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;EUR.USD-CASH-IDEALPRO&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, port&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7496&lt;/span&gt;, clientId&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;35&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里：&lt;/p&gt;</description></item><item><title>Line 迭代器</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/02-operate-the-platform/01-iteration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/02-operate-the-platform/01-iteration/</guid><description>&lt;h1 id="line-迭代器"&gt;&lt;code&gt;Line&lt;/code&gt; 迭代器&lt;a class="anchor" href="#line-%e8%bf%ad%e4%bb%a3%e5%99%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Backtrader&lt;/code&gt; 引入了一个独特的概念，叫做 &lt;strong&gt;&lt;code&gt;Line&lt;/code&gt; 迭代器&lt;/strong&gt;（Line Iterator）。它的核心思想是，通过迭代数据来驱动策略和指标的运作。这一点和 Python 的普通迭代器在表面上看有些相似，但实际上它们是为金融数据处理量身定制的。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，&lt;strong&gt;策略&lt;/strong&gt; 和 &lt;strong&gt;指标&lt;/strong&gt; 都是基于 &lt;code&gt;Line&lt;/code&gt; 迭代器构建的。下面，我们会逐步拆解这个概念，让它变得简单易懂。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="什么是"&gt;&lt;strong&gt;什么是 &lt;code&gt;Line&lt;/code&gt; 迭代器？&lt;/strong&gt;&lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Line&lt;/code&gt; 迭代器是一个控制 &amp;ldquo;数据处理节奏&amp;rdquo; 的工具，它的主要职责是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;驱动数据流动&lt;/strong&gt;：&lt;code&gt;Line&lt;/code&gt; 迭代器像是一个“指挥者”，它会触发从属 &lt;code&gt;Line&lt;/code&gt; 迭代器（如指标或策略）依次处理数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逐步更新数据&lt;/strong&gt;：&lt;code&gt;Line&lt;/code&gt; 迭代器按照声明的规则迭代数据，并在每一步设置对应的结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="line"&gt;&lt;strong&gt;&lt;code&gt;Line&lt;/code&gt; 迭代器如何工作？&lt;/strong&gt;&lt;a class="anchor" href="#line"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="三大关键方法"&gt;&lt;strong&gt;三大关键方法&lt;/strong&gt;&lt;a class="anchor" href="#%e4%b8%89%e5%a4%a7%e5%85%b3%e9%94%ae%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;prenext&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在数据不足以完成计算时被调用。&lt;/li&gt;
&lt;li&gt;用于初始化阶段的数据处理，比如累计数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nextstart&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当累积到足够多的数据点，达到“最小周期”时被调用，仅触发一次。&lt;/li&gt;
&lt;li&gt;默认会调用 &lt;code&gt;next&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;next&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在每次迭代时调用，用于正式处理当前索引上的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="为什么需要这些方法"&gt;&lt;strong&gt;为什么需要这些方法？&lt;/strong&gt;&lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e8%bf%99%e4%ba%9b%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了生成有效的计算结果，某些指标需要一个“缓冲期”。如 &lt;strong&gt;25 周期的简单移动平均线 (SMA)&lt;/strong&gt; 需要累积 25 个数据点才能生成第一个值。在这之前，我们需要用 &lt;code&gt;prenext&lt;/code&gt; 来处理空白期。&lt;/p&gt;
&lt;p&gt;一旦累积到足够的数据点，进入“正式运行”阶段后，&lt;code&gt;next&lt;/code&gt; 方法会被不断调用，每次处理新到达的数据。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="示例如何实现一个简单的-sma"&gt;&lt;strong&gt;示例：如何实现一个简单的 SMA&lt;/strong&gt;&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84-sma"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下是一个 &lt;code&gt;SimpleMovingAverage&lt;/code&gt;（简单移动平均线）的实现示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SimpleMovingAverage&lt;/span&gt;(Indicator):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;sma&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;prenext&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;prenext:: 当前周期: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(self)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nextstart&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;nextstart:: 当前周期: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(self)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;next() &lt;span style="color:#75715e"&gt;# 模拟默认行为&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;next:: 当前周期: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;len(self)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id="实例化-sma-的过程"&gt;&lt;strong&gt;实例化 SMA 的过程&lt;/strong&gt;&lt;a class="anchor" href="#%e5%ae%9e%e4%be%8b%e5%8c%96-sma-%e7%9a%84%e8%bf%87%e7%a8%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;假设我们为一个数据集创建一个 &lt;code&gt;SimpleMovingAverage&lt;/code&gt; 指标：&lt;/p&gt;</description></item><item><title>Plotting</title><link>https://www.poloxue.com/backtrader/docs/16-plotting/01-plotting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/16-plotting/01-plotting/</guid><description>&lt;h1 id="绘图"&gt;绘图&lt;a class="anchor" href="#%e7%bb%98%e5%9b%be"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;尽管回测主要是基于数学计算的自动化过程，但人们常常希望能够实际可视化所发生的一切。不论是使用已经经过回测的现有算法，还是查看数据所产生的内置或自定义指标，绘图都能帮助人们更好地理解所发生的事情，剔除、修改或创建新的想法。&lt;/p&gt;
&lt;p&gt;由于所有操作背后都是人类，绘制数据馈送、指标、操作、现金流动和投资组合价值的演变图表有助于人们更好地理解过程，从而做出更明智的决策。因此，backtrader 使用 matplotlib 提供的功能，内置了绘图设施。&lt;/p&gt;
&lt;h2 id="如何绘图"&gt;如何绘图&lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e7%bb%98%e5%9b%be"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;任何回测运行都可以通过调用一个方法进行绘图：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，这通常是最后一个命令。例如，以下简单代码使用了 backtrader 源代码中的一个示例数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; __future__ &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (absolute_import, division, print_function, unicode_literals)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;St&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2005-2006-day-001.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(St)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将生成以下图表：&lt;/p&gt;
&lt;p&gt;&lt;img src="image" alt="示例图表" /&gt;&lt;/p&gt;
&lt;p&gt;图表包含了 3 个观察器，由于缺乏任何交易，它们在这种情况下几乎没有意义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CashValue&lt;/strong&gt; 观察器：跟踪回测运行期间的现金和总投资组合价值（包括现金）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trade&lt;/strong&gt; 观察器：在交易结束时显示实际的利润和亏损。交易定义为开仓并将仓位归零（直接或从多头转为空头或从空头转为多头）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BuySell&lt;/strong&gt; 观察器：在价格图上绘制买入和卖出操作的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这 3 个观察器由 cerebro 自动添加，可以通过 &lt;code&gt;stdstats&lt;/code&gt; 参数控制（默认：True）。如果希望禁用它们，可以如下操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro(stdstats&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或在运行时：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run(stdstats&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="绘图元素"&gt;绘图元素&lt;a class="anchor" href="#%e7%bb%98%e5%9b%be%e5%85%83%e7%b4%a0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;尽管前面提到了观察器，它们并不是唯一被绘制的元素。以下 3 种元素会被绘制：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;adddata&lt;/code&gt;、&lt;code&gt;replaydata&lt;/code&gt; 和 &lt;code&gt;resampledata&lt;/code&gt; 添加到 Cerebro 的数据馈送。&lt;/li&gt;
&lt;li&gt;在策略级别声明的指标（或通过 &lt;code&gt;addindicator&lt;/code&gt; 添加到 cerebro 的指标，这纯粹用于实验目的，并将指标添加到一个虚拟策略中）。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;addobserver&lt;/code&gt; 添加到 cerebro 的观察器。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;观察器是与策略同步运行的线性对象，并且可以访问整个生态系统，以便跟踪现金和价值等内容。&lt;/p&gt;</description></item><item><title>sizers</title><link>https://www.poloxue.com/backtrader/docs/14-sizers/01-sizers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/14-sizers/01-sizers/</guid><description>&lt;h1 id="sizers"&gt;Sizers&lt;a class="anchor" href="#sizers"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;策略提供交易方法，即：&lt;code&gt;buy&lt;/code&gt;、&lt;code&gt;sell&lt;/code&gt; 和 &lt;code&gt;close&lt;/code&gt;。让我们看看 &lt;code&gt;buy&lt;/code&gt; 的签名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;buy&lt;/span&gt;(self, data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, plimit&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, valid&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, tradeid&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，如果调用者没有指定 &lt;code&gt;size&lt;/code&gt;，则 &lt;code&gt;size&lt;/code&gt; 的默认值为 &lt;code&gt;None&lt;/code&gt;。这就是 Sizers 发挥重要作用的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size=None&lt;/code&gt; 请求策略向其 Sizer 询问实际的头寸大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这显然意味着策略有一个 Sizer：是的，确实如此！如果用户没有添加 Sizer，后台机制会为策略添加一个默认的 Sizer。添加到策略中的默认 Sizer 是 &lt;code&gt;SizerFix&lt;/code&gt;。定义的初始行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SizerFix&lt;/span&gt;(SizerBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;stake&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很容易猜到这个 Sizer 只是使用 1 个单位（无论是股票、合约等）买卖。&lt;/p&gt;
&lt;h2 id="使用-sizers"&gt;使用 Sizers&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8-sizers"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="从-cerebro"&gt;从 Cerebro&lt;a class="anchor" href="#%e4%bb%8e-cerebro"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Sizers 可以通过 Cerebro 以两种不同的方法添加：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addsizer(sizercls, *args, **kwargs)&lt;/code&gt;：添加一个 Sizer，将应用于添加到 cerebro 的任何策略。这就是所谓的默认 Sizer。例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addsizer(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SizerFix, stake&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 默认策略的 Sizer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addsizer_byidx(idx, sizercls, *args, **kwargs)&lt;/code&gt;：只将 Sizer 添加到 &lt;code&gt;idx&lt;/code&gt; 引用的策略中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个 &lt;code&gt;idx&lt;/code&gt; 可以作为 &lt;code&gt;addstrategy&lt;/code&gt; 的返回值获得。例如：&lt;/p&gt;</description></item><item><title>Strategy</title><link>https://www.poloxue.com/backtrader/docs/07-strategy/01-strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/07-strategy/01-strategy/</guid><description>&lt;h1 id="strategy"&gt;Strategy&lt;a class="anchor" href="#strategy"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 backtrader 中，Cerebro 实例是整个系统的核心，而 Strategy 是用户的核心。&lt;/p&gt;
&lt;h2 id="strategy-的生命周期方法"&gt;Strategy 的生命周期方法&lt;a class="anchor" href="#strategy-%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;, 策略可以在创建时通过抛出 &lt;code&gt;StrategySkipError&lt;/code&gt; 异常来中断，该异常来自 &lt;code&gt;backtrader.errors&lt;/code&gt; 模块。这将避免在回测期间处理该策略。请参阅“异常”部分。&lt;/p&gt;
&lt;h3 id="构建__init__"&gt;构建：&lt;code&gt;__init__&lt;/code&gt;&lt;a class="anchor" href="#%e6%9e%84%e5%bb%ba__init__"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这是在实例化期间调用的：指标将在此处创建以及其他需要的属性。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;15&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="启动start"&gt;启动：&lt;code&gt;start&lt;/code&gt;&lt;a class="anchor" href="#%e5%90%af%e5%8a%a8start"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cerebro 实例通知策略是时候开始运行了。存在一个默认的空方法。&lt;/p&gt;
&lt;h3 id="初期prenext"&gt;初期：&lt;code&gt;prenext&lt;/code&gt;&lt;a class="anchor" href="#%e5%88%9d%e6%9c%9fprenext"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在创建期间声明的指标将对策略的成熟期施加限制：这称为最小周期。上面的 &lt;code&gt;__init__&lt;/code&gt; 创建了一个周期为 15 的简单移动平均线 (SMA)。&lt;/p&gt;
&lt;p&gt;只要系统看到的 bar 少于 15 个，就会调用 &lt;code&gt;prenext&lt;/code&gt;（默认实现为空操作）。&lt;/p&gt;
&lt;h3 id="成熟next"&gt;成熟：&lt;code&gt;next&lt;/code&gt;&lt;a class="anchor" href="#%e6%88%90%e7%86%9fnext"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一旦系统看到 15 个 bar 并且 SMA 有足够的缓冲区开始生成值，策略就足够成熟可以真正执行。&lt;/p&gt;
&lt;p&gt;存在一个 &lt;code&gt;nextstart&lt;/code&gt; 方法，会在从 &lt;code&gt;prenext&lt;/code&gt; 切换到 &lt;code&gt;next&lt;/code&gt; 时调用一次。&lt;code&gt;nextstart&lt;/code&gt; 的默认实现是简单地调用 &lt;code&gt;next&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="繁衍无"&gt;繁衍：无&lt;a class="anchor" href="#%e7%b9%81%e8%a1%8d%e6%97%a0"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;策略实际上不会繁衍，但从某种意义上来说，它们会，因为系统会在优化时实例化它们多次（使用不同的参数）。&lt;/p&gt;
&lt;h3 id="结束stop"&gt;结束：&lt;code&gt;stop&lt;/code&gt;&lt;a class="anchor" href="#%e7%bb%93%e6%9d%9fstop"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;系统通知策略是时候重置并整理一切了。存在一个默认的空方法。&lt;/p&gt;
&lt;p&gt;通常情况下和常规使用模式下，这看起来像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 执行某些操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;elif&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 执行其他操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个代码片段中：&lt;/p&gt;</description></item><item><title>佣金</title><link>https://www.poloxue.com/backtrader/docs/11-commission-schemes/01-commission-schemes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/11-commission-schemes/01-commission-schemes/</guid><description>&lt;h1 id="佣金"&gt;佣金&lt;a class="anchor" href="#%e4%bd%a3%e9%87%91"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="中立性"&gt;中立性&lt;a class="anchor" href="#%e4%b8%ad%e7%ab%8b%e6%80%a7"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在开始之前，让我们记住 backtrader 尝试保持数据代表内容的中立性。不同的佣金方案可以应用于相同的数据集。让我们看看如何做到这一点。&lt;/p&gt;
&lt;h2 id="经纪商快捷方式"&gt;经纪商快捷方式&lt;a class="anchor" href="#%e7%bb%8f%e7%ba%aa%e5%95%86%e5%bf%ab%e6%8d%b7%e6%96%b9%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这使得最终用户远离 CommissionInfo 对象，因为可以通过一次函数调用创建/设置佣金方案。在常规的 cerebro 创建/设置过程中，只需在经纪商成员属性上添加一个调用 setcommission 的调用即可。&lt;/p&gt;
&lt;p&gt;以下调用设置了使用 Interactive Brokers 操作 Eurostoxx50 期货的常规佣金方案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcommission(commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2.0&lt;/span&gt;, margin&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2000.0&lt;/span&gt;, mult&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10.0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于大多数用户通常只测试单一工具，这已经足够。&lt;/p&gt;
&lt;p&gt;如果你为你的数据馈送命名，因为在图表上同时考虑了多个工具，这个调用可以稍微扩展如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcommission(commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2.0&lt;/span&gt;, margin&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2000.0&lt;/span&gt;, mult&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10.0&lt;/span&gt;, name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Eurostoxxx50&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，此即时佣金方案将仅应用于名称匹配 Eurostoxx50 的工具。&lt;/p&gt;
&lt;h2 id="setcommission-参数的含义"&gt;setcommission 参数的含义&lt;a class="anchor" href="#setcommission-%e5%8f%82%e6%95%b0%e7%9a%84%e5%90%ab%e4%b9%89"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;commission&lt;/code&gt;（默认值：0.0）&lt;/p&gt;
&lt;p&gt;每次操作的货币单位，绝对值或百分比。在上述示例中，每份合约的买入和卖出费用分别为 2.0 欧元。
重要的是何时使用绝对值或百分比值。&lt;/p&gt;
&lt;p&gt;如果 margin 为 False（例如，它是 False、0 或 None），则将视为佣金表示为价格乘以操作数量的百分比。&lt;/p&gt;
&lt;p&gt;如果 margin 是其他值，则视为操作发生在类似期货的工具上，佣金是每张合约的固定价格。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;margin&lt;/code&gt;（默认值：None）&lt;/p&gt;
&lt;p&gt;操作期货类工具时需要的保证金。如上所述：&lt;/p&gt;
&lt;p&gt;如果没有设置 margin，则佣金将被视为百分比，并应用于买卖操作的价格 * 数量。&lt;/p&gt;
&lt;p&gt;如果设置了 margin，则佣金将被视为固定值，并乘以买卖操作的数量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mult&lt;/code&gt;（默认值：1.0）&lt;/p&gt;
&lt;p&gt;对于期货类工具，这决定了应用于损益计算的乘数。这使得期货同时具有吸引力和风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;（默认值：None）&lt;/p&gt;
&lt;p&gt;将佣金方案应用于名称匹配的工具。可以在创建数据馈送时设置此值。如果未设置，则方案将适用于系统中的任何数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="两个示例股票-vs-期货"&gt;两个示例：股票 vs 期货&lt;a class="anchor" href="#%e4%b8%a4%e4%b8%aa%e7%a4%ba%e4%be%8b%e8%82%a1%e7%a5%a8-vs-%e6%9c%9f%e8%b4%a7"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;期货的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcommission(commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2.0&lt;/span&gt;, margin&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2000.0&lt;/span&gt;, mult&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10.0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;股票的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcommission(commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.005&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 交易金额的 0.5%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意&lt;/p&gt;
&lt;p&gt;第二种语法不设置 margin 和 mult，backtrader 试图通过将佣金视为百分比来进行智能处理。&lt;/p&gt;</description></item><item><title>使用指标</title><link>https://www.poloxue.com/backtrader/docs/08-indicators/01-using-indicators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/08-indicators/01-using-indicators/</guid><description>&lt;h1 id="使用指标"&gt;使用指标&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%8c%87%e6%a0%87"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;指标可以在平台中的两个地方使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略内部&lt;/li&gt;
&lt;li&gt;其他指标内部&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="指标在操作中的使用"&gt;指标在操作中的使用&lt;a class="anchor" href="#%e6%8c%87%e6%a0%87%e5%9c%a8%e6%93%8d%e4%bd%9c%e4%b8%ad%e7%9a%84%e4%bd%bf%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在策略中，指标总是在 &lt;code&gt;__init__&lt;/code&gt; 中实例化。在 &lt;code&gt;next&lt;/code&gt; 中使用/检查指标值（或派生值）。有一个重要的公理需要考虑：在 &lt;code&gt;__init__&lt;/code&gt; 中声明的任何指标（或派生值）将在调用 &lt;code&gt;next&lt;/code&gt; 之前预先计算。&lt;/p&gt;
&lt;p&gt;让我们了解操作模式的差异。&lt;/p&gt;
&lt;h2 id="__init__-vs-next"&gt;&lt;code&gt;__init__&lt;/code&gt; vs &lt;code&gt;next&lt;/code&gt;&lt;a class="anchor" href="#__init__-vs-next"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;__init__&lt;/code&gt; 中涉及到线条对象的任何操作都会生成另一个线条对象。在 &lt;code&gt;next&lt;/code&gt; 中涉及到线条对象的任何操作都会生成常规的 Python 类型，如浮点数和布尔值。&lt;/p&gt;
&lt;p&gt;如 &lt;code&gt;__init__&lt;/code&gt; 中的一个操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;hilo_diff &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high &lt;span style="color:#f92672"&gt;-&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;low&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;变量 &lt;code&gt;hilo_diff&lt;/code&gt; 持有一个线条对象的引用，该对象在调用 &lt;code&gt;next&lt;/code&gt; 之前预先计算，可以使用标准数组表示法 &lt;code&gt;[]&lt;/code&gt; 访问。&lt;/p&gt;
&lt;p&gt;它显然包含了数据源中每个条的高低差值。&lt;/p&gt;
&lt;p&gt;这在混合简单线条（如 &lt;code&gt;self.data&lt;/code&gt; 数据源中的线条）和复杂线条（如指标）时也有效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;close_sma_diff &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;-&lt;/span&gt; sma&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在 &lt;code&gt;close_sma_diff&lt;/code&gt; 再次包含一个线条对象。&lt;/p&gt;
&lt;p&gt;使用逻辑运算符：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;close_over_sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; sma&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在生成的线条对象将包含一个布尔数组。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;next&lt;/code&gt; 中，一个操作（逻辑运算符）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;close_over_sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用等效数组（基于索引 0 的表示法）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;close_over_sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，&lt;code&gt;close_over_sma&lt;/code&gt; 生成一个布尔值，这是比较两个浮点值的结果，这些值由应用于 &lt;code&gt;self.data.close&lt;/code&gt; 和 &lt;code&gt;self.sma&lt;/code&gt; 的 &lt;code&gt;[0]&lt;/code&gt; 运算符返回。&lt;/p&gt;</description></item><item><title>数据源 DataFeed</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/01-datafeed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/01-datafeed/</guid><description>&lt;h1 id="数据源---配置与使用"&gt;&lt;strong&gt;数据源 - 配置与使用&lt;/strong&gt;&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90---%e9%85%8d%e7%bd%ae%e4%b8%8e%e4%bd%bf%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节介绍 &lt;code&gt;backtrader&lt;/code&gt; 中数据源的配置与使用，同时也包含了一些数据访问的技巧。&lt;/p&gt;
&lt;h2 id="数据配置"&gt;数据配置&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，数据源 &lt;code&gt;DataFeed&lt;/code&gt; 通过 &lt;code&gt;Celebro&lt;/code&gt; 配置。&lt;/p&gt;
&lt;p&gt;配置代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(MyStrategy, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;cerebro.adddata&lt;/code&gt; 将 &lt;code&gt;DataFeed&lt;/code&gt; 添加到系统中。我们无需关心系统是如何接收 &lt;code&gt;DataFeed&lt;/code&gt; 的。&lt;/p&gt;
&lt;h2 id="使用方法"&gt;使用方法&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;策略中，我们通过 &lt;code&gt;self.datas&lt;/code&gt; 数组即可访问数据。我们看一个简单示例，如我们实现策略。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;self.datas[0]&lt;/code&gt; 即可访问数据。&lt;/p&gt;
&lt;p&gt;示例中有两个注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略的 &lt;code&gt;__init__&lt;/code&gt; 方法无需接收 &lt;code&gt;*args&lt;/code&gt; 或 &lt;code&gt;**kwargs&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.datas&lt;/code&gt; 是一个包含 &lt;code&gt;DataFeed&lt;/code&gt; 的数组，至少包含一个数据源，否则会出现异常；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦数据源被添加到系统中，我们在策略实现就可以按它们添加的顺序访问到每个数据源。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在策略类访问：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#75715e"&gt;# data0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#75715e"&gt;# data1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="快捷访问"&gt;&lt;strong&gt;快捷访问&lt;/strong&gt;&lt;a class="anchor" href="#%e5%bf%ab%e6%8d%b7%e8%ae%bf%e9%97%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;数据源也可通过快捷方式轻松访问，&lt;code&gt;self.datas&lt;/code&gt; 数组中的每个元素都可以通过自动生成的成员变量进行访问：&lt;/p&gt;
&lt;p&gt;对应规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.data&lt;/code&gt; 对应的是 &lt;code&gt;self.datas[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.dataX&lt;/code&gt; 对应的是 &lt;code&gt;self.datas[X]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;</description></item><item><title>环境设置</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/01-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/01-setup/</guid><description>&lt;h1 id="环境设置"&gt;环境设置&lt;a class="anchor" href="#%e7%8e%af%e5%a2%83%e8%ae%be%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在开始构建复杂的交易策略前，我们要先配置策略运行环境。Backtrader 的环境离不开一个核心类 Cerebro（大脑），后续会详细介绍它。&lt;/p&gt;
&lt;h2 id="初始化配置"&gt;初始化配置&lt;a class="anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们先看完整的环境初始化设置的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Starting Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Final Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个示例中，我们首先导入了 backtrader 模块并命名为 bt。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;并基于 bt.Cerebro 实例化了 Cerebro 引擎。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们通过 &lt;code&gt;cerebro.broker.getvalue()&lt;/code&gt; 获取并打印了初始的持仓组合价值，即我们的初始资金。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#39;Starting Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着运行 &lt;code&gt;cerebro.run()&lt;/code&gt; 以处理数据模拟交易，并再次打印最终的持仓组合价值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(&lt;span style="color:#e6db74"&gt;&amp;#39;Final Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Starting Portfolio Value: 10000.00
Final Portfolio Value: 10000.00&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="配置解析"&gt;配置解析&lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae%e8%a7%a3%e6%9e%90"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个基础设置是构建复杂交易策略的基础。&lt;/p&gt;
&lt;p&gt;这一简单的示例中，Cerebro 引擎在后台创建了一个 broker 实例，并自动分配了一些初始资金。这种后台 broker 实例化是 backtrader 的常规特性，旨在简化用户操作。如果用户未明确设置 broker，系统会使用默认 broker，默认初始资金通常是 10,000 货币单位。&lt;/p&gt;</description></item><item><title>管理</title><link>https://www.poloxue.com/backtrader/docs/17-datetime/01-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/17-datetime/01-management/</guid><description>&lt;h1 id="管理"&gt;管理&lt;a class="anchor" href="#%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在发布 1.5.0 版本之前，backtrader 对时间管理采用的是直接方式，即直接使用数据源计算出的任何日期时间。用户输入的参数，如 &lt;code&gt;fromdate&lt;/code&gt;（或 &lt;code&gt;sessionstart&lt;/code&gt;），也可以传递给任何数据源。&lt;/p&gt;
&lt;p&gt;这种方法在对冻结数据源进行回测时效果很好。可以假设输入的日期时间在进入系统之前已经经过处理。&lt;/p&gt;
&lt;p&gt;但在 1.5.0 版本之后，backtrader 开始支持实时数据源，这就需要考虑日期时间管理。如果以下情况总是成立，那么就不需要进行这种管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;纽约的交易者交易 ES-Mini。这两个的时区都是 US/Eastern（或其别名）。&lt;/li&gt;
&lt;li&gt;柏林的交易者交易 DAX 期货。在这种情况下，两个的时区都是 CET（或 Europe/Berlin）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的直接输入-输出日期时间方法可以工作，因为柏林的交易者可以始终这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Strategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# DAX 期货在 CET 时间早上 08:00 开盘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time() &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time(&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 市场运行 30 分钟之前不操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#75715e"&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当同一个柏林交易者决定交易 ES-Mini 时，直接方法的问题就会显现出来。因为 DST（夏令时）的变化发生在一年中的不同时间，这会导致时间差异在一年中的某些周内不同步。&lt;/p&gt;
&lt;p&gt;以下代码并不总是有效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Strategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# SPX 在 US/Eastern 全年早上 09:30 开盘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 大部分时间是 15:30 CET&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 但有时是 16:30 CET 或 14:30 CET，取决于美国和欧洲的 DST 切换时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 因此以下代码是不可靠的&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time() &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time(&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 市场运行 30 分钟之前不操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#75715e"&gt;#&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="使用时区操作"&gt;使用时区操作&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%97%b6%e5%8c%ba%e6%93%8d%e4%bd%9c"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了解决上述问题并仍然保持与直接输入-输出时间方法的兼容性，backtrader 为终端用户提供了以下选项：&lt;/p&gt;</description></item><item><title>统计</title><link>https://www.poloxue.com/backtrader/docs/13-observers/01-statistics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/13-observers/01-statistics/</guid><description>&lt;h1 id="统计"&gt;统计&lt;a class="anchor" href="#%e7%bb%9f%e8%ae%a1"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 backtrader 中运行的策略主要处理数据源和指标。数据源添加到 Cerebro 实例中，并最终成为策略的输入（解析并作为实例的属性提供），而指标由策略本身声明和管理。&lt;/p&gt;
&lt;p&gt;到目前为止，所有 backtrader 示例图表都绘制了三件看似理所当然的东西，因为它们在任何地方都没有声明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现金和价值（经纪人中的资金情况）&lt;/li&gt;
&lt;li&gt;交易（即操作）&lt;/li&gt;
&lt;li&gt;买/卖订单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们是观察器，存在于子模块 backtrader.observers 中。因为 Cerebro 支持一个参数来自动将它们（或不将它们）添加到策略中：&lt;code&gt;stdstats&lt;/code&gt;（默认：True）。&lt;/p&gt;
&lt;p&gt;如果遵循默认设置，Cerebro 将执行以下等效用户代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro() &lt;span style="color:#75715e"&gt;# 默认参数：stdstats=True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addobserver(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Broker)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addobserver(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Trades)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addobserver(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BuySell)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;让我们看看通常带有这三个默认观察器的图表（即使没有发出订单，因此没有交易发生，现金和投资组合价值没有变化）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; __future__ &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (absolute_import, division, print_function, unicode_literals)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader.feeds &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; btfeeds
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro(stdstats&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-day-001.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在让我们在创建 Cerebro 实例时将 &lt;code&gt;stdstats&lt;/code&gt; 的值更改为 False（也可以在调用 &lt;code&gt;run&lt;/code&gt; 时完成）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro(stdstats&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;图表现在有所不同。&lt;/p&gt;</description></item><item><title>订单</title><link>https://www.poloxue.com/backtrader/docs/09-orders/01-general/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/09-orders/01-general/</guid><description>&lt;h1 id="订单"&gt;订单&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Cerebro 是 backtrader 中的关键控制系统，而 Strategy（一个子类）是终端用户的关键控制点。后者需要一个连接系统其他部分的方法，这就是订单发挥关键作用的地方。&lt;/p&gt;
&lt;p&gt;订单将策略中的逻辑决策转化为适合 Broker 执行操作的消息。这是通过以下方式完成的：&lt;/p&gt;
&lt;h2 id="创建"&gt;创建&lt;a class="anchor" href="#%e5%88%9b%e5%bb%ba"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过 Strategy 的方法：&lt;code&gt;buy&lt;/code&gt;、&lt;code&gt;sell&lt;/code&gt; 和 &lt;code&gt;close&lt;/code&gt;（Strategy），这些方法返回一个订单实例作为参考。&lt;/p&gt;
&lt;h2 id="取消"&gt;取消&lt;a class="anchor" href="#%e5%8f%96%e6%b6%88"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过 Strategy 的方法：&lt;code&gt;cancel&lt;/code&gt;（Strategy），该方法需要一个订单实例来操作。&lt;/p&gt;
&lt;p&gt;订单也作为一种通信方式反馈给用户，通知 Broker 中的执行情况。&lt;/p&gt;
&lt;h2 id="通知"&gt;通知&lt;a class="anchor" href="#%e9%80%9a%e7%9f%a5"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过 Strategy 的方法：&lt;code&gt;notify_order&lt;/code&gt;（Strategy），该方法报告一个订单实例。&lt;/p&gt;
&lt;h2 id="订单创建"&gt;订单创建&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95%e5%88%9b%e5%bb%ba"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;调用 &lt;code&gt;buy&lt;/code&gt;、&lt;code&gt;sell&lt;/code&gt; 和 &lt;code&gt;close&lt;/code&gt; 时，以下参数适用于创建：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;为哪个数据创建订单。如果为 None，则使用系统中的第一个数据，&lt;code&gt;self.datas[0]&lt;/code&gt; 或 &lt;code&gt;self.data0&lt;/code&gt;（又名 &lt;code&gt;self.data&lt;/code&gt;）。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;使用的单位数量。如果为 None，则使用通过 &lt;code&gt;getsizer&lt;/code&gt; 获取的 sizer 实例来确定大小。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;price&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;使用的价格（实时 Broker 可能会对格式有实际限制，如果不符合最小刻度要求）。对于 Market 和 Close 订单，None 是有效的（市场决定价格）。对于 Limit、Stop 和 StopLimit 订单，该值决定触发点（在 Limit 的情况下，触发点显然是订单匹配的价格）。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;plimit&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;仅适用于 StopLimit 订单。这是在 Stop 触发后设置隐含 Limit 订单的价格。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;exectype&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;可能的值：&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- &lt;code&gt;Order.Market&lt;/code&gt; 或 None：市场订单将以下一个可用价格执行。在回测中，这将是下一根K线的开盘价。&lt;/li&gt;&lt;li&gt;- &lt;code&gt;Order.Limit&lt;/code&gt;：只能在给定价格或更好的价格执行的订单。&lt;/li&gt;&lt;li&gt;- &lt;code&gt;Order.Stop&lt;/code&gt;：在价格触发时执行的订单，执行方式如同 Market 订单。&lt;/li&gt;&lt;li&gt;- &lt;code&gt;Order.StopLimit&lt;/code&gt;：在价格触发时执行的订单，作为隐含 Limit 订单执行，价格由 &lt;code&gt;pricelimit&lt;/code&gt; 给定。&lt;/li&gt;&lt;/li&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;valid&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;可能的值：&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- None：生成一个不会过期的订单（即 Good till cancel），并在市场中保留直到匹配或取消。实际上，Broker 往往会强制一个时间限制，但这通常是很长时间，所以认为它不会过期。&lt;/li&gt;&lt;li&gt;- &lt;code&gt;datetime.datetime&lt;/code&gt; 或 &lt;code&gt;datetime.date&lt;/code&gt; 实例：使用给定的日期生成一个有效直到该日期的订单（即 Good till date）。&lt;/li&gt;&lt;li&gt;- &lt;code&gt;Order.DAY&lt;/code&gt; 或 0 或 &lt;code&gt;timedelta()&lt;/code&gt;：生成一个有效期为一天的订单（即日订单），有效期直到会话结束。&lt;/li&gt;&lt;li&gt;- 数值：假定为一个对应于 &lt;code&gt;matplotlib&lt;/code&gt; 编码的日期时间值（backtrader 使用的），并用于生成一个有效期至该时间的订单（即 Good till date）。&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;tradeid&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;0&lt;/td&gt;
 &lt;td&gt;这是 backtrader 用来跟踪同一资产上重叠交易的内部值。在通知订单状态变化时，该 &lt;code&gt;tradeid&lt;/code&gt; 会返回给策略。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;**kwargs&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;/&lt;/td&gt;
 &lt;td&gt;额外的 Broker 实现可能支持额外的参数。backtrader 会将 kwargs 传递给创建的订单对象。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="示例"&gt;示例&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果 backtrader 直接支持的 4 种订单执行类型不够，例如对于 Interactive Brokers，可以传递如下参数：&lt;/p&gt;</description></item><item><title>超大内存</title><link>https://www.poloxue.com/backtrader/docs/19-articles/01-out-of-memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/19-articles/01-out-of-memory/</guid><description>&lt;h1 id="关于回测性能和超大内存执行"&gt;关于回测性能和超大内存执行&lt;a class="anchor" href="#%e5%85%b3%e4%ba%8e%e5%9b%9e%e6%b5%8b%e6%80%a7%e8%83%bd%e5%92%8c%e8%b6%85%e5%a4%a7%e5%86%85%e5%ad%98%e6%89%a7%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;最近在 Reddit 上有两个相关的帖子，启发了本文的写作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个声称 backtrader 无法处理 160 万根 K线的帖子：reddit/r/algotrading - A performant backtesting system?&lt;/li&gt;
&lt;li&gt;另一个要求一个能回测 8000 支股票的工具：reddit/r/algotrading - Backtesting libs that supports 1000+ stocks?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中有一位作者询问如何使用一个可以回测“超大内存”的框架，“因为显然不能将所有这些数据加载到内存中。”&lt;/p&gt;
&lt;p&gt;我们将会在本文中讨论这些概念，结合 backtrader 来解决。&lt;/p&gt;
&lt;h3 id="2m-k线"&gt;2M K线&lt;a class="anchor" href="#2m-k%e7%ba%bf"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;为了验证这一点，首先需要生成这么多的 K线。考虑到第一个发帖者提到 77 支股票和 160 万根 K线，这意味着每支股票大约有 20,779 根 K线，因此我们将进行以下操作来使数据更加简洁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为 100 支股票生成 K线数据&lt;/li&gt;
&lt;li&gt;每支股票生成 20,000 根 K线&lt;/li&gt;
&lt;li&gt;即：生成 100 个文件，总共 200 万根 K线。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成数据的脚本如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; numpy &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; pandas &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;COLUMNS &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;high&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;low&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;volume&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;openinterest&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;CANDLES &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;20000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;STOCKS &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dateindex &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date_range(start&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;2010-01-01&amp;#39;&lt;/span&gt;, periods&lt;span style="color:#f92672"&gt;=&lt;/span&gt;CANDLES, freq&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;15min&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; i &lt;span style="color:#f92672"&gt;in&lt;/span&gt; range(STOCKS):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; np&lt;span style="color:#f92672"&gt;.&lt;/span&gt;random&lt;span style="color:#f92672"&gt;.&lt;/span&gt;randint(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;, size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(CANDLES, len(COLUMNS)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pd&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataFrame(data &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1.01&lt;/span&gt;, dateindex, columns&lt;span style="color:#f92672"&gt;=&lt;/span&gt;COLUMNS)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; df &lt;span style="color:#f92672"&gt;=&lt;/span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rename_axis(&lt;span style="color:#e6db74"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; df&lt;span style="color:#f92672"&gt;.&lt;/span&gt;to_csv(&lt;span style="color:#e6db74"&gt;&amp;#39;candles&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{:02d}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;.csv&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;format(i))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该脚本生成了 100 个文件，从 &lt;code&gt;candles00.csv&lt;/code&gt; 到 &lt;code&gt;candles99.csv&lt;/code&gt;。实际的数据值不重要，重要的是保持标准的日期时间格式、OHLCV 数据（包括未平仓合约）。&lt;/p&gt;</description></item><item><title>过滤器 Filters</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/09-datafeed-filters/01-datafeed-filters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/09-datafeed-filters/01-datafeed-filters/</guid><description>&lt;h1 id="过滤器-filters"&gt;过滤器 Filters&lt;a class="anchor" href="#%e8%bf%87%e6%bb%a4%e5%99%a8-filters"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;该功能是较晚加入到 &lt;strong&gt;Backtrader&lt;/strong&gt; 中的，且为了适应已有的内部结构进行了一些调整。因此，它在灵活性和功能完备性上可能不如预期，但在许多情况下仍然能达到目的。&lt;/p&gt;
&lt;p&gt;尽管实现时尝试支持即插即用的过滤器链，但由于原有内部结构的限制，始终无法保证每次都能实现。因此，有些过滤器可以链式使用，而有些则不能。&lt;/p&gt;
&lt;h2 id="目的"&gt;目的&lt;a class="anchor" href="#%e7%9b%ae%e7%9a%84"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;将数据源提供的值转换为不同的数据流。&lt;/p&gt;
&lt;p&gt;该实现最初是为了简化两个明显的过滤器的实现，这两个过滤器可以通过cerebro API直接使用，分别是 &lt;strong&gt;重采样&lt;/strong&gt; 和 &lt;strong&gt;重放&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重采样（cerebro.resampledata）&lt;/strong&gt;：这个过滤器会改变传入数据流的时间框架和压缩比例，如：&lt;code&gt;(秒，1)&lt;/code&gt; -&amp;gt; &lt;code&gt;(天，1)&lt;/code&gt;。这意味着原始数据流是以1秒为周期的数据条。重采样过滤器会拦截数据并进行缓冲，直到能够提供1天的条形数据。这发生在看到第二天的1秒条形数据时。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重放（cerebro.replaydata）&lt;/strong&gt;，在上面相同的时间框架下，过滤器会利用1秒的分辨率条形数据重建1天的条形数据。也就是说，1天的条形数据会被反复传递，直到显示出所有1秒的条形数据，并且数据内容会更新。这种方法模拟了实际交易日的发展。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，在日期没有变化的情况下，数据的长度（len(data)）以及策略的长度保持不变。&lt;/p&gt;
&lt;h2 id="工作原理"&gt;工作原理&lt;a class="anchor" href="#%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;给定一个已有的数据源，你可以使用&lt;code&gt;addfilter&lt;/code&gt;方法来添加过滤器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; MyDataFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;myname)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addfilter(filter, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即使它与重采样或重放过滤器兼容，你也可以做如下操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; MyDataFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;myname)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addfilter(filter, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;replaydata(data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="过滤器接口"&gt;过滤器接口&lt;a class="anchor" href="#%e8%bf%87%e6%bb%a4%e5%99%a8%e6%8e%a5%e5%8f%a3"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;过滤器必须符合以下接口要求。首先，要是一个可调用的对象，接受如下签名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;callable(data, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或一个可以实例化并被调用的类，在实例化时其&lt;code&gt;__init__&lt;/code&gt;方法必须支持以下签名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, data, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;__call__&lt;/code&gt;方法的签名为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__call__&lt;/span&gt;(self, data, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每当新的数据流值到来时，实例都会被调用。&lt;code&gt;*args&lt;/code&gt;和&lt;code&gt;**kwargs&lt;/code&gt;与&lt;code&gt;__init__&lt;/code&gt;方法传递的参数相同。&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;返回值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;表示数据流的内部数据获取循环需要重新尝试从数据源中获取数据，因为数据流的长度被修改了。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;即使数据可能已经被编辑（例如：修改了&lt;code&gt;close&lt;/code&gt;价格），数据流的长度保持不变。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果是基于类的过滤器，还可以实现两个额外的方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;last&lt;/code&gt;，其签名为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;last&lt;/span&gt;(self, data, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当数据流结束时，这个方法会被调用，允许过滤器推送它可能缓冲的数据。例如在重采样的情况下，一个条形数据会被缓冲，直到看到下一个时间段的数据。如果数据流结束，就没有新的数据可以推动缓冲的数据，&lt;code&gt;last&lt;/code&gt;方法提供了推送缓冲数据的机会。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果过滤器没有任何参数，且在添加时没有额外的参数，签名可以简化为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, data) &lt;span style="color:#f92672"&gt;-&amp;gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="示例过滤器"&gt;示例过滤器&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e8%bf%87%e6%bb%a4%e5%99%a8"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以下是一个非常简单的过滤器实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SessionFilter&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self, data):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__call__&lt;/span&gt;(self, data):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sessionstart &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;time() &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sessionend:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 在交易时段内&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 告诉外部数据循环，当前条形数据可以继续处理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 在常规交易时段外&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;backwards() &lt;span style="color:#75715e"&gt;# 从数据堆栈中移除该条形数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 告诉外部数据循环，必须获取新的条形数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该过滤器：&lt;/p&gt;</description></item><item><title>Pyfolio</title><link>https://www.poloxue.com/backtrader/docs/12-analyzers/02-pyfolio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/12-analyzers/02-pyfolio/</guid><description>&lt;h1 id="pyfolio"&gt;PyFolio&lt;a class="anchor" href="#pyfolio"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;注意，截至（至少）2017-07-25，pyfolio 的 API 已更改，&lt;code&gt;create_full_tear_sheet&lt;/code&gt; 不再有 &lt;code&gt;gross_lev&lt;/code&gt; 作为命名参数。因此，集成示例无法正常工作。&lt;/p&gt;
&lt;blockquote class='book-hint '&gt;
&lt;p&gt;引用 pyfolio 主页面 &lt;a href="http://quantopian.github.io/pyfolio/"&gt;http://quantopian.github.io/pyfolio/&lt;/a&gt; 的内容：
pyfolio 是一个由 Quantopian Inc. 开发的用于金融投资组合的表现和风险分析的 Python 库。它与开源回测库 Zipline 配合良好，现在它也可以很好地与 backtrader 配合。所需的内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显然需要 pyfolio&lt;/li&gt;
&lt;li&gt;以及它的依赖项（如 pandas、seaborn 等）&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;注意，在与 0.5.1 版本集成期间，需要更新依赖项的最新版本，例如将之前安装的 seaborn 从 0.7.0-dev 更新到 0.7.1，显然是由于缺少方法 &lt;code&gt;swarmplot&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="用法"&gt;用法&lt;a class="anchor" href="#%e7%94%a8%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;将 PyFolio 分析器添加到 cerebro 中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addanalyzer(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PyFolio)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行并检索第一个策略：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;strats &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;strat0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strats[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用你给分析器命名的名称或默认名称（pyfolio）来检索分析器。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pyfolio &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strats&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbyname(&lt;span style="color:#e6db74"&gt;&amp;#39;pyfolio&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用分析器方法 &lt;code&gt;get_pf_items&lt;/code&gt; 检索 pyfolio 后续需要的四个组件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;returns, positions, transactions, gross_lev &lt;span style="color:#f92672"&gt;=&lt;/span&gt; pyfolio&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get_pf_items()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意&lt;/p&gt;
&lt;p&gt;集成是通过查看 &lt;code&gt;pyfolio&lt;/code&gt; 的测试样本并复制相同的标题（或缺少的部分）来完成的。&lt;/p&gt;
&lt;p&gt;与 pyfolio 一起工作（这已经超出了 backtrader 生态系统的范围）&lt;/p&gt;
&lt;p&gt;一些与 backtrader 无关的使用注意事项：&lt;/p&gt;</description></item><item><title>Qanda</title><link>https://www.poloxue.com/backtrader/docs/15-livetrading/02-qanda-v1-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/15-livetrading/02-qanda-v1-0/</guid><description>&lt;h1 id="oanda"&gt;Oanda&lt;a class="anchor" href="#oanda"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Oanda的集成支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时数据馈送&lt;/li&gt;
&lt;li&gt;实时交易&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="要求"&gt;要求&lt;a class="anchor" href="#%e8%a6%81%e6%b1%82"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;oandapy&lt;/strong&gt;：可以通过以下命令安装：&lt;code&gt;pip install git+https://github.com/oanda/oandapy.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pytz&lt;/strong&gt;（可选，不推荐）：由于外汇市场的全球性和24x7的特点，选择使用UTC时间。如果愿意，仍然可以使用所需的输出时区。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;源代码中包含完整示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;samples/oandatest/oandatest.py&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="oanda---存储"&gt;Oanda - 存储&lt;a class="anchor" href="#oanda---%e5%ad%98%e5%82%a8"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;存储是实时数据馈送和交易支持的核心，提供了Oanda API和数据馈送及经纪代理之间的适配层。&lt;/p&gt;
&lt;p&gt;可以通过以下方法获取经纪商实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OandaStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbroker(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过以下方法获取数据馈送实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OandaStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，许多**kwargs是数据馈送的常见参数，如dataname、fromdate、todate、sessionstart、sessionend、timeframe、compression。&lt;/p&gt;
&lt;p&gt;数据可能提供其他参数。请参阅下面的参考。&lt;/p&gt;
&lt;h2 id="必要参数"&gt;必要参数&lt;a class="anchor" href="#%e5%bf%85%e8%a6%81%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了成功连接到Oanda，以下参数是必要的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt;（默认：无）：API访问令牌&lt;/li&gt;
&lt;li&gt;&lt;code&gt;account&lt;/code&gt;（默认：无）：账户ID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些由Oanda提供。&lt;/p&gt;
&lt;p&gt;无论是连接到模拟服务器还是真实服务器，请使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;practice&lt;/code&gt;（默认：False）：使用测试环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;账户需要定期检查以获取现金和价值。周期性可以通过以下方式控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;account_tmout&lt;/code&gt;（默认：10.0）：刷新账户价值/现金刷新周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="oanda数据馈送"&gt;Oanda数据馈送&lt;a class="anchor" href="#oanda%e6%95%b0%e6%8d%ae%e9%a6%88%e9%80%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;实例化数据时：&lt;/p&gt;
&lt;p&gt;按照Oanda指南传递符号。例如，EUR/USD根据Oanda的指南需要指定为EUR_USD。实例化如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; oandastore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;EUR_USD&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="时间管理"&gt;时间管理&lt;a class="anchor" href="#%e6%97%b6%e9%97%b4%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;除非传递了&lt;code&gt;tz&lt;/code&gt;参数（一个pytz兼容对象）给数据馈送，否则所有时间输出都以UTC格式表示，如上所述。&lt;/p&gt;
&lt;h2 id="回填"&gt;回填&lt;a class="anchor" href="#%e5%9b%9e%e5%a1%ab"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;backtrader不会向Oanda发出特殊请求。对于小时间框架，Oanda在模拟服务器上返回的回填数据长度为500个柱。&lt;/p&gt;
&lt;h2 id="oandabroker---实时交易"&gt;OandaBroker - 实时交易&lt;a class="anchor" href="#oandabroker---%e5%ae%9e%e6%97%b6%e4%ba%a4%e6%98%93"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="使用经纪商"&gt;使用经纪商&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e7%bb%8f%e7%ba%aa%e5%95%86"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要使用OandaBroker，需要替换cerebro创建的标准经纪商模拟实例。&lt;/p&gt;
&lt;p&gt;使用存储模型（推荐）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;oandastore &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stores&lt;span style="color:#f92672"&gt;.&lt;/span&gt;OandaStore()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker &lt;span style="color:#f92672"&gt;=&lt;/span&gt; oandastore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbroker() &lt;span style="color:#75715e"&gt;# 或 cerebro.setbroker(...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="经纪商---初始头寸"&gt;经纪商 - 初始头寸&lt;a class="anchor" href="#%e7%bb%8f%e7%ba%aa%e5%95%86---%e5%88%9d%e5%a7%8b%e5%a4%b4%e5%af%b8"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;经纪商支持一个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_positions&lt;/code&gt;（默认：True）：连接到经纪商提供商时使用现有头寸来启动经纪商。
在实例化时设置为False以忽略任何现有头寸。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="操作"&gt;操作&lt;a class="anchor" href="#%e6%93%8d%e4%bd%9c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用方面没有变化。只需使用策略中提供的方法（请参阅策略参考以获取完整说明）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="订单执行类型"&gt;订单执行类型&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95%e6%89%a7%e8%a1%8c%e7%b1%bb%e5%9e%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oanda支持几乎所有backtrader需要的订单执行类型，除了Close。因此，订单执行类型限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Order.Market&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.Limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.Stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.StopLimit&lt;/code&gt;（使用Stop和upperBound/lowerBound价格）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.StopTrail&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过使用&lt;code&gt;takeprofit&lt;/code&gt;和&lt;code&gt;stoploss&lt;/code&gt;订单成员并创建内部模拟订单来支持括号订单。&lt;/p&gt;</description></item><item><title>信号策略</title><link>https://www.poloxue.com/backtrader/docs/07-strategy/02-strategy-with-signals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/07-strategy/02-strategy-with-signals/</guid><description>&lt;h1 id="信号策略"&gt;信号策略&lt;a class="anchor" href="#%e4%bf%a1%e5%8f%b7%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;使用 backtrader 进行操作不一定非得编写一个策略类。虽然这是首选方式，但由于对象层次结构的原因，使用信号也是可行的。&lt;/p&gt;
&lt;h2 id="快速总结"&gt;快速总结：&lt;a class="anchor" href="#%e5%bf%ab%e9%80%9f%e6%80%bb%e7%bb%93"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不需要编写策略类、实例化指标、编写买卖逻辑等。&lt;/li&gt;
&lt;li&gt;添加信号（无论如何也是指标），其余部分在后台完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="快速示例"&gt;快速示例：&lt;a class="anchor" href="#%e5%bf%ab%e9%80%9f%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;OneOfTheFeeds(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;mydataname&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_signal(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SIGNAL_LONGSHORT, MySignal)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就完成了。当然，信号本身还没有定义。&lt;/p&gt;
&lt;p&gt;让我们定义一个非常简单的信号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果收盘价高于简单移动平均线 (SMA)，则发出多头信号。&lt;/li&gt;
&lt;li&gt;如果收盘价低于 SMA，则发出空头信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MySignal&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Indicator):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;signal&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;signal &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data &lt;span style="color:#f92672"&gt;-&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在真的完成了。&lt;/p&gt;
&lt;p&gt;当运行 &lt;code&gt;run&lt;/code&gt; 时，Cerebro 会处理实例化一个特殊的策略实例，它知道如何处理这些信号。&lt;/p&gt;
&lt;h3 id="常见问题"&gt;常见问题&lt;a class="anchor" href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;买卖操作的数量是如何确定的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cerebro 实例自动为策略添加一个固定大小 (FixedSize) 的定量器。最终用户可以通过 &lt;code&gt;cerebro.addsizer&lt;/code&gt; 更改定量器以改变策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;订单是如何执行的？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行类型为市价单，订单的有效期为“直到取消” (Good Until Canceled)。&lt;/p&gt;
&lt;h3 id="信号细节"&gt;信号细节&lt;a class="anchor" href="#%e4%bf%a1%e5%8f%b7%e7%bb%86%e8%8a%82"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;从技术和理论角度来看，可以描述为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个可调用对象，当被调用时返回另一个对象（只调用一次）。&lt;/li&gt;
&lt;li&gt;在大多数情况下，这是一个类的实例化，但不一定非得是。&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;__getitem__&lt;/code&gt; 接口。唯一请求的键/索引将是 0。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从实际角度来看，信号是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;来自 backtrader 生态系统的 &lt;code&gt;lines&lt;/code&gt; 对象，主要是指标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这在使用其他指标时很有帮助，比如示例中的简单移动平均线。&lt;/p&gt;</description></item><item><title>创建/执行</title><link>https://www.poloxue.com/backtrader/docs/09-orders/02-creation-execution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/09-orders/02-creation-execution/</guid><description>&lt;h1 id="订单管理和执行"&gt;订单管理和执行&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95%e7%ae%a1%e7%90%86%e5%92%8c%e6%89%a7%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;对于订单管理，&lt;strong&gt;Backtrader&lt;/strong&gt; 提供了3种基本操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;：一个更新操作显然是合乎逻辑的，但常识告诉我们，这种方法主要用于使用判断性交易方法的手动操作员。&lt;/p&gt;
&lt;p&gt;对于订单执行逻辑，提供以下执行类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;市价订单（Market）&lt;/li&gt;
&lt;li&gt;收盘价订单（Close）&lt;/li&gt;
&lt;li&gt;限价订单（Limit）&lt;/li&gt;
&lt;li&gt;止损订单（Stop）&lt;/li&gt;
&lt;li&gt;止损限价订单（StopLimit）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="订单管理"&gt;订单管理&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一些示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 购买主数据，使用sizer的默认股份，市价订单&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 市价订单 - 有效期将被 &amp;#34;忽略&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(valid&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;now() &lt;span style="color:#f92672"&gt;+&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 市价订单 - 价格将被忽略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1.02&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 市价订单 - 手动股份&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 限价订单 - 想要设置价格并可以设置有效期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Limit,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1.02&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; valid&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;now() &lt;span style="color:#f92672"&gt;+&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(days&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 止损限价订单 - 想要设置价格，价格限制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StopLimit,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1.02&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plimit&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1.07&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 取消现有订单&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cancel(order)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有订单类型都可以通过创建一个订单实例（或其子类之一）并传递给 broker 来创建：&lt;/p&gt;</description></item><item><title>参数说明</title><link>https://www.poloxue.com/backtrader/docs/05-cerebro/02-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/05-cerebro/02-reference/</guid><description>&lt;h1 id="参数说明"&gt;参数说明&lt;a class="anchor" href="#%e5%8f%82%e6%95%b0%e8%af%b4%e6%98%8e"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;如下是 &lt;code&gt;Cerebro&lt;/code&gt; 类的详细说明。&lt;/p&gt;
&lt;h2 id="实例化参数"&gt;实例化参数&lt;a class="anchor" href="#%e5%ae%9e%e4%be%8b%e5%8c%96%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;说明&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;preload&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;是否预加载传递给策略的不同数据源。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;runonce&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;以矢量化模式计算指标，从而提高整个系统的性能。&lt;br&gt;&lt;strong&gt;注：&lt;/strong&gt; 策略和观察者将始终基于事件运行。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;live&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;如果没有数据报告为实时（通过数据的&lt;code&gt;islive&lt;/code&gt;方法，但用户仍希望以实时模式运行，可将此参数设为true。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;maxcpus&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;同时使用多少核心进行优化，默认 None，即启用所有可用的 CPU 核。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;stdstats&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True）&lt;/td&gt;
 &lt;td&gt;如果为True，将添加默认观察者：经纪人（现金和价值）、交易和买卖。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;oldbuysell&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;如 &lt;code&gt;stdstats&lt;/code&gt; 为 True 且自动添加观察者，此开关控制买卖观察者的主要行为。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;oldtrades&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;如果&lt;code&gt;stdstats&lt;/code&gt;为True 且自动添加观察者，此开关控制交易观察者的主要行为。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;exactbars&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- &lt;code&gt;False&lt;/code&gt;：默认值，将存储在 &lt;code&gt;Line&lt;/code&gt; 中的值都保存到内存。&lt;/li&gt;&lt;li&gt;-&lt;code&gt;True&lt;/code&gt;或&lt;code&gt;1&lt;/code&gt;：所有&lt;code&gt;Line&lt;/code&gt;对象的内存使用减少至计算最小周期。&lt;ul&gt;&lt;li&gt;如果简单移动平均线的周期为30，则底层数据将始终有一个30条的运行缓冲区，以允许计算简单移动平均线。&lt;/li&gt;&lt;li&gt;此设置将停用&lt;code&gt;preload&lt;/code&gt;和&lt;code&gt;runonce&lt;/code&gt;。&lt;/li&gt;&lt;li&gt;使用此设置还将停用绘图。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt; &lt;code&gt;-1&lt;/code&gt;：策略级别的数据源和指标/操作将保留所有数据在内存中。&lt;ul&gt;&lt;li&gt;如 &lt;code&gt;RSI&lt;/code&gt; 通过指标&lt;code&gt;UpDay&lt;/code&gt;计算，不会将它的所有数据保留内存。&lt;/li&gt;&lt;li&gt; 这允许保持绘图和预加载活动。&lt;/li&gt;&lt;li&gt;&lt;code&gt;runonce&lt;/code&gt;将被停用。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;&lt;code&gt;-2&lt;/code&gt;：作为策略属性的数据源和指标将保留所有点在内存中。&lt;ul&gt;&lt;li&gt;例如：&lt;code&gt;RSI&lt;/code&gt;内部使用指标&lt;code&gt;UpDay&lt;/code&gt;进行计算。此子指标将不保留所有数据在内存中。&lt;/li&gt;&lt;li&gt;如果在&lt;code&gt;__init__&lt;/code&gt;中定义了&lt;code&gt;a = self.data.close - self.data.high&lt;/code&gt;，那么&lt;code&gt;a&lt;/code&gt;将不保留所有数据在内存中。&lt;/li&gt;&lt;li&gt;- 这允许保持绘图和预加载活动。&lt;/li&gt;&lt;li&gt;&lt;code&gt;runonce&lt;/code&gt;将被停用。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;objcache&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;实验选项，用于实现 &lt;code&gt;Line&lt;/code&gt; 对象的缓存并减少它们的数量。示例来自&lt;code&gt;UltimateOscillator&lt;/code&gt;：&lt;div&gt;&lt;pre&gt;&lt;code class="language-python" data-lang="python"&gt;bp = self.data.close - TrueLow(self.data) &lt;br/&gt;# -&amp;gt; 创建另一个 TrueLow(self.data)&lt;br/&gt;&lt;span&gt;tr = TrueRange(self.data)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;如果为True，&lt;code&gt;TrueRange&lt;/code&gt;内部的第二个&lt;code&gt;TrueLow(self.data)&lt;/code&gt;将匹配bp计算中的签名，并将被重用。可能发生的极端情况是这会使线对象超出其最小周期并导致问题，因此被禁用。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;如果设置为True，将创建一个默认的&lt;code&gt;WriterFile&lt;/code&gt;，它将打印到标准输出。它将被添加到策略中（除了用户代码添加的任何其他编写器）。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;tradehistory&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;如果设置为True，它将激活所有策略中每个交易的更新事件日志记录。也可以通过策略方法&lt;code&gt;set_tradehistory&lt;/code&gt;在每个策略基础上完成。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;optdatas&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;如果为 True 且在优化（并且系统可以预加载和使用runonce），则数据预加载将仅在主进程中完成，以节省时间和资源。测试显示，执行时间从83秒减少到66秒，约20%的速度提升。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;optreturn&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;如果为True，优化结果将不会是完整的策略对象（和所有数据、指标、观察者&amp;hellip;），而是具有以下属性的对象（与策略相同）：&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;params&lt;/code&gt;（或&lt;code&gt;p&lt;/code&gt;）&lt;/td&gt;
 &lt;td&gt;无&lt;/td&gt;
 &lt;td&gt;执行策略时的参数。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;analyzers&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;无&lt;/td&gt;
 &lt;td&gt;策略已执行的分析器。大多数情况下，仅需要分析器和参数来评估策略的性能。如果需要详细分析生成的值（例如指标），请将其关闭。测试显示，执行时间提高了13% - 15%。结合&lt;code&gt;optdatas&lt;/code&gt;，总收益增加到32%。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;oldsync&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;从版本1.9.0.99开始，多个数据（相同或不同时间框架）的同步已更改，以允许不同长度的数据。如果希望使用数据0作为系统主控的数据的旧行为，请将此参数设置为True。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;tz&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;为策略添加全局时区。参数tz可以是：&lt;ul&gt;&lt;li&gt;&lt;code&gt;None&lt;/code&gt;：在这种情况下，策略显示的日期时间将是UTC，这一直是标准行为。&lt;/li&gt;&lt;li&gt;&lt;code&gt;pytz&lt;/code&gt;实例。将用作将UTC时间转换为所选时区。&lt;/li&gt;&lt;li&gt;&lt;code&gt;字符串&lt;/code&gt;。将尝试实例化&lt;code&gt;pytz&lt;/code&gt;实例。&lt;/li&gt;&lt;li&gt;&lt;code&gt;整数&lt;/code&gt;。对于策略，使用&lt;code&gt;self.datas&lt;/code&gt;可迭代对象中相应数据的相同时区（0将使用&lt;code&gt;data0&lt;/code&gt;的时区）。&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;cheat_on_open&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;将调用策略的&lt;code&gt;next_open&lt;/code&gt;方法。&lt;br/&gt;&lt;br/&gt;这发生在&lt;code&gt;next&lt;/code&gt;之前，并且在经纪人有机会评估订单之前。指标尚未重新计算。这允许发布考虑前一天指标的订单，但使用开盘价进行股份计算。&lt;br/&gt;&lt;br/&gt;对于&lt;code&gt;cheat_on_open&lt;/code&gt;订单执行，还要调用 &lt;code&gt;cerebro.broker.set_coo(True)&lt;/code&gt;或实例化一个&lt;code&gt;BackBroker(coo=True)&lt;/code&gt;（coo表示&lt;code&gt;cheat-on-open&lt;/code&gt;）或将&lt;code&gt;broker_coo&lt;/code&gt;参数设置为True。除非在下文中禁用，否则Cerebro会自动执行此操作。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;broker_coo&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;这将自动调用经纪人的&lt;code&gt;set_coo&lt;/code&gt;方法，并将其设置为True以激活&lt;code&gt;cheat_on_open&lt;/code&gt;执行。只有在&lt;code&gt;cheat_on_open&lt;/code&gt;也为True时才会执行。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;quicknotify&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;在传递下一个价格之前立即传递经纪人通知。对于回测没有影响，但对于实时经纪人，通知可能在条传递之前很久就发生。当设置为True时，将尽快传递通知（请参阅实时数据源中的&lt;code&gt;qcheck&lt;/code&gt;）。为了兼容性，设置为False。可能会更改为True。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="成员方法"&gt;成员方法&lt;a class="anchor" href="#%e6%88%90%e5%91%98%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addstorecb(callback)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;添加一个回调以获取将由&lt;code&gt;notify_store&lt;/code&gt;方法处理的消息。回调的签名必须支持以下内容：&lt;/p&gt;</description></item><item><title>参考</title><link>https://www.poloxue.com/backtrader/docs/14-sizers/02-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/14-sizers/02-reference/</guid><description>&lt;h1 id="参考"&gt;参考&lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="fixedsize"&gt;FixedSize&lt;a class="anchor" href="#fixedsize"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedSize()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此 Sizer 仅为任何操作返回固定大小。通过指定 &lt;code&gt;tranches&lt;/code&gt; 参数，可以控制系统希望用于逐步进入交易的批次数量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stake&lt;/code&gt;（默认：&lt;code&gt;1&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tranches&lt;/code&gt;（默认：&lt;code&gt;1&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fixedreverser"&gt;FixedReverser&lt;a class="anchor" href="#fixedreverser"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedReverser()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此 Sizer 返回反转已开头寸所需的固定大小或开仓所需的固定大小。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开仓：返回参数 &lt;code&gt;stake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反转头寸：返回 &lt;code&gt;2 * stake&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stake&lt;/code&gt;（默认：&lt;code&gt;1&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="percentsizer"&gt;PercentSizer&lt;a class="anchor" href="#percentsizer"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PercentSizer()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此 Sizer 返回可用现金的百分比。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;percents&lt;/code&gt;（默认：&lt;code&gt;20&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="allinsizer"&gt;AllInSizer&lt;a class="anchor" href="#allinsizer"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;AllInSizer()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此 Sizer 返回经纪人所有可用现金。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;percents&lt;/code&gt;（默认：&lt;code&gt;100&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="percentsizerint"&gt;PercentSizerInt&lt;a class="anchor" href="#percentsizerint"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PercentSizerInt()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此 Sizer 以整数形式返回可用现金的百分比，并将大小截断为整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;percents&lt;/code&gt;（默认：&lt;code&gt;20&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="allinsizerint"&gt;AllInSizerInt&lt;a class="anchor" href="#allinsizerint"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;AllInSizerInt()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此 Sizer 返回经纪人所有可用现金，并将大小截断为整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;percents&lt;/code&gt;（默认：&lt;code&gt;100&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>参考文档</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/09-datafeed-filters/02-datafeed-filters-referrence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/09-datafeed-filters/02-datafeed-filters-referrence/</guid><description>&lt;h1 id="filters-参考文档"&gt;Filters 参考文档&lt;a class="anchor" href="#filters-%e5%8f%82%e8%80%83%e6%96%87%e6%a1%a3"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="sessionfilter"&gt;SessionFilter&lt;a class="anchor" href="#sessionfilter"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;class backtrader.filters.SessionFilter(data)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此类可作为过滤器应用于数据源，将过滤掉落在常规交易时间之外的日内数据（即盘前/盘后数据）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一个“非简单”过滤器，必须管理数据栈（在初始化和调用期间传递）。&lt;/li&gt;
&lt;li&gt;它不需要“last”方法，因为没有需要传递的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sessionfiltersimple"&gt;SessionFilterSimple&lt;a class="anchor" href="#sessionfiltersimple"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;class backtrader.filters.SessionFilterSimple(data)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此类可作为过滤器应用于数据源，将过滤掉落在常规交易时间之外的日内数据（即盘前/盘后数据）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是一个“简单”过滤器，不需要管理数据栈（在初始化和调用期间传递）。&lt;/li&gt;
&lt;li&gt;它不需要“last”方法，因为没有需要传递的内容。&lt;/li&gt;
&lt;li&gt;Bar 管理将由 SimpleFilterWrapper 类处理，该类在 DataBase.addfilter_simple 调用期间添加。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sessionfiller"&gt;SessionFiller&lt;a class="anchor" href="#sessionfiller"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;class backtrader.filters.SessionFiller(data)&lt;/strong&gt;&lt;br&gt;
为声明的会话开始/结束时间内的数据源填充条。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fill_price (默认: None):&lt;/strong&gt; 如果传递了 None，将使用前一个条的收盘价。为了得到一个不显示在图表中的条，可以使用 float(&amp;lsquo;NaN&amp;rsquo;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fill_vol (默认: float(&amp;lsquo;NaN&amp;rsquo;)):&lt;/strong&gt; 用于填充缺失交易量的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fill_oi (默认: float(&amp;lsquo;NaN&amp;rsquo;)):&lt;/strong&gt; 用于填充缺失未平仓合约的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;skip_first_fill (默认: True):&lt;/strong&gt; 在看到第一个有效条时，不从会话开始填充到该条。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="calendardays"&gt;CalendarDays&lt;a class="anchor" href="#calendardays"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;class backtrader.filters.CalendarDays(data)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;填充缺失日历日到交易日。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fill_price (默认: None):&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;0: 用给定值填充。&lt;/li&gt;
&lt;li&gt;None: 使用上一个已知收盘价。&lt;/li&gt;
&lt;li&gt;-1: 使用上一个条的中点（高低平均值）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fill_vol (默认: float(&amp;lsquo;NaN&amp;rsquo;)):&lt;/strong&gt; 用于填充缺失交易量的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fill_oi (默认: float(&amp;lsquo;NaN&amp;rsquo;)):&lt;/strong&gt; 用于填充缺失未平仓合约的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="barreplayer_open"&gt;BarReplayer_Open&lt;a class="anchor" href="#barreplayer_open"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;class backtrader.filters.BarReplayer_Open(data)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此过滤器将一个条分为两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open:&lt;/strong&gt; 条的开盘价将用于交付一个初始价格条，其中四个组件（OHLC）相等。
&lt;ul&gt;
&lt;li&gt;此初始条的交易量/未平仓合约字段为 0。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OHLC:&lt;/strong&gt; 原始条完整交付，包含原始交易量/未平仓合约。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分割模拟重播，无需使用重播过滤器。&lt;/p&gt;</description></item><item><title>启动运行</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/02-operate-the-platform/02-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/02-operate-the-platform/02-startup/</guid><description>&lt;h1 id="启动和运行"&gt;启动和运行&lt;a class="anchor" href="#%e5%90%af%e5%8a%a8%e5%92%8c%e8%bf%90%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Backtrader&lt;/code&gt; 的启动和运行过程主要依赖于三个核心组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据源&lt;/strong&gt;：提供市场数据，用于回测或实时交易。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略&lt;/strong&gt;：定义交易逻辑（基于类继承实现）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cerebro&lt;/strong&gt;：核心管理器，负责整合数据源、策略，并启动回测或实时交易。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id="数据源"&gt;&lt;strong&gt;数据源&lt;/strong&gt;&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;数据源是回测和策略运行的基础，它为策略提供价格数据（如开盘价、高价、低价、收盘价）及其他市场信息。&lt;/p&gt;
&lt;h3 id="支持的数据源"&gt;&lt;strong&gt;支持的数据源&lt;/strong&gt;&lt;a class="anchor" href="#%e6%94%af%e6%8c%81%e7%9a%84%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本地数据文件&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持多种 CSV 格式（如 Yahoo Finance 数据）。&lt;/li&gt;
&lt;li&gt;支持从 Pandas DataFrame 加载数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;在线数据提取&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提供内置的 Yahoo Finance 在线数据提取功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实时数据源&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Interactive Brokers (IB)、Visual Chart 和 Oanda 等实时数据源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平台支持通过 &lt;strong&gt;时间框架&lt;/strong&gt;（如日线、5分钟线）和 &lt;strong&gt;压缩级别&lt;/strong&gt;（如1天、5分钟）自定义数据，以适配不同交易策略。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="数据源设置示例"&gt;&lt;strong&gt;数据源设置示例&lt;/strong&gt;&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e8%ae%be%e7%bd%ae%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="加载-yahoo-finance-格式的-csv-数据"&gt;&lt;strong&gt;加载 Yahoo Finance 格式的 CSV 数据&lt;/strong&gt;&lt;a class="anchor" href="#%e5%8a%a0%e8%bd%bd-yahoo-finance-%e6%a0%bc%e5%bc%8f%e7%9a%84-csv-%e6%95%b0%e6%8d%ae"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;以下是一个基本的 CSV 数据加载示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;path/to/your/yahoo/data.csv&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reversed&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 如果数据是从最新日期到最早日期排列，需要设置为 True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果数据跨越时间范围较长，可限制按时间限制加载的数据：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reversed&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;, &lt;span style="color:#75715e"&gt;# 如果数据是从最新日期到最早日期排列，需要设置为 True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fromdate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2014&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# 数据起始日期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; todate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2014&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# 数据结束日期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days, &lt;span style="color:#75715e"&gt;# 时间框架设置为日线&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; compression&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#75715e"&gt;# 每 1 天作为一个数据单位&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Yahoo Data&amp;#39;&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 数据源命名（可选）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="从-pandas-dataframe-加载数据"&gt;&lt;strong&gt;从 Pandas DataFrame 加载数据&lt;/strong&gt;&lt;a class="anchor" href="#%e4%bb%8e-pandas-dataframe-%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;如果你的数据存储在 Pandas DataFrame 中，可以使用以下方式加载：&lt;/p&gt;</description></item><item><title>基准测试</title><link>https://www.poloxue.com/backtrader/docs/13-observers/02-benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/13-observers/02-benchmarking/</guid><description>&lt;h1 id="基准测试"&gt;基准测试&lt;a class="anchor" href="#%e5%9f%ba%e5%87%86%e6%b5%8b%e8%af%95"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Ticket #89 是关于添加基准测试以对比一个资产的表现。这个功能非常实用，因为有些策略即使盈利也可能低于单纯追踪资产的收益。&lt;/p&gt;
&lt;p&gt;backtrader 包含两种不同类型的对象可以帮助进行追踪：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;观察器&lt;/li&gt;
&lt;li&gt;分析器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在分析器领域，已经有一个 &lt;code&gt;TimeReturn&lt;/code&gt; 对象，用于跟踪整个投资组合价值的回报演变（包括现金）。&lt;/p&gt;
&lt;p&gt;这显然也可以是一个观察器，所以在添加一些基准测试时，也对如何将观察器和分析器组合在一起进行了工作，这两者旨在跟踪相同的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;观察器和分析器之间的主要区别在于观察器的线条特性，观察器记录每个值，这使得它们适合绘图和实时查询。当然，这会消耗内存。&lt;/p&gt;
&lt;p&gt;另一方面，分析器通过 &lt;code&gt;get_analysis&lt;/code&gt; 返回一组结果，并且实现可能直到运行结束时才会提供任何结果。&lt;/p&gt;
&lt;h2 id="分析器---基准测试"&gt;分析器 - 基准测试&lt;a class="anchor" href="#%e5%88%86%e6%9e%90%e5%99%a8---%e5%9f%ba%e5%87%86%e6%b5%8b%e8%af%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;标准的 &lt;code&gt;TimeReturn&lt;/code&gt; 分析器已扩展为支持跟踪数据源。涉及的两个主要参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeframe&lt;/code&gt;（默认：无） 如果为 None，将报告整个回测期间的总回报。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;（默认：无） 要跟踪的参考资产，而不是投资组合价值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此数据必须已通过 &lt;code&gt;adddata&lt;/code&gt;、&lt;code&gt;resampledata&lt;/code&gt; 或 &lt;code&gt;replaydata&lt;/code&gt; 添加到 cerebro 实例中。&lt;/p&gt;
&lt;p&gt;更多详细信息和参数请参阅：分析器参考。&lt;/p&gt;
&lt;p&gt;因此，可以像这样按年度跟踪投资组合的回报：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addanalyzer(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeReturn, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Years)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 添加数据、策略等...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;strat0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; results[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 如果没有指定名称，则名称为类名的小写形式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tret_analyzer &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strat0&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbyname(&lt;span style="color:#e6db74"&gt;&amp;#39;timereturn&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(tret_analyzer&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get_analysis())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们想跟踪一个数据的回报：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;OneOfTheFeeds(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;abcde&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addanalyzer(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeReturn, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Years, data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 添加策略等...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;results &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;strat0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; results[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 如果没有指定名称，则名称为类名的小写形式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tret_analyzer &lt;span style="color:#f92672"&gt;=&lt;/span&gt; strat0&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbyname(&lt;span style="color:#e6db74"&gt;&amp;#39;timereturn&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(tret_analyzer&lt;span style="color:#f92672"&gt;.&lt;/span&gt;get_analysis())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要同时跟踪两者，最好为分析器指定名称：&lt;/p&gt;</description></item><item><title>定时器</title><link>https://www.poloxue.com/backtrader/docs/17-datetime/02-timer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/17-datetime/02-timer/</guid><description>&lt;h1 id="定时器"&gt;定时器&lt;a class="anchor" href="#%e5%ae%9a%e6%97%b6%e5%99%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在版本 1.9.44.116 中，backtrader 添加了定时器功能。这使得在特定时间点调用 &lt;code&gt;notify_timer&lt;/code&gt;（在 Cerebro 和 Strategy 中可用）成为可能，用户可以进行精细控制。&lt;/p&gt;
&lt;h2 id="选项"&gt;选项&lt;a class="anchor" href="#%e9%80%89%e9%a1%b9"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基于绝对时间输入或相对于会话开始/结束时间的定时器。&lt;/li&gt;
&lt;li&gt;时间规范的时区指定，可以直接通过 pytz 兼容对象或通过数据源会话结束时间进行指定。&lt;/li&gt;
&lt;li&gt;相对于指定时间的起始偏移。&lt;/li&gt;
&lt;li&gt;重复间隔。&lt;/li&gt;
&lt;li&gt;工作日过滤器（带有结转选项）。&lt;/li&gt;
&lt;li&gt;月份天数过滤器（带有结转选项）。&lt;/li&gt;
&lt;li&gt;自定义回调过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="使用模式"&gt;使用模式&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 Cerebro 和 Strategy 子类中，定时器回调将在以下方法中接收：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_timer&lt;/span&gt;(self, timer, when, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;接收定时器通知，其中 `timer` 是通过 `add_timer` 返回的定时器，`when` 是调用时间。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; `args` 和 `kwargs` 是传递给 `add_timer` 的额外参数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 实际的 `when` 时间可能稍后，但系统可能无法在之前调用定时器。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 此值是定时器值，而不是系统时间。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="添加定时器---通过-strategy"&gt;添加定时器 - 通过 Strategy&lt;a class="anchor" href="#%e6%b7%bb%e5%8a%a0%e5%ae%9a%e6%97%b6%e5%99%a8---%e9%80%9a%e8%bf%87-strategy"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用以下方法完成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;add_timer&lt;/span&gt;(self, when,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; offset&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(), repeat&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timedelta(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; weekdays&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[], weekcarry&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; monthdays&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[], monthcarry&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; allow&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tzdata&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, cheat&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它返回创建的 Timer 实例。下面是参数的解释。&lt;/p&gt;</description></item><item><title>扩展</title><link>https://www.poloxue.com/backtrader/docs/11-commission-schemes/02-commission-schemes-extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/11-commission-schemes/02-commission-schemes-extending/</guid><description>&lt;h1 id="扩展佣金"&gt;扩展佣金&lt;a class="anchor" href="#%e6%89%a9%e5%b1%95%e4%bd%a3%e9%87%91"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;佣金及相关功能由一个单一的类 &lt;code&gt;CommissionInfo&lt;/code&gt; 管理，通常通过调用 &lt;code&gt;broker.setcommission&lt;/code&gt; 实例化。&lt;/p&gt;
&lt;p&gt;这个概念限于带有保证金和每合同固定佣金的期货和基于价格/数量百分比佣金的股票。这不是最灵活的方案，但它已经发挥了它的作用。&lt;/p&gt;
&lt;p&gt;GitHub 上的一个增强请求（#29）导致了一些重构，以便：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持 &lt;code&gt;CommissionInfo&lt;/code&gt; 和 &lt;code&gt;broker.setcommission&lt;/code&gt; 与原始行为兼容&lt;/li&gt;
&lt;li&gt;对代码进行一些清理&lt;/li&gt;
&lt;li&gt;使佣金方案灵活，以支持增强请求和进一步的可能性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在进入示例之前的实际工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CommInfoBase&lt;/span&gt;(with_metaclass(MetaParams)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; COMM_PERC, COMM_FIXED &lt;span style="color:#f92672"&gt;=&lt;/span&gt; range(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;commission&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;mult&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1.0&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;margin&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;commtype&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;stocklike&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;percabs&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;引入了一个 &lt;code&gt;CommissionInfo&lt;/code&gt; 的基类，该类添加了新的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;commtype&lt;/code&gt;（默认值：None）&lt;/p&gt;
&lt;p&gt;这是兼容性的关键。如果值为 None，&lt;code&gt;CommissionInfo&lt;/code&gt; 对象和 &lt;code&gt;broker.setcommission&lt;/code&gt; 的行为将与以前相同。具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果设置了 &lt;code&gt;margin&lt;/code&gt;，则佣金方案是期货，每合同有固定佣金&lt;/li&gt;
&lt;li&gt;如果未设置 &lt;code&gt;margin&lt;/code&gt;，则佣金方案是股票，采用百分比方法&lt;/li&gt;
&lt;li&gt;如果值是 &lt;code&gt;COMM_PERC&lt;/code&gt; 或 &lt;code&gt;COMM_FIXED&lt;/code&gt;（或派生类中的任何其他值），则显然决定了佣金是固定的还是基于百分比的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;stocklike&lt;/code&gt;（默认值：False）&lt;/p&gt;
&lt;p&gt;如上所述，旧 &lt;code&gt;CommissionInfo&lt;/code&gt; 对象中的实际行为由 &lt;code&gt;margin&lt;/code&gt; 参数决定。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;commtype&lt;/code&gt; 设置为其他值，则此值指示资产是类似期货的资产（将使用保证金并进行基于条形图的现金调整）还是类似股票的资产。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;percabs&lt;/code&gt;（默认值：False）&lt;/p&gt;
&lt;p&gt;如果为 False，则百分比必须以相对术语传递（xx%）&lt;/p&gt;
&lt;p&gt;如果为 True，则百分比必须以绝对值传递（0.xx）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;CommissionInfo&lt;/code&gt; 是从 &lt;code&gt;CommInfoBase&lt;/code&gt; 派生的，将此参数的默认值更改为 True 以保持兼容行为。&lt;/p&gt;</description></item><item><title>扩展数据源</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/02-datafeed-extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/02-datafeed-extending/</guid><description>&lt;h1 id="扩展数据源"&gt;扩展数据源&lt;a class="anchor" href="#%e6%89%a9%e5%b1%95%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;用户是否可以轻松扩展现有机制，以添加额外的信息，将其与现有的价格信息（如开盘价、高价等）一起传递？&lt;/p&gt;
&lt;p&gt;据我了解，答案是：可以。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个数据源，正在解析为 CSV 格式&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;GenericCSVData&lt;/code&gt; 加载信息&lt;/li&gt;
&lt;li&gt;这种通用 CSV 支持是为了响应 Issue #6 开发的&lt;/li&gt;
&lt;li&gt;一个额外的字段，显然包含 P/E 信息，需要与解析的 CSV 数据一起传递&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们基于 CSV 数据源开发和 &lt;code&gt;GenericCSVData&lt;/code&gt; 示例帖子构建。&lt;/p&gt;
&lt;h4 id="步骤"&gt;步骤：&lt;a class="anchor" href="#%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;假设 P/E 信息已设置在被解析的 CSV 数据中&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;GenericCSVData&lt;/code&gt; 作为基类&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;pe&lt;/code&gt; 扩展现有的行（开盘价/最高价/最低价/收盘价/成交量/持仓兴趣）&lt;/li&gt;
&lt;li&gt;添加一个参数，让调用者确定 P/E 信息的列位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; backtrader.feeds &lt;span style="color:#f92672"&gt;import&lt;/span&gt; GenericCSVData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;GenericCSV_PE&lt;/span&gt;(GenericCSVData):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 添加 &amp;#39;pe&amp;#39; 行到从基类继承的行中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;pe&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# GenericCSVData 中的 openinterest 索引为 7 ... 添加 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 将参数添加到从基类继承的参数中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;pe&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;),)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样工作就完成了&amp;hellip;&lt;/p&gt;
&lt;p&gt;稍后在策略中使用此数据源时：&lt;/p&gt;</description></item><item><title>指标开发</title><link>https://www.poloxue.com/backtrader/docs/08-indicators/02-indicators-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/08-indicators/02-indicators-development/</guid><description>&lt;h1 id="指标开发"&gt;指标开发&lt;a class="anchor" href="#%e6%8c%87%e6%a0%87%e5%bc%80%e5%8f%91"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;如果需要开发任何内容（除了一个或多个获胜策略），这个内容就是自定义指标。在平台内开发此类内容很容易。&lt;/p&gt;
&lt;p&gt;开发要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;Indicator&lt;/code&gt; 类（直接或从现有子类）派生一个类；&lt;/li&gt;
&lt;li&gt;定义它将包含的 &lt;code&gt;Line&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;一个指标至少要有一条线。如果从现有的类派生，线条可能已经定义好了&lt;/li&gt;
&lt;li&gt;可选地定义可以改变行为的参数&lt;/li&gt;
&lt;li&gt;可选地提供/自定义一些用于合理绘制指标的元素&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;__init__&lt;/code&gt; 中提供一个完全定义的操作，并绑定（分配）到指标的线条，或者提供 &lt;code&gt;next&lt;/code&gt; 方法和（可选的）&lt;code&gt;once&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一个指标可以在初始化期间通过逻辑/算术操作完全定义，且结果分配给线条：完成。如果情况不是这样，至少要提供一个 &lt;code&gt;next&lt;/code&gt; 方法，其中指标必须在索引 0 处分配一个值给线条。可以通过提供 &lt;code&gt;once&lt;/code&gt; 方法来优化运行一次模式（批处理操作）的计算。&lt;/p&gt;
&lt;h2 id="重要说明幂等性"&gt;重要说明：幂等性&lt;a class="anchor" href="#%e9%87%8d%e8%a6%81%e8%af%b4%e6%98%8e%e5%b9%82%e7%ad%89%e6%80%a7"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;指标为每个接收到的条生成一个输出。不能假设同一个条会被发送多少次。操作必须是幂等的。&lt;/p&gt;
&lt;p&gt;其背后的理由：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个条（索引-wise）可以多次发送，并且值会变化（即变化的值是收盘价）&lt;/li&gt;
&lt;li&gt;这使得可以“重放”一个日内会话，但使用由 5 分钟条组成的日内数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这也允许平台从实时数据源获取值。&lt;/p&gt;
&lt;h2 id="一个简单但功能齐全的指标"&gt;一个简单（但功能齐全）的指标&lt;a class="anchor" href="#%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e4%bd%86%e5%8a%9f%e8%83%bd%e9%bd%90%e5%85%a8%e7%9a%84%e6%8c%87%e6%a0%87"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;可以这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DummyInd&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Indicator):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;dummyline&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dummyline &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Max(&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成！&lt;/p&gt;
&lt;p&gt;该指标将始终输出相同的值：要么是 0.0，要么是 &lt;code&gt;self.params.value&lt;/code&gt;（如果它恰好大于 0.0）。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;next&lt;/code&gt; 方法的相同指标：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DummyInd&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Indicator):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;dummyline&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dummyline[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; max(&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成！相同行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 请注意在 &lt;code&gt;__init__&lt;/code&gt; 版本中，使用 &lt;code&gt;bt.Max&lt;/code&gt; 将值分配给线条对象 &lt;code&gt;self.lines.dummyline&lt;/code&gt;。 &lt;code&gt;bt.Max&lt;/code&gt; 返回一个线条对象，它会为传递给指标的每个条自动迭代。如果使用 &lt;code&gt;max&lt;/code&gt;，赋值将毫无意义，因为指标将有一个固定值的成员变量，而不是线条。在 &lt;code&gt;next&lt;/code&gt; 期间，直接使用浮点值进行工作，可以使用标准的 &lt;code&gt;max&lt;/code&gt; 内置函数。&lt;/p&gt;</description></item><item><title>滑点</title><link>https://www.poloxue.com/backtrader/docs/10-broker/02-slippage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/10-broker/02-slippage/</guid><description>&lt;h1 id="滑点"&gt;滑点&lt;a class="anchor" href="#%e6%bb%91%e7%82%b9"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;回测无法保证真实市场条件。无论市场模拟有多好，在真实市场条件下滑点可能发生。这意味着，请求的价格可能无法匹配。&lt;/p&gt;
&lt;p&gt;集成的回测经纪商支持滑点，以下参数可以传递给经纪商：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;slip_perc&lt;/td&gt;
 &lt;td&gt;0.0&lt;/td&gt;
 &lt;td&gt;应用于买卖订单的价格上下滑动的绝对百分比（且为正值），注意：0.01 是 1%，0.001 是 0.1%；&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;slip_fixed&lt;/td&gt;
 &lt;td&gt;0.0&lt;/td&gt;
 &lt;td&gt;应用于买卖订单的价格上下滑动的单位百分比（且为正值），注意：如果 &lt;code&gt;slip_perc&lt;/code&gt; 非零，则优先于此。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;slip_open&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;是否为专门使用下一个柱的开盘价执行的订单滑动价格。例如，市场订单将在下一个可用tick执行，即柱的开盘价。这也适用于其他一些执行，因为逻辑尝试检测开盘价是否会匹配请求的价格/执行类型在移动到新柱时。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;slip_match&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;- 如果为 True，经纪商将通过在高/低价位封顶滑点来提供匹配，以防它们超出。&lt;br/&gt;- 如果为 False，经纪商将不会使用当前价格匹配订单，并将在下一次迭代中尝试执行&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;slip_limit&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;- 限价订单，给定确切的匹配价格请求，即使 &lt;code&gt;slip_match&lt;/code&gt; 为 False，也会被匹配。&lt;br/&gt;- 此选项控制该行为。&lt;br/&gt;- 如果为 True，那么限价订单将通过在限价/高低价位封顶价格进行匹配。&lt;br/&gt;- 如果为 False 且滑点超出上限，则不会有匹配&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;slip_out&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;即使价格超出高-低范围，也提供滑点。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="工作原理"&gt;工作原理&lt;a class="anchor" href="#%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了决定何时应用滑点，考虑了订单执行类型：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Close&lt;/code&gt; - 不应用滑点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种订单匹配收盘价，而这个价格是当天的最后一个。滑点无法发生，因为订单只能在会话的最后一个tick发生，而这是唯一的价格，没有容忍度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Market&lt;/code&gt; - 应用滑点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请检查 &lt;code&gt;slip_open&lt;/code&gt; 例外情况。因为市场订单将匹配下一个柱的开盘价。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Limit&lt;/code&gt; - 按以下逻辑应用滑点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果匹配价格是开盘价，则根据参数 &lt;code&gt;slip_open&lt;/code&gt; 应用滑点。如果应用，价格不会比请求的限价更差。&lt;/li&gt;
&lt;li&gt;如果匹配价格不是限价，则应用滑点在高/低点封顶。在这种情况下，&lt;code&gt;slip_limit&lt;/code&gt; 应用以决定在超过封顶时是否会发生匹配。&lt;/li&gt;
&lt;li&gt;如果匹配价格是限价，则不应用滑点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Stop&lt;/code&gt; - 一旦订单触发，应用与市场订单相同的逻辑&lt;/p&gt;
&lt;p&gt;&lt;code&gt;StopLimit&lt;/code&gt; - 一旦订单触发，应用与限价订单相同的逻辑&lt;/p&gt;</description></item><item><title>策略参数</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/02-params/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/02-params/</guid><description>&lt;h1 id="策略参数"&gt;策略参数&lt;a class="anchor" href="#%e7%ad%96%e7%95%a5%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;策略基本上都需要&lt;strong&gt;参数&lt;/strong&gt;，而在 &lt;code&gt;backtrader&lt;/code&gt; 中，这些参数可作为类属性进行声明。我们可以通过元组或字典的形式声明这些策略变量。&lt;/p&gt;
&lt;p&gt;元组：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;字典：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;无论是元组还是字典，参数声明后，都可以通过 &lt;code&gt;self.params&lt;/code&gt; 或 &lt;code&gt;self.p&lt;/code&gt; 访问参数的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;self.p.period&lt;/code&gt; 就是获取 &lt;code&gt;period&lt;/code&gt; 参数的值。&lt;/p&gt;
&lt;h2 id="参数继承"&gt;&lt;strong&gt;参数继承&lt;/strong&gt;&lt;a class="anchor" href="#%e5%8f%82%e6%95%b0%e7%bb%a7%e6%89%bf"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果你在一个类中定义了参数，子类会自动继承这些参数。你可以在子类中重写这些参数的默认值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;BaseStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(BaseStrategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;),) &lt;span style="color:#75715e"&gt;# 重写父类的 period 参数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你使用多重继承，子类会继承所有父类的参数。如果多个父类定义了相同的参数，子类会使用继承列表中最后一个类的默认值。&lt;/p&gt;</description></item><item><title>绘制日期范围</title><link>https://www.poloxue.com/backtrader/docs/16-plotting/02-ploting-date-ranges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/16-plotting/02-ploting-date-ranges/</guid><description>&lt;h1 id="日期范围"&gt;日期范围&lt;a class="anchor" href="#%e6%97%a5%e6%9c%9f%e8%8c%83%e5%9b%b4"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 1.9.31.x 版本中，backtrader 增加了部分绘图的功能。&lt;/p&gt;
&lt;p&gt;可以使用策略实例中保存的完整时间戳数组的索引来指定绘图范围&lt;/p&gt;
&lt;p&gt;也可以使用实际的 &lt;code&gt;datetime.date&lt;/code&gt; 或 &lt;code&gt;datetime.datetime&lt;/code&gt; 实例来限制绘图范围。&lt;/p&gt;
&lt;p&gt;仍然通过标准的 &lt;code&gt;cerebro.plot&lt;/code&gt; 进行。例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(start&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;2005&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;), end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;2006&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这对人类来说是最直接的方法。具有扩展能力的人类实际上可以尝试使用时间戳的索引，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(start&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;75&lt;/span&gt;, end&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;185&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面是一个非常标准的示例，其中包含一个简单移动平均线（在数据上绘图）、一个随机指标（独立绘图）以及随机指标线的交叉。在命令行参数中传递给 &lt;code&gt;cerebro.plot&lt;/code&gt; 的参数。&lt;/p&gt;
&lt;p&gt;使用日期方法的执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./partial-plot.py --plot &lt;span style="color:#e6db74"&gt;&amp;#39;start=datetime.date(2005, 7, 1),end=datetime.date(2006, 1, 31)&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python 中的 eval 魔法允许直接在命令行中编写 &lt;code&gt;datetime.date&lt;/code&gt; 并将其映射到实际有意义的内容。输出图表如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="image" alt="部分绘图示例" /&gt;&lt;/p&gt;
&lt;p&gt;让我们将其与完整的绘图进行比较，以查看数据是否确实从两端跳过：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./partial-plot.py --plot&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Python 中的 eval 魔法允许直接在命令行中编写 &lt;code&gt;datetime.date&lt;/code&gt; 并将其映射到实际有意义的内容。输出图表如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="image" alt="完整绘图示例" /&gt;&lt;/p&gt;
&lt;h2 id="示例用法"&gt;示例用法&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e7%94%a8%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./partial-plot.py --help
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;usage: partial-plot.py &lt;span style="color:#f92672"&gt;[&lt;/span&gt;-h&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--data0 DATA0&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--fromdate FROMDATE&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--todate TODATE&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--cerebro kwargs&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--broker kwargs&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--sizer kwargs&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--strat kwargs&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--plot &lt;span style="color:#f92672"&gt;[&lt;/span&gt;kwargs&lt;span style="color:#f92672"&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Sample &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; partial plotting
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;optional arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; -h, --help show this help message and exit
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --data0 DATA0 Data to read in &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ../../datas/2005-2006-day-001.txt&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --fromdate FROMDATE Date&lt;span style="color:#f92672"&gt;[&lt;/span&gt;time&lt;span style="color:#f92672"&gt;]&lt;/span&gt; in YYYY-MM-DD&lt;span style="color:#f92672"&gt;[&lt;/span&gt;THH:MM:SS&lt;span style="color:#f92672"&gt;]&lt;/span&gt; format &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default: &lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --todate TODATE Date&lt;span style="color:#f92672"&gt;[&lt;/span&gt;time&lt;span style="color:#f92672"&gt;]&lt;/span&gt; in YYYY-MM-DD&lt;span style="color:#f92672"&gt;[&lt;/span&gt;THH:MM:SS&lt;span style="color:#f92672"&gt;]&lt;/span&gt; format &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default: &lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --cerebro kwargs kwargs in key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;value format &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default: &lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --broker kwargs kwargs in key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;value format &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default: &lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --sizer kwargs kwargs in key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;value format &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default: &lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --strat kwargs kwargs in key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;value format &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default: &lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --plot &lt;span style="color:#f92672"&gt;[&lt;/span&gt;kwargs&lt;span style="color:#f92672"&gt;]&lt;/span&gt; kwargs in key&lt;span style="color:#f92672"&gt;=&lt;/span&gt;value format &lt;span style="color:#f92672"&gt;(&lt;/span&gt;default: &lt;span style="color:#f92672"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; __future__ &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (absolute_import, division, print_function, unicode_literals)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; argparse
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;St&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stoc &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Stochastic()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;CrossOver(stoc&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;percK, stoc&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;percD)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;runstrat&lt;/span&gt;(args&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; args &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse_args(args)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 数据馈送 kwargs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; kwargs &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 解析 from/to-date&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dtfmt, tmfmt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;T%H:%M:%S&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; a, d &lt;span style="color:#f92672"&gt;in&lt;/span&gt; ((getattr(args, x), x) &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; x &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#39;fromdate&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;todate&amp;#39;&lt;/span&gt;]):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; a:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strpfmt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dtfmt &lt;span style="color:#f92672"&gt;+&lt;/span&gt; tmfmt &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;T&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;in&lt;/span&gt; a)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; kwargs[d] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strptime(a, strpfmt)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 数据馈送&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data0, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 经纪人&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;brokers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BackBroker(&lt;span style="color:#f92672"&gt;**&lt;/span&gt;eval(&lt;span style="color:#e6db74"&gt;&amp;#39;dict(&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 大小调整器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addsizer(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedSize, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;eval(&lt;span style="color:#e6db74"&gt;&amp;#39;dict(&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizer &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(St, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;eval(&lt;span style="color:#e6db74"&gt;&amp;#39;dict(&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;strat &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run(&lt;span style="color:#f92672"&gt;**&lt;/span&gt;eval(&lt;span style="color:#e6db74"&gt;&amp;#39;dict(&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;cerebro &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot: &lt;span style="color:#75715e"&gt;# 如果请求绘图，则绘制&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(&lt;span style="color:#f92672"&gt;**&lt;/span&gt;eval(&lt;span style="color:#e6db74"&gt;&amp;#39;dict(&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_args&lt;/span&gt;(pargs&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser &lt;span style="color:#f92672"&gt;=&lt;/span&gt; argparse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ArgumentParser(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; formatter_class&lt;span style="color:#f92672"&gt;=&lt;/span&gt;argparse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ArgumentDefaultsHelpFormatter,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; description&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Sample for partial plotting&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--data0&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2005-2006-day-001.txt&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Data to read in&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 日期的默认值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--fromdate&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Date[time] in YYYY-MM-DD[THH:MM:SS] format&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--todate&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Date[time] in YYYY-MM-DD[THH:MM:SS] format&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--cerebro&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; metavar&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs in key=value format&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--broker&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; metavar&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs in key=value format&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--sizer&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; metavar&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs in key=value format&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--strat&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; metavar&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs in key=value format&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--plot&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; nargs&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;?&amp;#39;&lt;/span&gt;, const&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;{}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; metavar&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;kwargs in key=value format&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;parse_args(pargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; runstrat()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>账户资金</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/02-cash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/02-cash/</guid><description>&lt;h1 id="设置初始账户资金"&gt;设置初始账户资金&lt;a class="anchor" href="#%e8%ae%be%e7%bd%ae%e5%88%9d%e5%a7%8b%e8%b4%a6%e6%88%b7%e8%b5%84%e9%87%91"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;上节中，账户资金使是默认值 10,000 货币单位。当然，这个默认值是可以更改的，通过 &lt;code&gt;cerebro.broker&lt;/code&gt; 的 &lt;code&gt;setcash&lt;/code&gt; 方法即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcash(&lt;span style="color:#ae81ff"&gt;100000.0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="完整示例"&gt;完整示例&lt;a class="anchor" href="#%e5%ae%8c%e6%95%b4%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcash(&lt;span style="color:#ae81ff"&gt;100000.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Starting Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Final Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Starting Portfolio Value: 100000.00
Final Portfolio Value: 100000.00&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;让我们继续进入下一节，配置数据源（DataFeed）。&lt;/p&gt;</description></item><item><title>跨平台回测的陷进</title><link>https://www.poloxue.com/backtrader/docs/19-articles/02-cross-backtesting-pitfalls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/19-articles/02-cross-backtesting-pitfalls/</guid><description>&lt;h3 id="跨平台回测的陷阱"&gt;跨平台回测的陷阱&lt;a class="anchor" href="#%e8%b7%a8%e5%b9%b3%e5%8f%b0%e5%9b%9e%e6%b5%8b%e7%9a%84%e9%99%b7%e9%98%b1"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 Backtrader 社区中，经常有用户希望将 TradingView 等流行的回测平台上的回测结果进行复制。TradingView 使用的脚本语言是 Pinescript，而用户往往并不了解该语言的具体实现，也未接触过回测引擎的内部机制。因此，即使用户有意复制回测结果，也必须明白跨平台编程有其局限性。&lt;/p&gt;
&lt;h4 id="指标并不总是忠实于原始定义"&gt;指标：并不总是忠实于原始定义&lt;a class="anchor" href="#%e6%8c%87%e6%a0%87%e5%b9%b6%e4%b8%8d%e6%80%bb%e6%98%af%e5%bf%a0%e5%ae%9e%e4%ba%8e%e5%8e%9f%e5%a7%8b%e5%ae%9a%e4%b9%89"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;当在 Backtrader 中实现新指标时，开发者会特别强调尊重指标的原始定义。例如，RSI 指标就是一个典型的例子。&lt;/p&gt;
&lt;p&gt;Welles Wilder 设计 RSI 时使用了修改过的移动平均（即平滑移动平均，参见 Wikipedia - Modified Moving Average）。然而，许多平台提供的 RSI 指标，实际上使用的是经典的指数移动平均（EMA），而非书中的定义。&lt;/p&gt;
&lt;p&gt;尽管两者的差别并不算巨大，但这并不是 Wilder 原始定义的 RSI。它可能仍然有用，甚至可能更好，但它并不等同于 Wilder 所定义的 RSI。而且，大多数文档（如果有的话）并未提到这一点。&lt;/p&gt;
&lt;p&gt;在 Backtrader 中，RSI 的默认配置使用 MMA，以保持忠实于原始定义。不过，开发者可以通过子类化或者在运行时实例化时，选择使用 EMA 或者简单移动平均（SMA）来替代。&lt;/p&gt;
&lt;h4 id="例子唐奇安通道"&gt;例子：唐奇安通道&lt;a class="anchor" href="#%e4%be%8b%e5%ad%90%e5%94%90%e5%a5%87%e5%ae%89%e9%80%9a%e9%81%93"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Wikipedia 中的定义是这样的：&lt;strong&gt;Wikipedia - Donchian Channel&lt;/strong&gt;。但是，它只是一些文字，未提到如何使用通道突破作为交易信号。&lt;/p&gt;
&lt;p&gt;另外，以下两个定义明确说明，计算通道时数据不包括当前的柱线，因为如果包括了，突破就无法被反映出来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;StockCharts - School - Price Channels&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IncredibleCharts - Donchian Channels&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些来源明确指出，计算通道时不包含当前的价格柱线，这样突破才会被正确显示。以下是来自 StockCharts 的示例图表：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;StockCharts - Donchian Channels - Breakouts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后，我们看看 TradingView。首先是链接：
&lt;strong&gt;TradingView - Wiki - Donchian Channels&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Pyfolio 集成</title><link>https://www.poloxue.com/backtrader/docs/12-analyzers/03-pyfolio-integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/12-analyzers/03-pyfolio-integration/</guid><description>&lt;h1 id="pyfolio-集成"&gt;Pyfolio 集成&lt;a class="anchor" href="#pyfolio-%e9%9b%86%e6%88%90"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 Ticket #108 中提出了一个投资组合工具，即 pyfolio 的集成。&lt;/p&gt;
&lt;p&gt;一开始看教程觉得很难，因为 zipline 和 pyfolio 之间的紧密集成，但 pyfolio 提供的一些其他用途的示例测试数据实际上非常有用，可以解码幕后运行的内容，从而实现集成。&lt;/p&gt;
&lt;p&gt;在 backtrader 中大多数部分已经就位：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析器基础设施&lt;/li&gt;
&lt;li&gt;子分析器&lt;/li&gt;
&lt;li&gt;TimeReturn 分析器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只需要一个主 PyFolio 分析器和三个简单的子分析器。再加上依赖于 pyfolio 所需的依赖项之一，即 pandas 的方法。&lt;/p&gt;
&lt;p&gt;最具挑战的部分是…“正确获取所有依赖项”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新 pandas&lt;/li&gt;
&lt;li&gt;更新 numpy&lt;/li&gt;
&lt;li&gt;更新 scikit-lean&lt;/li&gt;
&lt;li&gt;更新 seaborn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在类似 Unix 的环境中，有一个 C 编译器，一切都是时间问题。在 Windows 上，即使安装了特定的 Microsoft 编译器（在这种情况下是 Python 2.7 的链），事情也失败了。但一个知名网站拥有最新的 Windows 软件包集合，提供了帮助。如果你需要它，可以访问：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;http://www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果没有测试集成，它就不会完成，这就是为什么通常的示例总是存在的原因。&lt;/p&gt;
&lt;h2 id="没有-pyfolio"&gt;没有 PyFolio&lt;a class="anchor" href="#%e6%b2%a1%e6%9c%89-pyfolio"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;示例使用 random.randint 来决定何时买卖，因此这只是检查事情是否正常运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./pyfoliotest.py --printout --no-pyfolio --plot&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Len,Datetime,Open,High,Low,Close,Volume,OpenInterest
0001,2005-01-03T23:59:59,38.36,38.90,37.65,38.18,25482800.00,0.00
BUY 1000 @%23.58
0002,2005-01-04T23:59:59,38.45,38.54,36.46,36.58,26625300.00,0.00
BUY 1000 @%36.58
SELL 500 @%22.47
0003,2005-01-05T23:59:59,36.69,36.98,36.06,36.13,18469100.00,0.00
...
SELL 500 @%37.51
0502,2006-12-28T23:59:59,25.62,25.72,25.30,25.36,11908400.00,0.00
0503,2006-12-29T23:59:59,25.42,25.82,25.33,25.54,16297800.00,0.00
SELL 250 @%17.14
SELL 250 @%37.01&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有 3 个数据，多个买卖操作在测试运行的默认两年期间随机选择和分散。&lt;/p&gt;</description></item><item><title>Visual Chart</title><link>https://www.poloxue.com/backtrader/docs/15-livetrading/03-visual-chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/15-livetrading/03-visual-chart/</guid><description>&lt;h1 id="visual-chart"&gt;Visual Chart&lt;a class="anchor" href="#visual-chart"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Visual Chart 的集成支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时数据馈送&lt;/li&gt;
&lt;li&gt;实时交易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visual Chart 是一个完整的交易解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成图表、数据馈送和经纪功能于单一平台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关更多信息，请访问：&lt;a href="http://www.visualchart.com"&gt;www.visualchart.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="要求"&gt;要求&lt;a class="anchor" href="#%e8%a6%81%e6%b1%82"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VisualChart 6&lt;/strong&gt;（运行在 Windows 上）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comtypes fork&lt;/strong&gt;： &lt;a href="https://github.com/mementum/comtypes"&gt;https://github.com/mementum/comtypes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过以下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip install https://github.com/mementum/comtypes/archive/master.zip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Visual Chart 的 API 基于 COM。目前 comtypes 主分支不支持解包 VT_ARRAYS of VT_RECORD。这是 Visual Chart 所使用的。Pull Request #104 已提交，但尚未集成。一旦集成，可以使用主分支。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pytz&lt;/strong&gt;（可选但强烈推荐）：确保每个数据都在市场时间返回。这对于大多数市场来说都是正确的，但有些市场确实是例外（全球指数就是一个很好的例子）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;源代码中包含完整示例：&lt;code&gt;samples/vctest/vctest.py&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="vcstore---存储"&gt;VCStore - 存储&lt;a class="anchor" href="#vcstore---%e5%ad%98%e5%82%a8"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;存储是实时数据馈送/交易支持的核心，提供了 COM API 和数据馈送及经纪代理之间的适配层。&lt;/p&gt;
&lt;p&gt;可以通过以下方法获取经纪商实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VCStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbroker(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过以下方法获取数据馈送实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VCStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，许多 **kwargs 是数据馈送的常见参数，如 dataname、fromdate、todate、sessionstart、sessionend、timeframe、compression。&lt;/p&gt;
&lt;p&gt;VCStore 将尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Windows 注册表自动定位 VisualChart 在系统中的位置。&lt;/li&gt;
&lt;li&gt;如果找到，将扫描安装目录中的 COM DLLs 以创建 COM typelibs 并实例化适当的对象。&lt;/li&gt;
&lt;li&gt;如果未找到，将尝试使用已知和硬编码的 CLSIDs 进行相同操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：即使通过扫描文件系统找到 DLLs，Visual Chart 本身也必须在运行。backtrader 不会启动 Visual Chart。&lt;/p&gt;</description></item><item><title>交易日历</title><link>https://www.poloxue.com/backtrader/docs/17-datetime/03-trading-calendars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/17-datetime/03-trading-calendars/</guid><description>&lt;h1 id="交易日历"&gt;交易日历&lt;a class="anchor" href="#%e4%ba%a4%e6%98%93%e6%97%a5%e5%8e%86"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;版本 1.9.42.116 增加了对交易日历的支持。这在以下场景中的重采样时非常有用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从每日到每周的重采样现在可以将每周的K线与本周的最后一根K线一起交付。&lt;/li&gt;
&lt;li&gt;这是因为交易日历可以识别下一个交易日，并且可以提前识别出本周的最后一个交易日。&lt;/li&gt;
&lt;li&gt;当交易会话的结束时间不是常规时间（可以通过数据源来指定）时，从子日内到每日的重采样。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="交易日历接口"&gt;交易日历接口&lt;a class="anchor" href="#%e4%ba%a4%e6%98%93%e6%97%a5%e5%8e%86%e6%8e%a5%e5%8f%a3"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有一个基类 &lt;code&gt;TradingCalendarBase&lt;/code&gt; 用作任何交易日历的基类。它定义了两个必须被重写的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TradingCalendarBase&lt;/span&gt;(with_metaclass(MetaParams, object)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_nextday&lt;/span&gt;(self, day):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 返回在 `day`（datetime/date 实例）之后的下一个交易日（datetime/date 实例）以及 isocalendar 组件。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 返回值是一个包含两个组件的元组：(nextday, (y, w, d))，其中 (y, w, d)。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;NotImplementedError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;schedule&lt;/span&gt;(self, day):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 返回给定日期（datetime/date 实例）的开盘和收盘时间（`datetime.time`）。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;NotImplementedError&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="实现"&gt;实现&lt;a class="anchor" href="#%e5%ae%9e%e7%8e%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="pandasmarketcalendar"&gt;PandasMarketCalendar&lt;a class="anchor" href="#pandasmarketcalendar"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个实现基于一个不错的包，这是从 Quantopian 的初始功能衍生出来的。包位于 &lt;code&gt;pandas_market_calendars&lt;/code&gt;，可以很容易地安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip install pandas_market_calendars&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现的接口如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PandasMarketCalendar&lt;/span&gt;(TradingCalendarBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; `pandas_market_calendars` 的交易日历包装器。必须安装 `pandas_market_calendar` 包。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 参数：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - `calendar` (默认 `None`)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 参数 `calendar` 接受以下内容：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - 字符串：支持的日历名称，例如 `NYSE`。包装器会尝试获取一个日历实例。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - 日历实例：由 `get_calendar(&amp;#39;NYSE&amp;#39;)` 返回。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - `cachesize` (默认 `365`)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 缓存查找提前天数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 参见：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - https://github.com/rsheftel/pandas_market_calendars
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - http://pandas-market-calendars.readthedocs.io/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;calendar&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# 一个 pandas_market_calendars 实例或交易所名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;cachesize&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;365&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# 缓存查找提前天数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="tradingcalendar"&gt;TradingCalendar&lt;a class="anchor" href="#tradingcalendar"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这个实现允许通过指定假期、早市天数、非交易工作日以及开盘和收盘时间来构建一个日历：&lt;/p&gt;</description></item><item><title>加密货币中的分位仓位</title><link>https://www.poloxue.com/backtrader/docs/19-articles/03-fractional-sizes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/19-articles/03-fractional-sizes/</guid><description>&lt;p&gt;&lt;strong&gt;在 backtrader 中交易加密货币的分数仓位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，让我们用两句话总结一下 backtrader 的工作方式：&lt;/p&gt;
&lt;p&gt;它像一个构建工具包，包含一个基本构建模块（Cerebro），可以将许多不同的模块插入其中。&lt;/p&gt;
&lt;p&gt;基本分发版包含许多模块，如指标、分析器、观察者、仓位大小计算器、过滤器、数据源、经纪商、佣金/资产信息方案等&amp;hellip;&lt;/p&gt;
&lt;p&gt;可以轻松地从头开始构建新的模块，或者基于现有模块进行构建。&lt;/p&gt;
&lt;p&gt;基本模块（Cerebro）已经实现了一些自动“插拔”，使得用户可以更轻松地使用框架，而不需要关注所有细节。&lt;/p&gt;
&lt;p&gt;因此，该框架已预配置以提供默认行为，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用单一的主数据源&lt;/li&gt;
&lt;li&gt;1天的时间框架/压缩组合&lt;/li&gt;
&lt;li&gt;10,000 单位的货币&lt;/li&gt;
&lt;li&gt;股票交易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些设置可能并不适合每个人，但重要的是：它可以根据每个交易者/程序员的需求进行定制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交易股票：整数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如上所述，默认配置是用于股票交易，当交易股票时，买入/卖出的是完整的股票份额（即：1、2、50、1000 等，而不是像 1.5 或 1001.7589 这样的数量）。&lt;/p&gt;
&lt;p&gt;这意味着，当用户在默认配置下执行以下代码时：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 将投资组合的 50% 用于购买主资产&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order_target_percent(target&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;发生的情况是：&lt;/p&gt;
&lt;p&gt;系统会计算出需要多少股票份额，以便该资产在投资组合中的价值尽可能接近 50%。&lt;/p&gt;
&lt;p&gt;但是，由于默认配置是与股票交易配合使用，结果股票的数量将是一个整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请注意，默认配置是使用单一的主数据源，因此在调用 &lt;code&gt;order_target_percent&lt;/code&gt; 时，实际的数据并未指定。当使用多个数据源时，必须指定获取/卖出哪个数据（除非是主数据源）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交易加密货币：分数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显然，在交易加密货币时，即使是小数点后有 20 位数字，也可以购买“半个比特币”。&lt;/p&gt;
&lt;p&gt;好消息是，你可以更改与资产相关的信息。这是通过 &lt;code&gt;CommissionInfo&lt;/code&gt; 家族的可插拔模块实现的。&lt;/p&gt;
&lt;p&gt;一些文档：&lt;a href="https://www.backtrader.com/docu/commission-schemes/commission-schemes/"&gt;Docs - Commission Schemes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不得不承认，名字不太合适，因为这些方案不仅仅包含佣金信息，还包含其他内容。&lt;/p&gt;
&lt;p&gt;在分数方案中，关注的是该方案的 &lt;code&gt;getsize(price, cash)&lt;/code&gt; 方法，它有如下文档字符串：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;返回在给定价格下执行现金操作所需的仓位大小&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些方案与经纪商密切相关，并且可以通过经纪商 API 将这些方案添加到系统中。&lt;/p&gt;
&lt;p&gt;经纪商文档在这里：&lt;a href="https://www.backtrader.com/docu/broker/"&gt;Docs - Broker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相关方法是：&lt;code&gt;addcommissioninfo(comminfo, name=None)&lt;/code&gt;。当 &lt;code&gt;name&lt;/code&gt; 为 None 时，方案会应用到所有资产；如果指定了名称，则方案仅应用于具有特定名称的资产。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现分数方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这可以通过扩展现有的基础方案（即 &lt;code&gt;CommissionInfo&lt;/code&gt;）轻松实现。&lt;/p&gt;</description></item><item><title>参考</title><link>https://www.poloxue.com/backtrader/docs/13-observers/03-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/13-observers/03-reference/</guid><description>&lt;h1 id="参考"&gt;参考&lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="benchmark"&gt;Benchmark&lt;a class="anchor" href="#benchmark"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Benchmark()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该观察器存储策略的回报和作为参考资产的回报，这个参考资产是传递给系统的一个数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeframe&lt;/code&gt;（默认：无）：如果为 None，则报告整个回测期间的总回报。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compression&lt;/code&gt;（默认：无）：仅用于子日时间框架，例如通过指定 “TimeFrame.Minutes” 和 60 作为压缩在每小时时间框架上工作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;（默认：无）：跟踪的参考资产以便进行比较。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：此数据必须已通过 &lt;code&gt;adddata&lt;/code&gt;、&lt;code&gt;resampledata&lt;/code&gt; 或 &lt;code&gt;replaydata&lt;/code&gt; 添加到 cerebro 实例中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_doprenext&lt;/code&gt;（默认：False）：基准测试将在策略开始运行时进行（即策略的最小周期已达到时）。将其设置为 True 将从数据源的起点记录基准值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstopen&lt;/code&gt;（默认：False）：保持为 False 确保价值和基准之间的首次比较点从 0% 开始，因为基准不会使用其开盘价。参见 &lt;code&gt;TimeReturn&lt;/code&gt; 分析器参考以获得参数的完整解释。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fund&lt;/code&gt;（默认：无）：如果为 None，将自动检测经纪人的实际模式（fundmode - True/False）来决定回报率是基于总净资产价值还是基金价值。见经纪人文档中的 &lt;code&gt;set_fundmode&lt;/code&gt;。设置为 True 或 False 以获得特定行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记住，在运行的任何时刻都可以通过查看索引 0 处的线条名称来检查当前值。&lt;/p&gt;
&lt;h2 id="broker"&gt;Broker&lt;a class="anchor" href="#broker"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Broker(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该观察器跟踪经纪人中的当前现金金额和投资组合价值（包括现金）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;：无&lt;/p&gt;
&lt;h2 id="broker---cash"&gt;Broker - Cash&lt;a class="anchor" href="#broker---cash"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cash(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该观察器跟踪经纪人中的当前现金金额。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;：无&lt;/p&gt;
&lt;h4 id="broker---value"&gt;Broker - Value&lt;a class="anchor" href="#broker---value"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Value(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该观察器跟踪经纪人中的当前投资组合价值，包括现金。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fund&lt;/code&gt;（默认：无）：如果为 None，将自动检测经纪人的实际模式（fundmode - True/False）来决定回报率是基于总净资产价值还是基金价值。见经纪人文档中的 &lt;code&gt;set_fundmode&lt;/code&gt;。设置为 True 或 False 以获得特定行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="buysell"&gt;BuySell&lt;a class="anchor" href="#buysell"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BuySell(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该观察器跟踪单个买入/卖出订单（单个执行）并将在图表上绘制它们，围绕执行价格水平绘制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;barplot&lt;/code&gt;（默认：&lt;code&gt;False&lt;/code&gt;）：在最低点下方绘制买入信号，在最高点上方绘制卖出信号。如果为 &lt;code&gt;False&lt;/code&gt;，则将在条形的平均执行价格上绘制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bardist&lt;/code&gt;（默认：&lt;code&gt;0.015&lt;/code&gt; 1.5%）：当 &lt;code&gt;barplot&lt;/code&gt; 为 &lt;code&gt;True&lt;/code&gt; 时，与最大值/最小值的距离。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="drawdown"&gt;DrawDown&lt;a class="anchor" href="#drawdown"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DrawDown()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该观察器跟踪当前的回撤水平（绘图）和最大回撤（不绘图）水平。&lt;/p&gt;</description></item><item><title>同轴绘图</title><link>https://www.poloxue.com/backtrader/docs/16-plotting/03-plotting-same-axis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/16-plotting/03-plotting-same-axis/</guid><description>&lt;h1 id="在同轴绘图"&gt;在同轴绘图&lt;a class="anchor" href="#%e5%9c%a8%e5%90%8c%e8%bd%b4%e7%bb%98%e5%9b%be"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在之前的文章“future-spot”中，我们在同一空间上绘制了原始数据和略微（随机）修改后的数据，但它们并没有在同一轴上绘制。&lt;/p&gt;
&lt;p&gt;恢复该文章的第一张图片：&lt;/p&gt;
&lt;p&gt;&lt;img src="image" alt="图表示例" /&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图表的左右两侧有不同的刻度。&lt;/li&gt;
&lt;li&gt;当观察摆动的红线（随机化数据）时最明显，它在原始数据周围上下摆动大约 50 个点。&lt;/li&gt;
&lt;li&gt;在图表上，视觉印象是这种随机化数据大部分时间都在原始数据上方。这只是由于不同刻度导致的视觉印象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 1.9.32.116 版本已经初步支持完全在同一轴上绘图，但图例标签会重复（仅标签，不是数据），这会让人感到困惑。&lt;/p&gt;
&lt;p&gt;1.9.33.116 版本修复了这个问题，允许完全在同一轴上绘图。使用模式类似于选择使用哪个数据进行绘图。在之前的文章中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFavouriteDataFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;futurename&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFavouriteDataFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;spotname&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compensate(data0) &lt;span style="color:#75715e"&gt;# 告诉系统 data1 的操作影响 data0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plotinfo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plotmaster &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plotinfo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sameaxis &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;data1 获取一些 &lt;code&gt;plotinfo&lt;/code&gt; 值来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与 &lt;code&gt;plotmaster&lt;/code&gt;（即 data0）在同一空间绘图。&lt;/li&gt;
&lt;li&gt;获取使用 &lt;code&gt;sameaxis&lt;/code&gt; 的指示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原因是平台无法提前知道每个数据的刻度是否兼容。因此，它们会在独立的刻度上绘图。&lt;/p&gt;
&lt;p&gt;在之前的示例中，增加了一个选项在 &lt;code&gt;sameaxis&lt;/code&gt; 上绘图。示例执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./future-spot.py --sameaxis&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果图表：&lt;/p&gt;
&lt;p&gt;&lt;img src="image" alt="同一轴上的绘图示例" /&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右侧只有一个刻度。&lt;/li&gt;
&lt;li&gt;现在，随机化数据似乎明显在原始数据周围摆动，这是预期的视觉行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="示例用法"&gt;示例用法&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e7%94%a8%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./future-spot.py --help
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;usage: future-spot.py &lt;span style="color:#f92672"&gt;[&lt;/span&gt;-h&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--no-comp&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;--sameaxis&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Compensation example
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;optional arguments:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; -h, --help show this help message and exit
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --no-comp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; --sameaxis&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; __future__ &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (absolute_import, division, print_function, unicode_literals)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; argparse
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 修改收盘价的过滤器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;close_changer&lt;/span&gt;(data, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;50.0&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; random&lt;span style="color:#f92672"&gt;.&lt;/span&gt;randint(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 流长度不变&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 重写标准标记&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;BuySellArrows&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;observers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BuySell):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; plotlines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(buy&lt;span style="color:#f92672"&gt;=&lt;/span&gt;dict(marker&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;$&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\u21E7&lt;/span&gt;&lt;span style="color:#e6db74"&gt;$&amp;#39;&lt;/span&gt;, markersize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12.0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sell&lt;span style="color:#f92672"&gt;=&lt;/span&gt;dict(marker&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;$&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\u21E9&lt;/span&gt;&lt;span style="color:#e6db74"&gt;$&amp;#39;&lt;/span&gt;, markersize&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12.0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;St&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;obs&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BuySell(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data0, barplot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 在此处完成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; BuySellArrows(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1, barplot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 为不同的数据设置不同的标记&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;position:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; random&lt;span style="color:#f92672"&gt;.&lt;/span&gt;randint(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;entered &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# 在市场中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (len(self) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;entered) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;runstrat&lt;/span&gt;(args&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; args &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse_args(args)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-day-001.txt&amp;#39;&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 数据馈送&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;dataname, name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;data0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;dataname, name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;data1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addfilter(close_changer)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;no_comp:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compensate(data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plotinfo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plotmaster &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sameaxis:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plotinfo&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sameaxis &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(St) &lt;span style="color:#75715e"&gt;# 示例策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addobserver(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;obs&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Broker) &lt;span style="color:#75715e"&gt;# 通过 stdstats=False 移除&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addobserver(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;obs&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Trades) &lt;span style="color:#75715e"&gt;# 通过 stdstats=False 移除&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_coc(&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run(stdstats&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(volume&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 并绘图&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_args&lt;/span&gt;(pargs&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser &lt;span style="color:#f92672"&gt;=&lt;/span&gt; argparse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ArgumentParser(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; formatter_class&lt;span style="color:#f92672"&gt;=&lt;/span&gt;argparse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ArgumentDefaultsHelpFormatter,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; description&lt;span style="color:#f92672"&gt;=&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Compensation example&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--no-comp&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--sameaxis&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;parse_args(pargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; runstrat()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>周期混合</title><link>https://www.poloxue.com/backtrader/docs/08-indicators/03-timeframe-mixing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/08-indicators/03-timeframe-mixing/</guid><description>&lt;h1 id="周期混合"&gt;周期混合&lt;a class="anchor" href="#%e5%91%a8%e6%9c%9f%e6%b7%b7%e5%90%88"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;如果提供值的数据源有不同的时间框架，在 &lt;code&gt;Cerebro&lt;/code&gt; 引擎中有不同的长度，指标将会出错。&lt;/p&gt;
&lt;p&gt;示例计算中，&lt;code&gt;data0&lt;/code&gt; 有天的时间框架，&lt;code&gt;data1&lt;/code&gt; 有月的时间框架：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pivotpoint &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PivotPoint(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sellsignal &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data0&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; pivotpoint&lt;span style="color:#f92672"&gt;.&lt;/span&gt;s1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里，当收盘价低于 s1 线（第一个支撑）时，寻求卖出信号。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PivotPoint&lt;/code&gt; 定义上在较大的时间框架中工作。&lt;/p&gt;
&lt;p&gt;过去，这会导致以下错误：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;return self.array[self.idx + ago]
IndexError: array index out of range&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因很简单：&lt;code&gt;self.data.close&lt;/code&gt; 从第一个时刻提供值，但 &lt;code&gt;PivotPoint&lt;/code&gt;（以及 s1 线）只有在整个月过去后才会提供值，这大约相当于 22 个 &lt;code&gt;self.data0.close&lt;/code&gt; 的值。在这 22 个收盘价期间，s1 还没有值，尝试从底层数组获取它会失败。&lt;/p&gt;
&lt;p&gt;线条对象支持 &lt;code&gt;(ago)&lt;/code&gt; 操作符（Python 中的 &lt;code&gt;__call__&lt;/code&gt; 特殊方法）以提供其延迟版本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;close1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，对象 &lt;code&gt;close1&lt;/code&gt;（通过 &lt;code&gt;[0]&lt;/code&gt; 访问时）始终包含由 &lt;code&gt;close&lt;/code&gt; 提供的前一个值（-1）。此语法已被重用以适应时间框架。让我们重写上述的 &lt;code&gt;pivotpoint&lt;/code&gt; 代码片段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pivotpoint &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;PivotPoint(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sellsignal &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data0&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; pivotpoint&lt;span style="color:#f92672"&gt;.&lt;/span&gt;s1()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，&lt;code&gt;()&lt;/code&gt; 无参数执行（在后台提供了一个 &lt;code&gt;None&lt;/code&gt;）。正在发生以下情况：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pivotpoint.s1()&lt;/code&gt; 返回一个内部 &lt;code&gt;LinesCoupler&lt;/code&gt; 对象，该对象遵循较大范围的节奏。该耦合器使用来自实际 s1 的最新提供的值填充自身（以 &lt;code&gt;NaN&lt;/code&gt; 为默认值开始）。&lt;/p&gt;
&lt;p&gt;但为了实现这一魔法，还需要额外的东西。&lt;code&gt;Cerebro&lt;/code&gt; 必须这样创建：&lt;/p&gt;</description></item><item><title>开发 CSV 数据源</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/03-datafeed-development-csv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/03-datafeed-development-csv/</guid><description>&lt;h1 id="csv-数据源开发"&gt;CSV 数据源开发&lt;a class="anchor" href="#csv-%e6%95%b0%e6%8d%ae%e6%ba%90%e5%bc%80%e5%8f%91"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 已经提供了一些通用 CSV 数据源和特定的 CSV 数据源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GenericCSVData&lt;/li&gt;
&lt;li&gt;VisualChartCSVData&lt;/li&gt;
&lt;li&gt;YahooFinanceData（用于在线下载）&lt;/li&gt;
&lt;li&gt;YahooFinanceCSVData（用于已下载的数据）&lt;/li&gt;
&lt;li&gt;BacktraderCSVData（内部使用&amp;hellip;用于测试目的，但也可以使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即使如此，最终用户可能仍希望开发对特定 CSV 数据源的支持。&lt;/p&gt;
&lt;p&gt;通常的格言是：“说起来容易做起来难”。实际上，结构旨在使其变得简单。&lt;/p&gt;
&lt;h2 id="步骤"&gt;步骤&lt;a class="anchor" href="#%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;从 &lt;code&gt;backtrader.CSVDataBase&lt;/code&gt; 继承&lt;/li&gt;
&lt;li&gt;根据需要定义任何参数&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;start&lt;/code&gt; 方法中进行任何初始化&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;stop&lt;/code&gt; 方法中进行任何清理&lt;/li&gt;
&lt;li&gt;定义一个 &lt;code&gt;_loadline&lt;/code&gt; 方法，其中实际工作发生。此方法接收一个参数：&lt;code&gt;linetokens&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;顾名思义，这包含根据分隔符参数（从基类继承）拆分当前行后的标记。&lt;/p&gt;
&lt;p&gt;如果在完成其工作后有新数据……填充相应的行并返回 &lt;code&gt;True&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果没有可用的数据，因此解析已结束：返回 &lt;code&gt;False&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果后台代码发现没有更多行需要解析，则可能不需要返回 &lt;code&gt;False&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;已考虑的事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开文件（或接收类似文件的对象）&lt;/li&gt;
&lt;li&gt;跳过标头行（如果指示存在）&lt;/li&gt;
&lt;li&gt;读取行&lt;/li&gt;
&lt;li&gt;标记行&lt;/li&gt;
&lt;li&gt;预加载支持（将整个数据源一次性加载到内存中）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常一个示例胜过千言万语。让我们使用 BacktraderCSVData 中定义的内部 CSV 解析代码的简化版本。这个版本不需要初始化或清理（例如，这可能是打开一个套接字并稍后关闭它）。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;backtrader 数据源包含通常的行业标准源，这些源是要填充的。即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;volume&lt;/li&gt;
&lt;li&gt;openinterest&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您的策略/算法或简单数据浏览只需要，例如收盘价，您可以不触碰其他字段（每次迭代会自动用 &lt;code&gt;float('NaN')&lt;/code&gt; 值填充它们，然后用户代码有机会进行任何操作）。&lt;/p&gt;
&lt;p&gt;在此示例中，仅支持每日格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; itertools
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyCSVData&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;CSVDataBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;start&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 对于此数据源类型无需做任何操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;stop&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 对于此数据源类型无需做任何操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_loadline&lt;/span&gt;(self, linetokens):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; itertools&lt;span style="color:#f92672"&gt;.&lt;/span&gt;count(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dttxt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; linetokens[next(i)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 格式为 YYYY-MM-DD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(dttxt[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(dttxt[&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; d &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(dttxt[&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(y, m, d)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dtnum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; date2num(dt)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dtnum
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;open[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;low[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;volume[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;openinterest[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码假设所有字段都到位且可转换为浮点数，除了日期时间，它具有固定的 YYYY-MM-DD 格式，可以不使用 &lt;code&gt;datetime.datetime.strptime&lt;/code&gt; 进行解析。&lt;/p&gt;</description></item><item><title>开盘作弊</title><link>https://www.poloxue.com/backtrader/docs/10-broker/03-cheat-on-open/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/10-broker/03-cheat-on-open/</guid><description>&lt;h1 id="cheat-on-open开盘作弊"&gt;Cheat On Open（开盘作弊）&lt;a class="anchor" href="#cheat-on-open%e5%bc%80%e7%9b%98%e4%bd%9c%e5%bc%8a"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;版本 1.9.44.116 添加了 Cheat-On-Open 支持。这似乎是对那些在计算完一个柱的收盘价后全仓操作的人们的需求，他们期望与开盘价匹配。&lt;/p&gt;
&lt;p&gt;当开盘价跳空（向上或向下，取决于买入或卖出）且现金不足以进行全仓操作时，这种情况会失败。这迫使经纪商拒绝操作。&lt;/p&gt;
&lt;p&gt;虽然人们可以尝试通过正 [1] 索引法查看未来，但这需要预加载数据，而这并不总是可行的。&lt;/p&gt;
&lt;h2 id="模式"&gt;模式&lt;a class="anchor" href="#%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro(cheat_on_open&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这会在系统中激活一个额外的循环，该循环调用策略中的 &lt;code&gt;next_open&lt;/code&gt;、&lt;code&gt;nextstart_open&lt;/code&gt; 和 &lt;code&gt;prenext_open&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;为了清楚地分离常规方法（这些方法基于所检查的价格不再可用且未来未知）和作弊模式下的操作，决定增加一组额外的方法家族。&lt;/p&gt;
&lt;p&gt;这也避免了对常规 &lt;code&gt;next&lt;/code&gt; 方法的两次调用。&lt;/p&gt;
&lt;p&gt;以下情况在 &lt;code&gt;xxx_open&lt;/code&gt; 方法内部保持不变：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指标尚未重新计算，保持上一个循环中在等效的 &lt;code&gt;xxx&lt;/code&gt; 常规方法中最后看到的值。&lt;/li&gt;
&lt;li&gt;经纪商尚未评估新循环中的待处理订单，并且可以引入新订单，如果可能，将进行评估。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cerebro 还有一个名为 &lt;code&gt;broker_coo&lt;/code&gt;（默认值：True）参数，它告诉 cerebro 如果激活了 cheat-on-open，它也会尝试在经纪商中激活它（如果可能的话）。&lt;/li&gt;
&lt;li&gt;模拟经纪商有一个名为 &lt;code&gt;coo&lt;/code&gt; 的参数和一个名为 &lt;code&gt;set_coo&lt;/code&gt; 的方法来设置它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="尝试-cheat-on-open"&gt;尝试 Cheat-on-open&lt;a class="anchor" href="#%e5%b0%9d%e8%af%95-cheat-on-open"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面的示例有一个策略，具有两种不同的行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 cheat-on-open 为 True，它将仅从 &lt;code&gt;next_open&lt;/code&gt; 操作。&lt;/li&gt;
&lt;li&gt;如果 cheat-on-open 为 False，它将仅从 &lt;code&gt;next&lt;/code&gt; 操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这两种情况下，匹配价格必须相同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果不作弊，订单在前一天的收盘后发出，并将与下一个到来的价格（开盘价）匹配。&lt;/li&gt;
&lt;li&gt;如果作弊，订单在同一天发出并执行。因为订单是在经纪商评估订单之前发出的，所以它也将与下一个到来的价格（开盘价）匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二种情况下，可以精确计算全仓策略的份额，因为可以直接访问当前的开盘价。&lt;/p&gt;
&lt;p&gt;在这两种情况下，当前的开盘价和收盘价将从 &lt;code&gt;next&lt;/code&gt; 中打印。&lt;/p&gt;
&lt;h2 id="常规执行"&gt;常规执行：&lt;a class="anchor" href="#%e5%b8%b8%e8%a7%84%e6%89%a7%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./cheat-on-open.py --cerebro cheat_on_open&lt;span style="color:#f92672"&gt;=&lt;/span&gt;False
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-04-07 next, open 3073.4 close 3090.72
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-04-08 next, open 3092.07 close 3088.92
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Strat Len &lt;span style="color:#ae81ff"&gt;68&lt;/span&gt; 2005-04-08 Send Buy, fromopen False, close 3088.92
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-04-11 Buy Executed at price 3088.47
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-04-11 next, open 3088.47 close 3080.6
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-04-12 next, open 3080.42 close 3065.18
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;订单：&lt;/p&gt;</description></item><item><title>目标订单</title><link>https://www.poloxue.com/backtrader/docs/09-orders/03-target-orders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/09-orders/03-target-orders/</guid><description>&lt;h1 id="目标订单"&gt;目标订单&lt;a class="anchor" href="#%e7%9b%ae%e6%a0%87%e8%ae%a2%e5%8d%95"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 1.8.10.96 版本之前，策略方法 buy 和 sell 可通过 &lt;code&gt;sizer&lt;/code&gt; 实现智能持仓，&lt;code&gt;sizer&lt;/code&gt; 负责确定持仓的大小。然而，&lt;code&gt;Sizer&lt;/code&gt; 不能决定操作是买入还是卖出。这就需要一个新的概念，在决策中加入一个小的智能层。这就是策略中的order_target_xxx方法家族。&lt;/p&gt;
&lt;p&gt;受 &lt;strong&gt;zipline&lt;/strong&gt; 的启发，这些方法提供了简单指定最终目标的机会，无论目标是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;size -&amp;gt; 特定资产的股份或合约数量&lt;/li&gt;
&lt;li&gt;value -&amp;gt; 资产在投资组合中的货币单位价值&lt;/li&gt;
&lt;li&gt;percent -&amp;gt; 当前投资组合中资产的百分比值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这些方法的在 Strategy 类的参考文档中可以找到。简言之，这些方法使用与 &lt;code&gt;buy&lt;/code&gt; 和 &lt;code&gt;sell&lt;/code&gt; 相同的参数签名，只是将 &lt;code&gt;size&lt;/code&gt; 参数替换为 target 参数。&lt;/p&gt;
&lt;p&gt;这些方法的核心在于指定最终目标，然后方法决定操作是买入还是卖出。所有三种方法的逻辑相同。以下是order_target_size的工作方式：&lt;/p&gt;
&lt;p&gt;如果目标大于当前仓位，则发出买入指令，买入的数量为target - position_size。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓位：0，目标：7 -&amp;gt; buy(size=7 - 0) -&amp;gt; buy(size=7)&lt;/li&gt;
&lt;li&gt;仓位：3，目标：7 -&amp;gt; buy(size=7 - 3) -&amp;gt; buy(size=4)&lt;/li&gt;
&lt;li&gt;仓位：-3，目标：7 -&amp;gt; buy(size=7 - -3) -&amp;gt; buy(size=10)&lt;/li&gt;
&lt;li&gt;仓位：-3，目标：-2 -&amp;gt; buy(size=-2 - -3) -&amp;gt; buy(size=1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果目标小于当前仓位，则发出卖出指令，卖出的数量为position_size - target。例如：&lt;/p&gt;</description></item><item><title>策略参考</title><link>https://www.poloxue.com/backtrader/docs/07-strategy/03-strategy-references/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/07-strategy/03-strategy-references/</guid><description>&lt;h1 id="策略参考"&gt;策略参考&lt;a class="anchor" href="#%e7%ad%96%e7%95%a5%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="内置策略参考"&gt;内置策略参考&lt;a class="anchor" href="#%e5%86%85%e7%bd%ae%e7%ad%96%e7%95%a5%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h2 id="ma_crossover"&gt;MA_CrossOver&lt;a class="anchor" href="#ma_crossover"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;别名：SMA_CrossOver，这是一个仅做多的策略，基于移动平均线交叉操作。&lt;/p&gt;
&lt;h3 id="交易规则"&gt;交易规则&lt;a class="anchor" href="#%e4%ba%a4%e6%98%93%e8%a7%84%e5%88%99"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;买入逻辑：&lt;/strong&gt; 如果无持仓，&lt;code&gt;fast&lt;/code&gt; 移动平均线向上穿过 &lt;code&gt;slow&lt;/code&gt; 移动平均线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;卖出逻辑：&lt;/strong&gt; 有持仓时，&lt;code&gt;fast&lt;/code&gt; 移动平均线向下穿过 &lt;code&gt;slow&lt;/code&gt; 移动平均线。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;订单类型：&lt;/strong&gt; 市价单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fast (10)，_movav (&amp;lt;class ‘backtrader.indicators.sma.SMA’&amp;gt;)&lt;/li&gt;
&lt;li&gt;slow (30)，_movav (&amp;lt;class ‘backtrader.indicators.sma.SMA’&amp;gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="signalstrategy"&gt;SignalStrategy&lt;a class="anchor" href="#signalstrategy"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;此策略的子类旨在使用信号自动操作。信号通常是指标，预期输出值为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;gt; 0 表示多头指示&lt;/li&gt;
&lt;li&gt;&amp;lt; 0 表示空头指示&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;信号分为两组，共有 5 种类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要组：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LONGSHORT&lt;/code&gt;：接受来自该信号的多头和空头指示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LONG&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;接受多头指示进行做多。&lt;/li&gt;
&lt;li&gt;接受空头指示平仓多头。但：
&lt;ul&gt;
&lt;li&gt;如果系统中有 &lt;code&gt;LONGEXIT&lt;/code&gt; 信号，将用它来平仓多头。&lt;/li&gt;
&lt;li&gt;如果有 &lt;code&gt;SHORT&lt;/code&gt; 信号且没有 &lt;code&gt;LONGEXIT&lt;/code&gt; 信号，它将被用来平仓多头再开空头。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHORT&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;接受空头指示进行做空。&lt;/li&gt;
&lt;li&gt;接受多头指示平仓空头。但：
&lt;ul&gt;
&lt;li&gt;如果系统中有 &lt;code&gt;SHORTEXIT&lt;/code&gt; 信号，将用它来平仓空头。&lt;/li&gt;
&lt;li&gt;如果有 &lt;code&gt;LONG&lt;/code&gt; 信号且没有 &lt;code&gt;SHORTEXIT&lt;/code&gt; 信号，它将被用来平仓空头再开多头。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;退出组：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这两个信号旨在覆盖其他信号，并为平仓提供标准。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LONGEXIT&lt;/code&gt;：接受空头指示平仓多头。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SHORTEXIT&lt;/code&gt;：接受多头指示平仓空头。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;订单发出：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;订单执行类型为市价单，有效期为“直到取消” (Good until Canceled)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>线 Line 类</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/03-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/03-line/</guid><description>&lt;h1 id="线-line-类"&gt;线 Line 类&lt;a class="anchor" href="#%e7%ba%bf-line-%e7%b1%bb"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，许多对象都会生成 &lt;code&gt;Line&lt;/code&gt; 对象，而每个 &lt;code&gt;Line&lt;/code&gt; 代表的是一个时间序列数据，可以是价格、指标或其他数据。策略逻辑基本都离不开操作 &lt;code&gt;Line&lt;/code&gt; 对象。&lt;/p&gt;
&lt;h2 id="line"&gt;&lt;strong&gt;&lt;code&gt;Line&lt;/code&gt; 的访问&lt;/strong&gt;&lt;a class="anchor" href="#line"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="数据源中的"&gt;&lt;strong&gt;数据源中的 &lt;code&gt;Line&lt;/code&gt;&lt;/strong&gt;&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e4%b8%ad%e7%9a%84"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;数据源中包含了多个 &lt;code&gt;Line&lt;/code&gt;，如 &lt;code&gt;close&lt;/code&gt;、&lt;code&gt;open&lt;/code&gt;、&lt;code&gt;high&lt;/code&gt;、&lt;code&gt;low&lt;/code&gt; ，通过 &lt;code&gt;self.data.lines&lt;/code&gt; 访问它们。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close_line &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#75715e"&gt;# 访问收盘价线&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="指标中的"&gt;&lt;strong&gt;指标中的 &lt;code&gt;Line&lt;/code&gt;&lt;/strong&gt;&lt;a class="anchor" href="#%e6%8c%87%e6%a0%87%e4%b8%ad%e7%9a%84"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;指标同样会生成 &lt;code&gt;Line&lt;/code&gt;，如 &lt;code&gt;SimpleMovingAverage&lt;/code&gt; 的 &lt;code&gt;sma&lt;/code&gt;，通过 &lt;code&gt;self.movav.lines.sma&lt;/code&gt; 访问。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;movav &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;movav&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;移动平均大于收盘价&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="访问线的快捷方式"&gt;&lt;strong&gt;访问线的快捷方式&lt;/strong&gt;&lt;a class="anchor" href="#%e8%ae%bf%e9%97%ae%e7%ba%bf%e7%9a%84%e5%bf%ab%e6%8d%b7%e6%96%b9%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前面的语法和我们平时使用的不一样，因为我们平时都是通过简写访问，如 &lt;code&gt;self.data.close&lt;/code&gt; 实际上是 &lt;code&gt;self.data.lines.close&lt;/code&gt; 的快捷方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Backtrader&lt;/code&gt; 提供了多种简化访问 &lt;code&gt;Line&lt;/code&gt; 的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xxx.lines&lt;/code&gt; 可简写 &lt;code&gt;xxx.l&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxx.lines.name&lt;/code&gt; 可简写 &lt;code&gt;xxx.lines_name&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxx.lines[0]&lt;/code&gt; 可简写为 &lt;code&gt;xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxx.lines[X]&lt;/code&gt; 可简写为 &lt;code&gt;xxx.lineX&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有如：&lt;/p&gt;</description></item><item><title>自定义佣金</title><link>https://www.poloxue.com/backtrader/docs/11-commission-schemes/03-customization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/11-commission-schemes/03-customization/</guid><description>&lt;h1 id="自定义佣金"&gt;自定义佣金&lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e4%bd%a3%e9%87%91"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;重新设计 &lt;code&gt;CommInfo&lt;/code&gt; 对象以实现当前版本的最重要部分包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保留原始 &lt;code&gt;CommissionInfo&lt;/code&gt; 类和行为&lt;/li&gt;
&lt;li&gt;为轻松创建用户定义的佣金打开大门&lt;/li&gt;
&lt;li&gt;将格式 &lt;code&gt;xx%&lt;/code&gt; 作为新佣金方案的默认值，而不是 &lt;code&gt;0.xx&lt;/code&gt;（这只是个口味问题），同时保持行为可配置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="定义佣金方案"&gt;定义佣金方案&lt;a class="anchor" href="#%e5%ae%9a%e4%b9%89%e4%bd%a3%e9%87%91%e6%96%b9%e6%a1%88"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这涉及 1 到 2 个步骤：&lt;/p&gt;
&lt;h3 id="子类化-comminfobase"&gt;子类化 &lt;code&gt;CommInfoBase&lt;/code&gt;&lt;a class="anchor" href="#%e5%ad%90%e7%b1%bb%e5%8c%96-comminfobase"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;仅更改默认参数可能就足够了。&lt;code&gt;backtrader&lt;/code&gt; 已经在模块 &lt;code&gt;backtrader.commissions&lt;/code&gt; 中使用一些定义进行了此操作。期货的常规行业标准是每合同和每轮固定金额。定义可以这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CommInfo_Futures_Fixed&lt;/span&gt;(CommInfoBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;stocklike&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;commtype&amp;#39;&lt;/span&gt;, CommInfoBase&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMM_FIXED),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于股票和按百分比计算的佣金：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CommInfo_Stocks_Perc&lt;/span&gt;(CommInfoBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;stocklike&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;commtype&amp;#39;&lt;/span&gt;, CommInfoBase&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMM_PERC),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所述，此处解释百分比的默认值（作为参数 &lt;code&gt;commission&lt;/code&gt; 传递）为：&lt;code&gt;xx%&lt;/code&gt;。如果需要旧的/其他行为 &lt;code&gt;0.xx&lt;/code&gt;，可以轻松实现：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CommInfo_Stocks_PercAbs&lt;/span&gt;(CommInfoBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;stocklike&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;commtype&amp;#39;&lt;/span&gt;, CommInfoBase&lt;span style="color:#f92672"&gt;.&lt;/span&gt;COMM_PERC),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;percabs&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="重写-_getcommission-方法如有必要"&gt;重写 &lt;code&gt;_getcommission&lt;/code&gt; 方法（如有必要）&lt;a class="anchor" href="#%e9%87%8d%e5%86%99-_getcommission-%e6%96%b9%e6%b3%95%e5%a6%82%e6%9c%89%e5%bf%85%e8%a6%81"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_getcommission&lt;/span&gt;(self, size, price, pseudoexec):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;Calculates the commission of an operation at a given price
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; pseudoexec: if True the operation has not yet been executed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下面的实际示例中有更多详细信息。&lt;/p&gt;</description></item><item><title>节省内存</title><link>https://www.poloxue.com/backtrader/docs/05-cerebro/03-saving-memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/05-cerebro/03-saving-memory/</guid><description>&lt;h1 id="内存优化"&gt;内存优化&lt;a class="anchor" href="#%e5%86%85%e5%ad%98%e4%bc%98%e5%8c%96"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 的开发是在拥有大量RAM的机器上进行的，加上绘图的可视化反馈非常有用，几乎是必需品，这使得设计决策变得容易：将所有内容保存在内存中。但这一决定有一些缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;array.array&lt;/code&gt;进行数据存储时，当某些边界被超出时，需要分配和移动数据。&lt;/li&gt;
&lt;li&gt;内存较少的机器可能会受到影响。&lt;/li&gt;
&lt;li&gt;连接到一个可能在线数周/数月、提供数千秒/分钟分辨率tick的实时数据源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后者比前者更重要，因为backtrader做出了另一个设计决策：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保持纯Python以便在需要时能够在嵌入式系统中运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来的一个场景可能是backtrader连接到第二台提供实时数据的机器，而backtrader本身运行在Raspberry Pi甚至更有限的设备上，如ADSL路由器（带有Freetz映像的AVM Frit!Box 7490）。&lt;/p&gt;
&lt;p&gt;因此，需要backtrader支持动态内存方案。现在可以使用以下语义实例化或运行Cerebro：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;exactbars&lt;/code&gt; 默认值为 &lt;code&gt;False&lt;/code&gt;，每个存储在线中的值都保存在内存中。可能的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;True&lt;/code&gt;或&lt;code&gt;1&lt;/code&gt;：所有“线”对象将内存使用减少到自动计算的最小周期。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 SMA 的周期为30，则底层将始终有一个30条的运行缓冲区，以允许计算 SMA。&lt;/li&gt;
&lt;li&gt;此设置将停用预加载和runonce。&lt;/li&gt;
&lt;li&gt;使用此设置还将停用绘图。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-1&lt;/code&gt;：在策略级别的数据源和指标/操作将保留所有数据在内存中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 RSI 内部使用指标UpDay进行计算。此子指标将不保留所有数据在内存中。&lt;/li&gt;
&lt;li&gt;这允许保持绘图和预加载活动。&lt;/li&gt;
&lt;li&gt;runonce将被停用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-2&lt;/code&gt;：作为策略属性的数据源和指标将保留所有点在内存中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 RSI 内部使用指标UpDay进行计算。此子指标将不保留所有数据在内存中。&lt;/li&gt;
&lt;li&gt;如果在&lt;code&gt;__init__&lt;/code&gt;中定义了&lt;code&gt;a = self.data.close - self.data.high&lt;/code&gt;，那么&lt;code&gt;a&lt;/code&gt;将不保留所有数据在内存中。&lt;/li&gt;
&lt;li&gt;这允许保持绘图和预加载活动。&lt;/li&gt;
&lt;li&gt;runonce将被停用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正如往常，示例胜过千言万语。一个示例脚本展示了差异。它针对1996年至2015年的雅虎每日数据运行，共计4965天。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这是一个小样本。交易14小时的EuroStoxx50期货在一个月内将生成约18000个1分钟条。&lt;/p&gt;
&lt;p&gt;首先执行脚本，查看在不请求内存节省时使用了多少内存位置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./memory-savings.py --save &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Total memory cells used: &lt;span style="color:#ae81ff"&gt;506430&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于级别1（完全节省）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./memory-savings.py --save &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Total memory cells used: &lt;span style="color:#ae81ff"&gt;2041&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从 50 万降到 2041。确实如此。&lt;/p&gt;
&lt;p&gt;系统中的每个“线”对象使用&lt;code&gt;collections.deque&lt;/code&gt;作为缓冲区（而不是&lt;code&gt;array.array&lt;/code&gt;），并且长度限制为所需操作的绝对最小值。&lt;/p&gt;
&lt;p&gt;假设，使用周期为30的简单移动平均线的策略。在这种情况下，将进行以下调整：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据源将有一个30位置的缓冲区，这是 SMA 生成下一个值所需的数量。&lt;/li&gt;
&lt;li&gt;SMA 将有一个位置的缓冲区，因为除非其他指标需要（依赖于 SMA），否则没必要保留更大缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：此模式最吸引人且可能最重要的特点是，整个脚本生命周期内使用的内存量保持不变。&lt;/p&gt;
&lt;p&gt;无论数据源的大小如何。如如果长时间连接实时数据源，这将非常有用。&lt;/p&gt;</description></item><item><title>配置数据</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/03-datafeed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/03-datafeed/</guid><description>&lt;h1 id="配置数据-datafeed"&gt;配置数据 DataFeed&lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae%e6%95%b0%e6%8d%ae-datafeed"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;我们目标是通过策略实现资产增值，这就离不开价格数据，甚至是其他有用的数据。本小节，我们将学习如何系统配置数据源，即添加数据源 DataFeed。&lt;/p&gt;
&lt;p&gt;配置 DataFeed 要用到的是 &lt;code&gt;backtrader.feeds&lt;/code&gt; 中提供的数据工具。要用到的数据文件是 &lt;a href="https://raw.githubusercontent.com/mementum/backtrader/master/datas/orcl-1995-2014.txt"&gt;orcl-1995-2014&lt;/a&gt;（点击下载即可下载）。&lt;/p&gt;
&lt;p&gt;假设，数据文件被下载到当前目录，通过 &lt;code&gt;bt.feeds.YahooFinanceCSVDataFeed&lt;/code&gt; 即可创建 datafeed。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;./orcl-1995-2014.txt&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fromdate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; todate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reverse&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yahoo 在线下载的 CSV 数据按日期降序排列，YahooFinanceCSVData 也是按这个标准解析。但我们提供的数据是升序排列，故设置参数 &lt;code&gt;reverse=True&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下来，我们通过 &lt;code&gt;cerebro.adddata&lt;/code&gt; 将数据添加系统即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将这部分实现补充到我们的系统中。&lt;/p&gt;
&lt;h2 id="完整示例"&gt;完整示例&lt;a class="anchor" href="#%e5%ae%8c%e6%95%b4%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime &lt;span style="color:#75715e"&gt;# For datetime objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os.path &lt;span style="color:#75715e"&gt;# To manage paths&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys &lt;span style="color:#75715e"&gt;# To find out the script name (in argv[0])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; modpath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dirname(os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;abspath(sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(modpath, &lt;span style="color:#e6db74"&gt;&amp;#39;./datas/orcl-1995-2014.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fromdate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; todate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reverse&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcash(&lt;span style="color:#ae81ff"&gt;100000.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Starting Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Final Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行输出：&lt;/p&gt;</description></item><item><title>OCO 订单</title><link>https://www.poloxue.com/backtrader/docs/09-orders/04-oco-orders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/09-orders/04-oco-orders/</guid><description>&lt;h1 id="oco订单"&gt;OCO订单&lt;a class="anchor" href="#oco%e8%ae%a2%e5%8d%95"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;使用模式尽量保持简单。因此，如果策略中的逻辑决定是时候发布订单，可以像这样使用 OCO：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; o1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; o2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(&lt;span style="color:#f92672"&gt;...&lt;/span&gt;, oco&lt;span style="color:#f92672"&gt;=&lt;/span&gt;o1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; o3 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(&lt;span style="color:#f92672"&gt;...&lt;/span&gt;, oco&lt;span style="color:#f92672"&gt;=&lt;/span&gt;o1) &lt;span style="color:#75715e"&gt;# 甚至可以是oco=o2，o2已经在o1组中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;很简单，第一个订单 o1 将成为组长。通过指定 oco 命名参数，o2 和 o3 成为 OCO 组的一部分。请注意，代码注释指出 o3 也可以通过指定 o2 成为组的一部分（o2已经是组的一部分）。&lt;/p&gt;
&lt;p&gt;一旦成功组成组后，如果组中的任何订单被执行、取消或过期，其他订单将被取消。&lt;/p&gt;
&lt;p&gt;下面的示例展示了OCO概念。一个标准执行并绘图：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./oco.py --broker cash&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;50000&lt;/span&gt; --plot&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现金增加到50000，因为资产价值达到4000，3个订单的1个项目至少需要12000货币单位（经纪商默认值为10000）。&lt;/p&gt;
&lt;p&gt;以下图表实际上没有提供太多信息（这是一个标准的SMA交叉策略）。&lt;/p&gt;
&lt;p&gt;示例执行，当快速SMA上穿慢速SMA时，发布3个订单。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order1是一个限价订单，在limdays天后到期，限价为收盘价减少一个百分比。&lt;/li&gt;
&lt;li&gt;order2是一个期限更长、限价更低的限价订单。&lt;/li&gt;
&lt;li&gt;order3是一个限价更低的限价订单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，order2 和 order3 不会执行，因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order1将首先执行，这将触发其他订单的取消。&lt;/li&gt;
&lt;li&gt;或者order1将过期，这将触发其他订单的取消。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统保存了3个订单的ref标识符，并且只有在notify_order中看到三个ref标识符分别为Completed、Cancelled、Margin或Expired时，才会发布新买单。&lt;/p&gt;
&lt;p&gt;退出是在持有一段时间后后简单完成的。&lt;/p&gt;
&lt;p&gt;为了跟踪实际执行，生成文本输出。部分内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-28: Oref 1 / Buy at 2941.11055
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-28: Oref 2 / Buy at 2896.7722
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-28: Oref 3 / Buy at 2822.87495
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-31: Order ref: 1 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-31: Order ref: 2 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-31: Order ref: 3 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-31: Order ref: 1 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-31: Order ref: 2 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-01-31: Order ref: 3 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-02-01: Order ref: 1 / Type Buy / Status Expired
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-02-01: Order ref: 3 / Type Buy / Status Canceled
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2005-02-01: Order ref: 2 / Type Buy / Status Canceled
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-23: Oref 49 / Buy at 3532.39925
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-23: Oref 50 / Buy at 3479.147
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-23: Oref 51 / Buy at 3390.39325
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 49 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 50 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 51 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 49 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 50 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 51 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 49 / Type Buy / Status Completed
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 51 / Type Buy / Status Canceled
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-06-26: Order ref: 50 / Type Buy / Status Canceled
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-11-10: Order ref: 61 / Type Buy / Status Canceled
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-11: Oref 63 / Buy at 4032.62555
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-11: Oref 64 / Buy at 3971.8322
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-11: Oref 65 / Buy at 3870.50995
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-12: Order ref: 63 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-12: Order ref: 64 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-12: Order ref: 65 / Type Buy / Status Submitted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-12: Order ref: 63 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-12: Order ref: 64 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-12: Order ref: 65 / Type Buy / Status Accepted
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-15: Order ref: 63 / Type Buy / Status Expired
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-15: Order ref: 65 / Type Buy / Status Canceled
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2006-12-15: Order ref: 64 / Type Buy / Status Canceled&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下情况发生：&lt;/p&gt;</description></item><item><title>Reference</title><link>https://www.poloxue.com/backtrader/docs/12-analyzers/04-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/12-analyzers/04-reference/</guid><description>&lt;h1 id="参考"&gt;参考&lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="annualreturn"&gt;AnnualReturn&lt;a class="anchor" href="#annualreturn"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;AnnualReturn()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该分析器通过查看年的起点和终点来计算年度回报率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;成员属性：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rets&lt;/code&gt;：计算出的年度回报率列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ret&lt;/code&gt;：年度回报率字典（键：年份）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;get_analysis：&lt;/strong&gt;
返回包含年度回报率的字典（键：年份）&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="calmar"&gt;Calmar&lt;a class="anchor" href="#calmar"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Calmar()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该分析器计算 Calmar 比率，时间框架可以与基础数据使用的不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeframe&lt;/code&gt;（默认：无）：如果为 None，将使用系统中第一个数据的时间框架。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compression&lt;/code&gt;（默认：无）：仅用于子日时间框架，例如通过指定 &amp;ldquo;TimeFrame.Minutes&amp;rdquo; 和 60 作为压缩在每小时时间框架上工作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fund&lt;/code&gt;（默认：无）：如果为 None，将自动检测经纪人的实际模式（fundmode - True/False）来决定回报率是基于总净资产价值还是基金价值。见经纪人文档中的 &lt;code&gt;set_fundmode&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;get_analysis：&lt;/strong&gt;
返回一个包含时间段键和对应滚动 Calmar 比率的 OrderedDict。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="drawdown"&gt;DrawDown&lt;a class="anchor" href="#drawdown"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DrawDown()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该分析器计算交易系统的回撤统计数据，如百分比和美元的回撤值、最大回撤值、回撤长度和最大回撤长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fund&lt;/code&gt;（默认：无）：如果为 None，将自动检测经纪人的实际模式（fundmode - True/False）来决定回报率是基于总净资产价值还是基金价值。见经纪人文档中的 &lt;code&gt;set_fundmode&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;get_analysis：&lt;/strong&gt;
返回一个包含回撤统计数据的字典（支持 . 符号表示法和子字典），可用的键/属性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drawdown&lt;/code&gt;：回撤值（百分比）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moneydown&lt;/code&gt;：回撤值（货币单位）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;len&lt;/code&gt;：回撤长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max.drawdown&lt;/code&gt;：最大回撤值（百分比）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max.moneydown&lt;/code&gt;：最大回撤值（货币单位）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max.len&lt;/code&gt;：最大回撤长度&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="timedrawdown"&gt;TimeDrawDown&lt;a class="anchor" href="#timedrawdown"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeDrawDown()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该分析器计算在选定时间框架上的交易系统回撤，可以与基础数据使用的时间框架不同。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeframe&lt;/code&gt;（默认：无）：如果为 None，将使用系统中第一个数据的时间框架。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compression&lt;/code&gt;（默认：无）：仅用于子日时间框架，例如通过指定 &amp;ldquo;TimeFrame.Minutes&amp;rdquo; 和 60 作为压缩在每小时时间框架上工作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fund&lt;/code&gt;（默认：无）：如果为 None，将自动检测经纪人的实际模式（fundmode - True/False）来决定回报率是基于总净资产价值还是基金价值。见经纪人文档中的 &lt;code&gt;set_fundmode&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;get_analysis：&lt;/strong&gt;
返回一个包含回撤统计数据的字典（支持 . 符号表示法和子字典），可用的键/属性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drawdown&lt;/code&gt;：回撤值（百分比）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxdrawdown&lt;/code&gt;：最大回撤值（货币单位）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxdrawdownperiod&lt;/code&gt;：回撤长度&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="grossleverage"&gt;GrossLeverage&lt;a class="anchor" href="#grossleverage"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;analyzers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;GrossLeverage()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该分析器计算当前策略的总杠杆。&lt;/p&gt;</description></item><item><title>TA-Lib</title><link>https://www.poloxue.com/backtrader/docs/08-indicators/04-talib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/08-indicators/04-talib/</guid><description>&lt;h1 id="ta-lib"&gt;TA-Lib&lt;a class="anchor" href="#ta-lib"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;即使backtrader已经提供了大量内置指标，并且开发一个指标主要是定义输入、输出并以自然方式编写公式，但有些人仍然希望使用TA-LIB。因为，指标X在TA-LIB库中存在，但在backtrader中不存在（作者很乐意接受请求），还有，TA-LIB的行为是众所周知的，人们信赖传统的事物。&lt;/p&gt;
&lt;p&gt;为了满足每个人的需求，提供了TA-LIB集成。&lt;/p&gt;
&lt;h2 id="需求"&gt;需求&lt;a class="anchor" href="#%e9%9c%80%e6%b1%82"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TA-LIB的Python封装&lt;/li&gt;
&lt;li&gt;任何需要的依赖项（例如numpy）&lt;/li&gt;
&lt;li&gt;安装详情在GitHub仓库中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="使用ta-lib"&gt;使用TA-LIB&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8ta-lib"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与使用backtrader内置指标一样简单。以下是一个简单移动平均线的示例。首先是backtrader的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来是TA-LIB的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;talib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, timeperiod&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，TA-LIB指标的参数由库本身定义，而不是backtrader。在这种情况下，TA-LIB中的SMA使用名为&lt;code&gt;timeperiod&lt;/code&gt;的参数来定义操作窗口的大小。&lt;/p&gt;
&lt;p&gt;对于需要多个输入的指标，例如随机指标：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stoc &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;talib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;STOCH(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;low, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fastk_period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;14&lt;/span&gt;, slowk_period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, slowd_period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，&lt;code&gt;high&lt;/code&gt;、&lt;code&gt;low&lt;/code&gt;和&lt;code&gt;close&lt;/code&gt;分别传递。可以尝试传递&lt;code&gt;open&lt;/code&gt;而不是&lt;code&gt;low&lt;/code&gt;（或其他任何数据系列）进行实验。&lt;/p&gt;
&lt;p&gt;TA-LIB指标文档会自动解析并添加到backtrader文档中。你也可以查看TA-LIB的源代码/文档，或者执行以下操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;print(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;talib&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA&lt;span style="color:#f92672"&gt;.&lt;/span&gt;__doc__)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SMA([input_arrays], [timeperiod=30])

Simple Moving Average (Overlap Studies)

Inputs:
 price: (any ndarray)
Parameters:
 timeperiod: 30
Outputs:
 real&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这提供了一些信息：&lt;/p&gt;</description></item><item><title>优化改进</title><link>https://www.poloxue.com/backtrader/docs/05-cerebro/04-optimization-improvements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/05-cerebro/04-optimization-improvements/</guid><description>&lt;h1 id="优化改进"&gt;优化改进&lt;a class="anchor" href="#%e4%bc%98%e5%8c%96%e6%94%b9%e8%bf%9b"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 通过引入两个新的 Cerebro 参数，优化了在多进程环境下管理数据源和结果的方式。&lt;/p&gt;
&lt;p&gt;参数说明：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;optdatas&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;如果为True并进行优化（系统可以预加载并使用runonce），则数据预加载将仅在主进程中进行一次，以节省时间和资源。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;optreturn&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;如果为True，优化结果将不是完整的策略对象（包括所有数据、指标、观察者等），而是带有以下属性的对象（与策略中相同）：&lt;ul style="list-style-type: none; padding-left: 0;"&gt;&lt;li&gt;- params（或p）：策略执行时的参数&lt;/li&gt;&lt;li&gt;- analyzers：策略执行的分析器&lt;/li&gt;&lt;/ul&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;通常，我们只需要查看策略使用的参数的最终表现（如收益率）。如想查看运行过程中的详细数据（如每个时间点的指标值），请关闭此选项。&lt;/p&gt;
&lt;h2 id="数据源管理"&gt;数据源管理&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在优化场景中，Cerebro 参数可能的组合是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;preload=True&lt;/code&gt;（默认），数据源将在运行任何回测代码前完成预加载：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runonce=True&lt;/code&gt;（默认），指标将在紧密的for循环中批量计算，而不是逐步计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果两个条件都为True且&lt;code&gt;optdatas=True&lt;/code&gt;，则数据源将在生成新子进程之前在主进程中预加载（这些子进程负责执行回测）&lt;/p&gt;
&lt;h2 id="结果管理"&gt;结果管理&lt;a class="anchor" href="#%e7%bb%93%e6%9e%9c%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在优化场景中，当评估每个策略运行的不同参数时，最重要的两个因素是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strategy.params&lt;/code&gt;（或&lt;code&gt;strategy.p&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;回测使用的实际参数集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strategy.analyzers&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;提供策略实际表现评估的对象。例如：&lt;code&gt;SharpeRatio_A&lt;/code&gt;（年化夏普比率）&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;optreturn=True&lt;/code&gt;时，不会返回完整的策略实例，而是创建占位符对象，这些对象携带上述两个属性以进行评估。&lt;/p&gt;
&lt;p&gt;这避免了传回大量生成的数据，例如回测期间指标生成的值。&lt;/p&gt;
&lt;p&gt;如果希望返回完整的策略对象，只需在Cerebro实例化或进行&lt;code&gt;cerebro.run&lt;/code&gt;时设置&lt;code&gt;optreturn=False&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="一些测试运行"&gt;一些测试运行&lt;a class="anchor" href="#%e4%b8%80%e4%ba%9b%e6%b5%8b%e8%af%95%e8%bf%90%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;backtrader源代码中的优化示例已扩展，添加了对&lt;code&gt;optdatas&lt;/code&gt;和&lt;code&gt;optreturn&lt;/code&gt;的控制（实际上是禁用它们）。&lt;/p&gt;
&lt;h3 id="单核心运行"&gt;单核心运行&lt;a class="anchor" href="#%e5%8d%95%e6%a0%b8%e5%bf%83%e8%bf%90%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作为参考，当将CPU数量限制为1且不使用多进程模块时会发生什么：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sh" data-lang="sh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./optimization.py --maxcpus 1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;==================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;**************************************************
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;--------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OrderedDict&lt;span style="color:#f92672"&gt;([(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;smaperiod&amp;#39;&lt;/span&gt;, 10&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod1&amp;#39;&lt;/span&gt;, 12&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod2&amp;#39;&lt;/span&gt;, 26&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod3&amp;#39;&lt;/span&gt;, 9&lt;span style="color:#f92672"&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;**************************************************
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;--------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OrderedDict&lt;span style="color:#f92672"&gt;([(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;smaperiod&amp;#39;&lt;/span&gt;, 10&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod1&amp;#39;&lt;/span&gt;, 13&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod2&amp;#39;&lt;/span&gt;, 26&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod3&amp;#39;&lt;/span&gt;, 9&lt;span style="color:#f92672"&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OrderedDict&lt;span style="color:#f92672"&gt;([(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;smaperiod&amp;#39;&lt;/span&gt;, 29&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod1&amp;#39;&lt;/span&gt;, 19&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod2&amp;#39;&lt;/span&gt;, 29&lt;span style="color:#f92672"&gt;)&lt;/span&gt;, &lt;span style="color:#f92672"&gt;(&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;&amp;#39;macdperiod3&amp;#39;&lt;/span&gt;, 14&lt;span style="color:#f92672"&gt;)])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;==================================================&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Time used: 184.922727833&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="多核心运行"&gt;多核心运行&lt;a class="anchor" href="#%e5%a4%9a%e6%a0%b8%e5%bf%83%e8%bf%90%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在不限制CPU数量的情况下，Python多进程模块将尝试使用所有CPU。禁用&lt;code&gt;optdatas&lt;/code&gt;和&lt;code&gt;optreturn&lt;/code&gt;&lt;/p&gt;</description></item><item><title>利息</title><link>https://www.poloxue.com/backtrader/docs/11-commission-schemes/04-credit-interests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/11-commission-schemes/04-credit-interests/</guid><description>&lt;h1 id="利息"&gt;利息&lt;a class="anchor" href="#%e5%88%a9%e6%81%af"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在某些情况下，由于资产操作包含利率，实际经纪商的现金金额可能会减少。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;股票的卖空&lt;/li&gt;
&lt;li&gt;ETF 的多头和空头操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该费用直接从经纪账户的现金余额中扣除。但它仍然可以看作是佣金方案的一部分。因此，它已在 &lt;code&gt;backtrader&lt;/code&gt; 中进行了建模。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CommInfoBase&lt;/code&gt; 类（以及主要的 &lt;code&gt;CommissionInfo&lt;/code&gt; 接口对象）已扩展了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个新参数，用于设置利率并确定是否仅应用于空头还是同时应用于多头和空头&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="参数"&gt;参数&lt;a class="anchor" href="#%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;interest&lt;/code&gt;（默认值：0.0）&lt;/p&gt;
&lt;p&gt;如果非零，这是持有卖空头寸时收取的年度利息。这主要用于股票卖空。&lt;/p&gt;
&lt;p&gt;应用的默认公式：&lt;code&gt;days * price * size * (interest / 365)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;必须以绝对值指定：0.05 -&amp;gt; 5%&lt;/p&gt;
&lt;p&gt;注意：可以通过重写方法 &lt;code&gt;get_credit_interest&lt;/code&gt; 来更改行为&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;interest_long&lt;/code&gt;（默认值：False）&lt;/p&gt;
&lt;p&gt;一些产品如 ETF，在多头和空头头寸上都收取利息。如果为 &lt;code&gt;True&lt;/code&gt; 并且 &lt;code&gt;interest&lt;/code&gt; 非零，则多头和空头方向都将收取利息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="公式"&gt;公式&lt;a class="anchor" href="#%e5%85%ac%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;默认实现将使用以下公式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;days &lt;span style="color:#f92672"&gt;*&lt;/span&gt; abs(size) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; price &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (interest &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;365&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;days&lt;/code&gt;：自头寸开立或上次利息计算以来经过的天数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="重写公式"&gt;重写公式&lt;a class="anchor" href="#%e9%87%8d%e5%86%99%e5%85%ac%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要更改公式，需要子类化 &lt;code&gt;CommissionInfo&lt;/code&gt;。需要重写的方法是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_get_credit_interest&lt;/span&gt;(self, size, price, days, dt0, dt1):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 此方法返回经纪商收取的利息成本。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 对于 ``size &amp;gt; 0`` 的情况，仅在类参数 ``interest_long`` 为 ``True`` 时调用此方法。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 计算利率的公式为：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 公式：``days * price * abs(size) * (interest / 365)``
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; 参数：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - ``data``：收取利息的数据源
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - ``size``：当前头寸大小。&amp;gt; 0 表示多头头寸，&amp;lt; 0 表示空头头寸（此参数不会为 ``0``）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - ``price``：当前头寸价格
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - ``days``：自上次利息计算以来经过的天数（这是（dt0 - dt1）.days）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - ``dt0``：当前日期时间（datetime.datetime）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; - ``dt1``：上次计算日期时间（datetime.datetime）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ``dt0`` 和 ``dt1`` 在默认实现中未使用，并作为重写方法的额外输入提供
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可能经纪商在计算利率时不考虑周末或银行假日。在这种情况下，子类如下：&lt;/p&gt;</description></item><item><title>填充器</title><link>https://www.poloxue.com/backtrader/docs/10-broker/04-volume-filling-filler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/10-broker/04-volume-filling-filler/</guid><description>&lt;h1 id="填充器"&gt;填充器&lt;a class="anchor" href="#%e5%a1%ab%e5%85%85%e5%99%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Backtrader 的经纪模拟在订单执行时有一个默认策略：忽略交易量。这是基于两个前提：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;交易在流动性足够高的市场中，可以一次性完全吸收买/卖订单&lt;/li&gt;
&lt;li&gt;实际的交易量匹配需要真实的市场环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个简单的例子是“立即成交或取消”（Fill or Kill）订单。即使细化到每一笔交易，并且有足够的交易量来完成订单，Backtrader的经纪模拟也无法知道市场中有多少其他参与者来判断这样的订单是否会被匹配以遵循“立即成交”部分，或者订单是否应该被取消。&lt;/p&gt;
&lt;p&gt;但是经纪模拟可以接受交易量填充器（Volume Fillers），它们决定在给定时间点应该使用多少交易量来匹配订单。&lt;/p&gt;
&lt;h2 id="填充器签名"&gt;填充器签名&lt;a class="anchor" href="#%e5%a1%ab%e5%85%85%e5%99%a8%e7%ad%be%e5%90%8d"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在Backtrader生态系统中，填充器可以是任何符合以下签名的可调用对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;callable(order, price, ago)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;order&lt;/code&gt; 是即将执行的订单，该对象提供对目标数据对象的访问，创建的大小/价格、执行的价格/大小/剩余大小和其他详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;price&lt;/code&gt; 是订单执行的价格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ago&lt;/code&gt; 是数据在订单中的索引，用于查找交易量和价格元素&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在几乎所有情况下，这将是0（当前时间点），但在某些特殊情况下（例如Close订单），这可能是-1。&lt;/p&gt;
&lt;p&gt;例如，访问bar交易量可以这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;barvolume &lt;span style="color:#f92672"&gt;=&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;volume[ago]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可调用对象可以是一个函数，或例如支持&lt;code&gt;__call__&lt;/code&gt;方法的类的实例，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyFiller&lt;/span&gt;(object):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__call__&lt;/span&gt;(self, order, price, ago):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将填充器添加到经纪模拟&lt;/p&gt;
&lt;p&gt;最直接的方法是使用&lt;code&gt;set_filler&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;set_filler(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fillers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedSize())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二种选择是完全替换经纪模拟，这可能仅适用于重写了部分功能的BrokerBack子类：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;filler &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fillers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedSize()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;newbroker &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BrokerBack(filler&lt;span style="color:#f92672"&gt;=&lt;/span&gt;filler)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker &lt;span style="color:#f92672"&gt;=&lt;/span&gt; newbroker&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="示例"&gt;示例&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Backtrader的源代码中包含一个名为&lt;code&gt;volumefilling&lt;/code&gt;的示例，它允许测试一些集成的填充器（最初是全部）。&lt;/p&gt;
&lt;h2 id="参考"&gt;参考&lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fillers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedSize()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用条形图中某个百分比的交易量返回给定订单的执行大小。&lt;/p&gt;
&lt;p&gt;该百分比通过参数&lt;code&gt;perc&lt;/code&gt;设置。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt;（默认：None）最大执行大小。如果执行时间的条形图实际交易量小于该大小，则条形图的实际交易量也是一个限制。&lt;/p&gt;
&lt;p&gt;如果该参数的值评估为False，则将使用条形图的全部交易量来匹配订单。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fillers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedBarPerc()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用条形图中某个百分比的交易量返回给定订单的执行大小。&lt;/p&gt;
&lt;p&gt;该百分比通过参数&lt;code&gt;perc&lt;/code&gt;设置。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;perc&lt;/code&gt;（默认：100.0）（有效值：0.0 - 100.0）&lt;/p&gt;
&lt;p&gt;用于执行订单的条形图交易量百分比&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;fillers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BarPointPerc()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;返回给定订单的执行大小。交易量将在高-低范围内均匀分布，使用&lt;code&gt;minmov&lt;/code&gt;进行分区。&lt;/p&gt;
&lt;p&gt;对于给定价格分配的交易量，将使用&lt;code&gt;perc&lt;/code&gt;百分比。&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;minmov&lt;/code&gt;（默认：0.01）&lt;/p&gt;
&lt;p&gt;最小价格变动。用于分区高-低范围，以按比例分配可能价格之间的交易量&lt;/p&gt;</description></item><item><title>开发 Binary 数据源</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/04-datafeed-development-general/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/04-datafeed-development-general/</guid><description>&lt;h1 id="开发-binary-据源"&gt;开发 Binary 据源&lt;a class="anchor" href="#%e5%bc%80%e5%8f%91-binary-%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：示例中使用的 Binary 文件 &lt;code&gt;goog.fd&lt;/code&gt; 属于 VisualChart，不能与 backtrader 一起分发。&lt;/p&gt;
&lt;p&gt;对于那些有兴趣直接使用 Binary 文件的人，可以免费下载 VisualChart。&lt;/p&gt;
&lt;p&gt;CSV 数据源开发展示了如何添加新的基于 CSV 的数据源。现有的基类 &lt;code&gt;CSVDataBase&lt;/code&gt; 提供了框架，减轻了子类的大部分工作，在大多数情况下，它们可以简单地执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_loadline&lt;/span&gt;(self, linetokens):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 在这里解析 linetokens 并将它们放入 self.lines.close, self.lines.high 等中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 如果数据已解析，否则返回 False&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基类负责参数、初始化、打开文件、读取行、将行拆分为标记以及其他事项，例如跳过不符合日期范围（fromdate，todate）的行，这些行可能由最终用户定义。&lt;/p&gt;
&lt;p&gt;开发非 CSV 数据源遵循相同的模式，而无需深入到已拆分的行标记。&lt;/p&gt;
&lt;h3 id="需要做的事情"&gt;需要做的事情：&lt;a class="anchor" href="#%e9%9c%80%e8%a6%81%e5%81%9a%e7%9a%84%e4%ba%8b%e6%83%85"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从 &lt;code&gt;backtrader.feed.DataBase&lt;/code&gt; 派生&lt;/li&gt;
&lt;li&gt;添加任何需要的参数&lt;/li&gt;
&lt;li&gt;如果需要初始化，重写 &lt;code&gt;__init__(self)&lt;/code&gt; 和/或 &lt;code&gt;start(self)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果需要清理代码，重写 &lt;code&gt;stop(self)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;工作发生在必须始终重写的方法 &lt;code&gt;_load(self)&lt;/code&gt; 内&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们看看 &lt;code&gt;backtrader.feed.DataBase&lt;/code&gt; 已经提供的参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; backtrader.utils.py3 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; with_metaclass
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DataBase&lt;/span&gt;(with_metaclass(MetaDataBase, dataseries&lt;span style="color:#f92672"&gt;.&lt;/span&gt;OHLCDateTime)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;dataname&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;fromdate&amp;#39;&lt;/span&gt;, datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;min),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;todate&amp;#39;&lt;/span&gt;, datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;max),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;compression&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;timeframe&amp;#39;&lt;/span&gt;, TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;sessionend&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些参数具有以下含义：&lt;/p&gt;</description></item><item><title>打败随机入场</title><link>https://www.poloxue.com/backtrader/docs/19-articles/04-beating-the-random-entry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/19-articles/04-beating-the-random-entry/</guid><description>&lt;p&gt;&lt;strong&gt;打败随机入场&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近，reddit/r/algotrading 上有一些讨论，关于是否能够成功复制已发布的算法交易策略。首先，我复现了130多篇关于“预测股市”的研究论文，从头开始编写了代码，并记录了结果。以下是我学到的一些东西：&lt;/p&gt;
&lt;p&gt;因为之前的帖子已被删除，下面是快速总结：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;策略无效&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果作者声称某个策略因阿尔法衰退而失效，那么这些测试都是在过去的数据上运行的，但它们仍然无效。&lt;/li&gt;
&lt;li&gt;结论：这些策略要么是过拟合，要么是 p-hacking，或者只是微小的阿尔法，但这些阿尔法由于交易佣金的存在，已经被摧毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Artem Kaznatcheev 在《算法交易中的复现危机寓言》中写了对复现问题的描述，接着写了关于&lt;strong&gt;过拟合&lt;/strong&gt;的文章。&lt;/p&gt;
&lt;p&gt;前两篇文章主要是理论性的（即使第一篇提到实现了130个策略），而《过拟合》则提供了实际的代码。&lt;/p&gt;
&lt;p&gt;在这么多讨论中，如何尝试复现一些已发布的策略而不是论文，采用像《过拟合》那样的实际方法呢？例如，出版在一本知名书籍中的策略。&lt;/p&gt;
&lt;p&gt;目标：“打败随机入场”。这是这本书第三部分第八章中的一节：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《Amazon - 交易你的财务自由之路》&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Van Tharp Institute - &lt;strong&gt;《交易你的财务自由之路》&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该书提供了一个结构化的算法交易方法，特别强调了：仓位大小和仓位管理（即：何时退出交易）。这些要远比大多数人认为最重要的入场设置更为关键。&lt;/p&gt;
&lt;p&gt;在第八章中，Van K. Tharp 与 Tom Basso 交谈时提到：“从你说的来看，听起来只要你有好的退出方式，并且聪明地调整仓位大小，似乎你可以通过随机入场来持续赚钱。” Tom Basso 回应说，他可能确实可以做到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;规则&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于硬币投掷的入场&lt;/li&gt;
&lt;li&gt;始终在市场中——多头或空头&lt;/li&gt;
&lt;li&gt;一旦退出信号给出，立即重新进入&lt;/li&gt;
&lt;li&gt;市场波动性由10天的平均真实波幅指数（EMA ATR）决定&lt;/li&gt;
&lt;li&gt;跟踪止损，距离收盘价3倍波动性&lt;/li&gt;
&lt;li&gt;止损只能朝着交易方向移动&lt;/li&gt;
&lt;li&gt;固定仓位（1个合约）或1%风险模型（见书第12章）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试10个市场&lt;/li&gt;
&lt;li&gt;固定仓位：80%的时间获利&lt;/li&gt;
&lt;li&gt;1%风险模型：100%的时间获利&lt;/li&gt;
&lt;li&gt;可靠性：38%（获胜交易的百分比）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺失部分&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试的市场&lt;/li&gt;
&lt;li&gt;测试的时间段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果“始终在市场中”意味着“今天”关闭交易并在“明天”重新进入，或者意味着同时发出关闭/重新开仓的订单，这一点实际上最容易克服。&lt;/p&gt;
&lt;p&gt;对于最后两项，书中提到谈话发生在1991年，并且使用的是期货。为了公平起见，将使用1991年前的期货数据。也假设使用1天的价格条形图，考虑到提到的10天指数平滑移动平均（EMA）。&lt;/p&gt;
&lt;p&gt;最明显的问题似乎是如何正确实现算法，但在这种情况下，书籍很好地描述了简单算法及其结果。接下来，我们总结一下第12章中的“百分比风险模型”（书中称为“模型3”）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大亏损&lt;/strong&gt;：限制为账户总值的x%（即：百分比风险）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每合约风险&lt;/strong&gt;：根据给定的算法，风险为初始止损距离（波动性的3倍）乘以期货的乘数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合约数量&lt;/strong&gt;：最大亏损 / 每合约风险&lt;/p&gt;
&lt;h3 id="复现细节"&gt;复现细节&lt;a class="anchor" href="#%e5%a4%8d%e7%8e%b0%e7%bb%86%e8%8a%82"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将使用1985至1990年的CL（原油）期货数据（即：6年完整数据）。该合约的规格如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每点的最小变动：0.01（即：每点100个tick）&lt;/li&gt;
&lt;li&gt;每个tick的费用：10美元&lt;/li&gt;
&lt;li&gt;因此，乘数为1000美元/点（100 ticks/点 x 10美元/tick = 1000美元）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;佣金&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>第一个策略</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/04-first-strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/04-first-strategy/</guid><description>&lt;h1 id="第一个策略"&gt;第一个策略&lt;a class="anchor" href="#%e7%ac%ac%e4%b8%80%e4%b8%aa%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节我们将学习如何开发策略。&lt;/p&gt;
&lt;p&gt;第一个策略不涉及交易，我们将通过它打印每一天（bar）的 &amp;ldquo;收盘价（Close）&amp;rdquo; 。&lt;/p&gt;
&lt;p&gt;策略类（Strategy）继承自 &lt;code&gt;bt.Strategy&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它最重要的两个方法是 &lt;code&gt;__init__&lt;/code&gt;（策略初始化）和 &lt;code&gt;next&lt;/code&gt;（每个 OHLC，即bar，执行一次该方法）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(self, txt, dt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dt &lt;span style="color:#f92672"&gt;or&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (dt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isoformat(), txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Close, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上代码中的 &lt;code&gt;self.datas[0].close&lt;/code&gt; 访问的就是 &lt;code&gt;cerebro.broker.adddata&lt;/code&gt; 方法添加的第一个数据源 DataFeed。&lt;/p&gt;
&lt;p&gt;数据列表（&lt;code&gt;self.datas&lt;/code&gt;）是一个标准的Python列表，如添加多个数据源，数据按插入顺序存储。列表中的第一个数据项&lt;code&gt;self.datas[0]&lt;/code&gt;是默认交易数据，用于同步所有策略元素（它作为系统时钟）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;self.datas&lt;/code&gt; 的列表元素 data 底层类是 DataSeries，它有别名访问众所周知的 OHLC（开盘、高、低、收盘）每日值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;open &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;open
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;low &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;low
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;close &lt;span style="color:#f92672"&gt;=&lt;/span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了便于使用，我们将其赋值到 &lt;code&gt;self.dataclose&lt;/code&gt;，这将简化打印逻辑的创建。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，在 &lt;code&gt;next&lt;/code&gt; 方法中打印 &lt;code&gt;self.dataclose[0]&lt;/code&gt; 最新收盘价即可。策略的 &lt;code&gt;next&lt;/code&gt; 方法会在每个新的bar上调用，使用系统时钟（即&lt;code&gt;self.datas[0]&lt;/code&gt;）作为参考。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Close, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们有了策略类 &lt;code&gt;TestStrategy&lt;/code&gt;，还要通过 &lt;code&gt;cerebro.addstrategy&lt;/code&gt; 将其添加交易系统中。&lt;/p&gt;</description></item><item><title>索引和切片</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/04-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/04-index/</guid><description>&lt;h1 id="索引和切片"&gt;索引和切片&lt;a class="anchor" href="#%e7%b4%a2%e5%bc%95%e5%92%8c%e5%88%87%e7%89%87"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="索引0-和--1"&gt;&lt;strong&gt;索引：0 和 -1&lt;/strong&gt;&lt;a class="anchor" href="#%e7%b4%a2%e5%bc%950-%e5%92%8c--1"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，&lt;code&gt;Line&lt;/code&gt; 代表着一组按时间顺序排列的点。这些点在策略执行期间动态生成，可以通过索引来访问。&lt;/p&gt;
&lt;h3 id="使用索引访问"&gt;&lt;strong&gt;使用索引访问 &lt;code&gt;Line&lt;/code&gt;&lt;/strong&gt;&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e7%b4%a2%e5%bc%95%e8%ae%bf%e9%97%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;访问当前值：&lt;/strong&gt; 使用 &lt;code&gt;0&lt;/code&gt; 索引访问当前的线值，如 &lt;code&gt;self.data.close[0]&lt;/code&gt; 获取当前收盘价。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;# 当前的收盘价&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;访问前值：&lt;/strong&gt; 使用负数索引访问之前的值，如 &lt;code&gt;self.data.close[-1]&lt;/code&gt; 获取上一条数据的收盘价。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;今天的收盘价高于昨日的收盘价&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;索引的意义：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 索引指向当前时刻的值，&lt;code&gt;-1&lt;/code&gt; 指向上一个时刻的值，以此类推。&lt;/li&gt;
&lt;li&gt;负数索引指向历史数据点，这对于时间序列分析和策略中的数据回溯非常有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简单示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 比较今天的收盘价和昨天的收盘价&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;今天的收盘价更高&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;今天的收盘价更低&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个示例中，&lt;code&gt;self.data.close[0]&lt;/code&gt; 是今天的收盘价，&lt;code&gt;self.data.close[-1]&lt;/code&gt; 是昨天的收盘价。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="切片"&gt;&lt;strong&gt;切片&lt;/strong&gt;&lt;a class="anchor" href="#%e5%88%87%e7%89%87"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Backtrader&lt;/code&gt; 不支持对 &lt;code&gt;Line&lt;/code&gt; 对象的切片操作，这是为了保持设计的一致性。切片适用于普通的 Python 数组，但在 &lt;code&gt;Backtrader&lt;/code&gt; 中，&lt;code&gt;Line&lt;/code&gt; 对象是动态增长的，因此切片的使用存在一定的限制。&lt;/p&gt;
&lt;h3 id="为什么不支持切片"&gt;&lt;strong&gt;为什么不支持切片&lt;/strong&gt;&lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e6%94%af%e6%8c%81%e5%88%87%e7%89%87"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先是 &lt;code&gt;Line&lt;/code&gt; 的设计上要保持一致性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Line&lt;/code&gt; 对象上的数据是通过索引（如 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;-1&lt;/code&gt;）动态访问，基于时间序列进行数据处理。切片在此情况下并不适用，因为线的数据是按时间顺序排列的。&lt;/p&gt;
&lt;p&gt;而常规可索引对象的切片是什么样的？&lt;/p&gt;</description></item><item><title>Bracket Orders</title><link>https://www.poloxue.com/backtrader/docs/09-orders/05-bracket-orders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/09-orders/05-bracket-orders/</guid><description>&lt;h1 id="bracket-orders"&gt;Bracket Orders&lt;a class="anchor" href="#bracket-orders"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;1.9.37.116版本增加了Bracket订单，为回测经纪商提供了广泛的订单支持（Market、Limit、Close、Stop、StopLimit、StopTrail、StopTrailLimit、OCO）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，这是为回测和 Interactive Brokers 实现的。&lt;/p&gt;
&lt;p&gt;Bracket订单不是单个订单，而是由3个订单组成。&lt;/p&gt;
&lt;p&gt;以做多为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个主要的买单，通常设置为 Limit 或 StopLimit 订单。&lt;/li&gt;
&lt;li&gt;一个低价卖单，通常设置为 Stop 订单以限制损失。&lt;/li&gt;
&lt;li&gt;一个高价卖单，通常设置为 Limit 订单以获取利润。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;做空也有对应的卖单和 2 个买单。&lt;/p&gt;
&lt;p&gt;低价/高价卖单实际上形成了一个围绕主要订单的 Bracket。&lt;/p&gt;
&lt;p&gt;为了使其合理，以下规则适用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3个订单一起提交，以避免其中任何一个独立触发。&lt;/li&gt;
&lt;li&gt;低价/高价卖单被标记为主要订单的子订单。&lt;/li&gt;
&lt;li&gt;子订单在主要订单执行之前不活跃。&lt;/li&gt;
&lt;li&gt;取消主要订单会取消低价和高价卖单。&lt;/li&gt;
&lt;li&gt;执行主要订单会激活低价和高价卖单。&lt;/li&gt;
&lt;li&gt;一旦活跃，低价/高价卖单的执行或取消会自动取消另一个订单。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="使用模式"&gt;使用模式&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%a8%a1%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;有两种方式创建 Bracket 订单组：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单次发布3个订单。&lt;/li&gt;
&lt;li&gt;手动发布3个订单。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="单次发布bracket"&gt;单次发布Bracket&lt;a class="anchor" href="#%e5%8d%95%e6%ac%a1%e5%8f%91%e5%b8%83bracket"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;backtrader在Strategy中提供了两个新方法来控制Bracket订单：&lt;code&gt;buy_bracket&lt;/code&gt;和&lt;code&gt;sell_bracket&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;签名和信息见下文或Strategy参考部分。&lt;/p&gt;
&lt;p&gt;通过单个语句完成3个订单的设置。示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brackets &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy_bracket(limitprice&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;14.00&lt;/span&gt;, price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;13.50&lt;/span&gt;, stopprice&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;13.00&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意，&lt;code&gt;stopprice&lt;/code&gt;和&lt;code&gt;limitprice&lt;/code&gt;围绕&lt;code&gt;price&lt;/code&gt;设定。这应该足够了。&lt;/p&gt;
&lt;p&gt;实际的目标数据将是 data0，大小将由默认的sizer自动确定。当然，可以指定其他参数来精细控制执行。&lt;/p&gt;
&lt;p&gt;返回值是一个包含3个订单的列表：[主要订单，stop订单，limit订单]。&lt;/p&gt;
&lt;p&gt;因为在发布 &lt;code&gt;sell_bracket&lt;/code&gt; 订单时，低价和高价将翻转，所以参数命名遵循约定：&lt;code&gt;stop&lt;/code&gt; 用于止损（在做多操作中是低价，在做空操作中是高价），&lt;code&gt;limit&lt;/code&gt; 用于获取利润（在做多操作中是高价，在做空操作中是低价）。&lt;/p&gt;
&lt;h3 id="手动发布bracket"&gt;手动发布Bracket&lt;a class="anchor" href="#%e6%89%8b%e5%8a%a8%e5%8f%91%e5%b8%83bracket"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;这涉及生成3个订单，并处理&lt;code&gt;transmit&lt;/code&gt;和&lt;code&gt;parent&lt;/code&gt;参数。规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须首先创建主要订单并设置&lt;code&gt;transmit=False&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;低价/高价订单必须有&lt;code&gt;parent=main_side_order&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;第一个创建的低价/高价订单必须设置&lt;code&gt;transmit=False&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;最后一个创建的订单（无论是低价还是高价）设置&lt;code&gt;transmit=True&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下示例实现了与上述单次命令相同的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mainside &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;13.50&lt;/span&gt;, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Limit, transmit&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;lowside &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell(price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;13.00&lt;/span&gt;, size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mainside&lt;span style="color:#f92672"&gt;.&lt;/span&gt;size, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Stop, transmit&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, parent&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mainside)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;highside &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell(price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;14.00&lt;/span&gt;, size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mainside&lt;span style="color:#f92672"&gt;.&lt;/span&gt;size, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Limit, transmit&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;, parent&lt;span style="color:#f92672"&gt;=&lt;/span&gt;mainside)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要做更多的事情：&lt;/p&gt;</description></item><item><title>Position</title><link>https://www.poloxue.com/backtrader/docs/10-broker/05-position/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/10-broker/05-position/</guid><description>&lt;h1 id="position"&gt;Position&lt;a class="anchor" href="#position"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;通常在策略中要检查资产 Position，或成为仓位、头寸，通过 &lt;code&gt;position&lt;/code&gt; 属性或 &lt;code&gt;getposition(data=None, broker=None)&lt;/code&gt; 方法。这将返回策略在cerebro提供的默认经纪商中的&lt;code&gt;datas[0]&lt;/code&gt;的头寸。&lt;/p&gt;
&lt;p&gt;头寸只是一个表示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;持有的资产数量（size）&lt;/li&gt;
&lt;li&gt;平均价格（price）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它用作状态指示，例如可以用于决定是否需要发出订单（例如：仅在没有持仓时进入多头头寸）。&lt;/p&gt;
&lt;h2 id="参考"&gt;参考&lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;position&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Position(size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;保存并更新头寸的数量和价格。该对象与任何资产没有关系。它只保存数量和价格。&lt;/p&gt;
&lt;p&gt;成员属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;（int）：当前头寸的数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;price&lt;/code&gt;（float）：当前头寸的价格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用 &lt;code&gt;len(position)&lt;/code&gt; 来测试头寸实例以查看数量是否不为零。&lt;/p&gt;</description></item><item><title>保守型公式的再平衡</title><link>https://www.poloxue.com/backtrader/docs/19-articles/05-rebalancing-conserative/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/19-articles/05-rebalancing-conserative/</guid><description>&lt;h1 id="保守型公式的再平衡"&gt;保守型公式的再平衡&lt;a class="anchor" href="#%e4%bf%9d%e5%ae%88%e5%9e%8b%e5%85%ac%e5%bc%8f%e7%9a%84%e5%86%8d%e5%b9%b3%e8%a1%a1"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本文提出了保守型公式的方法：&lt;strong&gt;Python中的保守型公式：简化的量化投资&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这只是众多可能的再平衡方法中的一种，但它相对易于理解。方法概要如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从Y个股票（比如1000个中的100个）中选出x只股票&lt;/li&gt;
&lt;li&gt;选股标准为：
&lt;ul&gt;
&lt;li&gt;低波动性&lt;/li&gt;
&lt;li&gt;高净派息收益率（Net Payout Yield，NPY）&lt;/li&gt;
&lt;li&gt;高动量&lt;/li&gt;
&lt;li&gt;每月再平衡一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了这些概念后，接下来我们将展示如何在Backtrader中实现这一策略。&lt;/p&gt;
&lt;h3 id="数据"&gt;数据&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;即使有一个获胜的策略，如果没有可用的数据，那么一切都不会成真。因此，需要考虑数据的格式和如何加载它。&lt;/p&gt;
&lt;p&gt;假设有一组CSV文件（“逗号分隔值”），每个文件包含以下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每月的OHLCV数据&lt;/li&gt;
&lt;li&gt;额外的列包含净派息收益率（NPY），以形成一个ohlcvn数据集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSV数据格式如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;date, open, high, low, close, volume, npy
2001-12-31, 1.0, 1.0, 1.0, 1.0, 0.5, 3.0
2002-01-31, 2.0, 2.5, 1.1, 1.2, 3.0, 5.0
...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即每行表示一个月的数据。接下来，可以通过Backtrader的CSV数据加载引擎创建一个简单的扩展类。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;NetPayOutData&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;GenericCSVData):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;npy&amp;#39;&lt;/span&gt;,) &lt;span style="color:#75715e"&gt;# 增加一行，用于存储净派息收益率&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; npy&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;, &lt;span style="color:#75715e"&gt;# npy字段位于第6列（基于0的索引）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dtformat&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;, &lt;span style="color:#75715e"&gt;# 设置日期格式为yyyy-mm-dd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Months, &lt;span style="color:#75715e"&gt;# 设置时间框架为按月&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; openinterest&lt;span style="color:#f92672"&gt;=-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#75715e"&gt;# -1表示没有openinterest字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就完成了对数据源的扩展。注意，通过&lt;code&gt;lines=('npy',)&lt;/code&gt;，已经将净派息收益率（NPY）数据添加到了OHLCV数据流中。其他常见的字段（如open、high等）已经是&lt;code&gt;GenericCSVData&lt;/code&gt;的一部分。通过在&lt;code&gt;params&lt;/code&gt;中指定位置，我们能够告诉Backtrader净派息收益率所在的列。&lt;/p&gt;
&lt;h3 id="策略"&gt;策略&lt;a class="anchor" href="#%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下来，我们将逻辑封装到Backtrader的标准策略中。为了使其尽可能通用和可自定义，我们将采用与数据源相同的&lt;code&gt;params&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;首先，我们来回顾一下快速总结中的一个要点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从一个Y个股票的宇宙中选择x个股票&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;策略本身不负责将股票添加到股票宇宙中，但它负责选择股票。假设宇宙中有1000只股票，但在代码中设置了x=100，那么即使只有50只股票被加入，策略也会选择100只。为了应对这种情况，我们会做如下处理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置&lt;code&gt;selperc&lt;/code&gt;参数，默认值为0.10（即10%），表示从宇宙中选择的股票数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，如果宇宙中有1000只股票，则选择100只；如果只有50只股票，则选择5只。&lt;/p&gt;
&lt;p&gt;股票的排名公式如下：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;(momentum * net payout) / volatility&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;即，动量更大、派息收益率更高、波动性更低的股票会有更高的评分。&lt;/p&gt;</description></item><item><title>多时间框架</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/05-datafeed-multiple-timeframes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/05-datafeed-multiple-timeframes/</guid><description>&lt;h1 id="多时间框架策略"&gt;多时间框架策略&lt;a class="anchor" href="#%e5%a4%9a%e6%97%b6%e9%97%b4%e6%a1%86%e6%9e%b6%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在实际的交易中，我们常需要结合多个时间框架来制定投资决策，如在周级别评估趋势，而在日级别执行入场，或是基于 5 分钟与 60 分钟数据的对比执行交易。在 &lt;strong&gt;Backtrader&lt;/strong&gt; 中要实现这个目标，需要将不同时间框架的数据组合在一起。&lt;/p&gt;
&lt;p&gt;本节将介绍如何在 &lt;strong&gt;Backtrader&lt;/strong&gt; 实现多周期交易策略。&lt;/p&gt;
&lt;h2 id="基本规则"&gt;基本规则&lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e8%a7%84%e5%88%99"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 原生支持多时间框架的数据组合，只需遵循几个简单的规则。&lt;/p&gt;
&lt;p&gt;第一步，&lt;strong&gt;最小时间框架的数据必须首先加载&lt;/strong&gt;。较小时间框架（条数最多的数据）应当首先加载到Cerebro实例中。&lt;/p&gt;
&lt;p&gt;第二步，&lt;strong&gt;数据必须按日期时间对齐&lt;/strong&gt;。为了让平台能够正确解析数据并执行策略，必须保证各时间框架的数据时间对齐。&lt;/p&gt;
&lt;p&gt;第三步，&lt;strong&gt;使用 &lt;code&gt;resampledata&lt;/code&gt; 实现较大时间框架的重采样&lt;/strong&gt;。&lt;code&gt;cerebro.resample&lt;/code&gt; 函数能轻松地将较大的时间框架数据添加到策略中。&lt;/p&gt;
&lt;p&gt;在这个基础上，就可以在较短和较长时间框架上使用不同的技术指标。要注意，应用于大时间框架的指标产生的信号较少，还有，&lt;strong&gt;Backtrader&lt;/strong&gt; 会考虑大时间框架的最小周期，以确保数据的准确性。&lt;/p&gt;
&lt;h2 id="示例如何使用多个时间框架"&gt;示例：如何使用多个时间框架&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e5%a4%9a%e4%b8%aa%e6%97%b6%e9%97%b4%e6%a1%86%e6%9e%b6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如何在 &lt;strong&gt;Backtrader&lt;/strong&gt; 实现多时间周期呢？大概演示这个步骤吧。&lt;/p&gt;
&lt;h3 id="加载数据"&gt;加载数据&lt;a class="anchor" href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先，加载较小时间框架的数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="将数据添加到cerebro"&gt;将数据添加到Cerebro&lt;a class="anchor" href="#%e5%b0%86%e6%95%b0%e6%8d%ae%e6%b7%bb%e5%8a%a0%e5%88%b0cerebro"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;将较小时间框架数据都添加到 Cerebro 实例中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="重采样数据"&gt;重采样数据&lt;a class="anchor" href="#%e9%87%8d%e9%87%87%e6%a0%b7%e6%95%b0%e6%8d%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;cerebro.resampledata&lt;/code&gt; 将数据重采样到较大的时间框架。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;tframes[args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timeframe], compression&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compression)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="运行策略"&gt;运行策略&lt;a class="anchor" href="#%e8%bf%90%e8%a1%8c%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;执行策略并生成结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="示例"&gt;示例&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先，演示每日和每周时间框架。假设我们希望在一个策略中同时使用每日和每周的时间框架。通过命令行指定时间框架为每周，并进行数据重采样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./multitimeframe-example.py --timeframe weekly --compression &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，程序会加载每日数据，并将其重采样为每周数据。最终输出将包括每周和每日数据的合成图表。&lt;/p&gt;
&lt;p&gt;继续用每日时间框架压缩。如果我们希望将每日数据压缩为每两天一条数据，可以使用以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./multitimeframe-example.py --timeframe daily --compression &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，Backtrader会将每日数据压缩为每两天一条数据，并生成合成图表。&lt;/p&gt;
&lt;p&gt;还可以带简单移动平均（SMA）指标。为了展示不同时间框架对策略的影响，可以在策略中使用简单的移动平均线（SMA）指标。SMA将在较小和较大时间框架上应用，并根据它们产生不同的信号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在较小的时间框架（如每日）上，SMA将在第10个数据点后首次计算出值。&lt;/li&gt;
&lt;li&gt;在较大的时间框架（如每周）上，SMA的计算会延迟，可能需要10个周期的时间来产生有效信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于Backtrader的多时间框架支持，较大时间框架会消耗多个较小时间框架的数据条目来计算指标。&lt;/p&gt;
&lt;p&gt;在策略中使用 SMA 时，如果数据点来自较大时间框架，&lt;code&gt;nextstart&lt;/code&gt; 方法的调用可能会有所延迟。例如，在每周时间框架下，SMA的计算需要10周的数据，而在每个周期内，我们将看到多个“nextstart”调用，因为Backtrader会等待所有数据都齐全时才开始执行策略逻辑。&lt;/p&gt;
&lt;h2 id="代码示例"&gt;代码示例&lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 导入必要的库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; __future__ &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (absolute_import, division, print_function,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unicode_literals)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; argparse
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader.feeds &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; btfeeds
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader.indicators &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; btind
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 创建SMA策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SMAStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# SMA的周期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;onlydaily&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# 是否只在每日时间框架上应用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 为较小时间框架添加SMA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma_small_tf &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 如果选择不只应用于每日时间框架&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;onlydaily:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 为较大时间框架（如每周）添加SMA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma_large_tf &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# nextstart方法，用于输出调试信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nextstart&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;--------------------------------------------------&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;nextstart called with len&amp;#39;&lt;/span&gt;, len(self))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;--------------------------------------------------&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super(SMAStrategy, self)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;nextstart()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 运行策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;runstrat&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; args &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse_args()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 创建Cerebro实例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro(stdstats&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 根据用户选择的策略参数加载相应策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(SMAStrategy, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period, onlydaily&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;onlydaily)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 加载数据文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataname &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-day-001.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data) &lt;span style="color:#75715e"&gt;# 添加较小时间框架的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tframes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(daily&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days, weekly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Weeks, monthly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Months)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 根据需要重采样数据到较大时间框架&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;noresample:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataname2 &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-week-001.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;tframes[args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timeframe], compression&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compression)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 执行策略并生成结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 绘制结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(style&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 解析命令行参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_args&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser &lt;span style="color:#f92672"&gt;=&lt;/span&gt; argparse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Multitimeframe test&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--dataname&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;数据文件路径&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--dataname2&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;第二个数据文件路径&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--noresample&amp;#39;&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;不进行数据重采样&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--timeframe&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;weekly&amp;#39;&lt;/span&gt;, choices&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;daily&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;weekly&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;], help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;重采样时间框架&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--compression&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;int, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;压缩数据条数&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--indicators&amp;#39;&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;是否使用带指标的策略&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--onlydaily&amp;#39;&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;仅在每日时间框架上应用指标&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--period&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;int, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;指标周期&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;parse_args()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; runstrat()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="结论"&gt;结论&lt;a class="anchor" href="#%e7%bb%93%e8%ae%ba"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过Backtrader的多时间框架支持，您可以轻松地将不同时间框架的数据结合在一起，从而实现更加灵活的交易策略。只需遵循上述规则，就能在多个时间框架中应用不同的指标，并根据数据的不同粒度调整策略的执行逻辑。&lt;/p&gt;</description></item><item><title>开始交易</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/05-strategy-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/05-strategy-logic/</guid><description>&lt;h1 id="开始交易"&gt;开始交易&lt;a class="anchor" href="#%e5%bc%80%e5%a7%8b%e4%ba%a4%e6%98%93"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节，我们将演示一个简单的策略，让策略执行交易操作，如果出现连续两个交易日下跌即 - 买入！买入！买入！&lt;/p&gt;
&lt;p&gt;我们将基于上节的策略类 TestStrategy 继续开发，策略逻辑部分要在 &lt;code&gt;next&lt;/code&gt; 方法中实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(self, txt, dt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dt &lt;span style="color:#f92672"&gt;or&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (dt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isoformat(), txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Close, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先是买入条件，如何判断两日连续下跌呢？&lt;/p&gt;
&lt;p&gt;简单而言，就是 &lt;code&gt;close[0] &amp;lt; close[-1]&lt;/code&gt; 和 &lt;code&gt;close[-1] &amp;lt; close[-2]&lt;/code&gt;，即当前收盘价小于昨日收盘价，昨日收盘价小于大前日收盘价。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;and&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而买入操作使用 &lt;code&gt;self.buy&lt;/code&gt; 皆可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认情况下，如果存在多个数据源，&lt;code&gt;self.buy&lt;/code&gt; 买入的是第一个数据资产。&lt;/p&gt;
&lt;h2 id="完整示例"&gt;完整示例&lt;a class="anchor" href="#%e5%ae%8c%e6%95%b4%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime &lt;span style="color:#75715e"&gt;# For datetime objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os.path &lt;span style="color:#75715e"&gt;# To manage paths&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys &lt;span style="color:#75715e"&gt;# To find out the script name (in argv[0])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(self, txt, dt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dt &lt;span style="color:#f92672"&gt;or&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (dt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isoformat(), txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Close, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;BUY CREATE, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(TestStrategy)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; modpath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dirname(os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;abspath(sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(modpath, &lt;span style="color:#e6db74"&gt;&amp;#39;./orcl-1995-2014.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fromdate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; todate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reverse&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcash(&lt;span style="color:#ae81ff"&gt;100000.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Starting Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Final Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;</description></item><item><title>异常 Exceptions</title><link>https://www.poloxue.com/backtrader/docs/05-cerebro/05-exceptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/05-cerebro/05-exceptions/</guid><description>&lt;h1 id="异常"&gt;异常&lt;a class="anchor" href="#%e5%bc%82%e5%b8%b8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;设计目标之一是尽早退出并让用户完全透明地了解错误发生的情况。目的是强制自己编写在异常情况下会中断的代码，并强制重新审视受影响的部分。&lt;/p&gt;
&lt;p&gt;但现在是时候了，某些异常可能会慢慢添加到平台中。&lt;/p&gt;
&lt;h2 id="继承层次结构"&gt;继承层次结构&lt;a class="anchor" href="#%e7%bb%a7%e6%89%bf%e5%b1%82%e6%ac%a1%e7%bb%93%e6%9e%84"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;所有异常的基类是 &lt;code&gt;BacktraderError&lt;/code&gt;（直接继承自 &lt;code&gt;Exception&lt;/code&gt;）。&lt;/p&gt;
&lt;h2 id="位置"&gt;位置&lt;a class="anchor" href="#%e4%bd%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;errors&lt;/code&gt; 模块内，可以通过以下方式访问：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Strategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; something_goes_wrong():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;errors&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StrategySkipError&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者直接从 &lt;code&gt;backtrader&lt;/code&gt; 访问：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Strategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; something_goes_wrong():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StrategySkipError&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="异常-1"&gt;异常&lt;a class="anchor" href="#%e5%bc%82%e5%b8%b8-1"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;StrategySkipError&lt;/code&gt;，请求平台跳过该策略的回测。应在实例的初始化（&lt;code&gt;__init__&lt;/code&gt;）阶段引发。&lt;/p&gt;</description></item><item><title>运算符</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/05-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/05-operator/</guid><description>&lt;h1 id="运算符"&gt;运算符&lt;a class="anchor" href="#%e8%bf%90%e7%ae%97%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，运算符不仅用于常规的数学运算，还能构建复杂的策略逻辑。&lt;code&gt;Backtrader&lt;/code&gt; 的自定义运算符让策略的数学和逻辑运算更自然和简洁。&lt;/p&gt;
&lt;h2 id="如何使用运算符"&gt;&lt;strong&gt;如何使用运算符&lt;/strong&gt;&lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e8%bf%90%e7%ae%97%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;backtrader&lt;/code&gt; 支持基于运算符创建新的对象，如在 &lt;code&gt;__init__&lt;/code&gt; 中通过运算符计算多个指标，得到一个新的操作对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 使用运算符创建新的逻辑对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; close_over_sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; sma
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma_dist_to_high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high &lt;span style="color:#f92672"&gt;-&lt;/span&gt; sma
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma_dist_small &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sma_dist_to_high &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 创建卖出信号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell_sig &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;And(close_over_sma, sma_dist_small)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在 &lt;code&gt;Line&lt;/code&gt; 对象上使用了常规的运算符，如加减乘除、大小比较等。这简化了策略代码，增强了策略逻辑的可读性和可维护性。&lt;/p&gt;
&lt;p&gt;注：&lt;code&gt;backtrader&lt;/code&gt; 的指标计算是自有的体系，不是基于 &lt;code&gt;numpy&lt;/code&gt; 和 &lt;code&gt;pandas&lt;/code&gt;，所以要单独实现这些运算符。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="一些未覆盖的运算符函数"&gt;&lt;strong&gt;一些未覆盖的运算符/函数&lt;/strong&gt;&lt;a class="anchor" href="#%e4%b8%80%e4%ba%9b%e6%9c%aa%e8%a6%86%e7%9b%96%e7%9a%84%e8%bf%90%e7%ae%97%e7%ac%a6%e5%87%bd%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;某些 Python 中的运算符没有被覆盖，&lt;code&gt;backtrader&lt;/code&gt; 提供了专门的函数来模拟逻辑运算，如 &lt;code&gt;bt.And&lt;/code&gt; 和 &lt;code&gt;bt.Or&lt;/code&gt; 来实现逻辑 &amp;ldquo;与&amp;rdquo; 和 &amp;ldquo;或&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;下面把这些单独实现的运算符列出来看看吧。&lt;/p&gt;
&lt;h3 id="逻辑运算符"&gt;逻辑运算符&lt;a class="anchor" href="#%e9%80%bb%e8%be%91%e8%bf%90%e7%ae%97%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python 中的 &lt;code&gt;and&lt;/code&gt; 和 &lt;code&gt;or&lt;/code&gt; 运算符无法在 &lt;code&gt;Backtrader&lt;/code&gt; 中覆盖，&lt;code&gt;backtradr&lt;/code&gt; 提供了 &lt;code&gt;bt.And&lt;/code&gt; 和 &lt;code&gt;bt.Or&lt;/code&gt; 来模拟这两个逻辑操作。&lt;/p&gt;</description></item><item><title>MFI 通用版</title><link>https://www.poloxue.com/backtrader/docs/19-articles/06-mfi-generic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/19-articles/06-mfi-generic/</guid><description>&lt;h3 id="mfi-通用版"&gt;MFI 通用版&lt;a class="anchor" href="#mfi-%e9%80%9a%e7%94%a8%e7%89%88"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在之前的《Canonical 与 Non-Canonical》一文中，介绍了 MFI（即 Money Flow Indicator，资金流动指标）的实现。&lt;/p&gt;
&lt;p&gt;虽然这个实现是按照传统的方式开发的，但它依然有改进的空间，并且可以做得更通用。&lt;/p&gt;
&lt;p&gt;让我们关注一下实现的前几行代码，即计算典型价格的部分。&lt;/p&gt;
&lt;h4 id="canonical-mfi---典型价格和原始资金流"&gt;Canonical MFI - 典型价格和原始资金流&lt;a class="anchor" href="#canonical-mfi---%e5%85%b8%e5%9e%8b%e4%bb%b7%e6%a0%bc%e5%92%8c%e5%8e%9f%e5%a7%8b%e8%b5%84%e9%87%91%e6%b5%81"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MFI_Canonical&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Indicator):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;mfi&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;14&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tprice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;+&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;low &lt;span style="color:#f92672"&gt;+&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mfraw &lt;span style="color:#f92672"&gt;=&lt;/span&gt; tprice &lt;span style="color:#f92672"&gt;*&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;volume
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;典型的实例化方式如下所示：&lt;/p&gt;
&lt;h4 id="mfi-典型实例化"&gt;MFI 典型实例化&lt;a class="anchor" href="#mfi-%e5%85%b8%e5%9e%8b%e5%ae%9e%e4%be%8b%e5%8c%96"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyMFIStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mfi &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MFI_Canonical(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的问题应该很明显： “需要为指标提供包含收盘价、最低价、最高价和成交量的输入（即&lt;em&gt;在 backtrader 生态系统中的&lt;/em&gt;lines）”。&lt;/p&gt;
&lt;p&gt;当然，也可能有人希望使用来自不同数据源的组件来创建资金流动指标（例如来自数据源或其他指标的线）。例如，想要给收盘价赋予更多权重，而不需要开发一个特定的指标。考虑到行业标准的 OHLCV 数据字段顺序，支持多个输入并给收盘价加权的实例化可以是这样的：&lt;/p&gt;
&lt;h4 id="mfi-多输入实例化"&gt;MFI 多输入实例化&lt;a class="anchor" href="#mfi-%e5%a4%9a%e8%be%93%e5%85%a5%e5%ae%9e%e4%be%8b%e5%8c%96"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyMFIStrategy2&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; wclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mfi &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MFI_Canonical(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;low,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; wclose, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;volume)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者因为用户之前使用过 ta-lib 并喜欢多个输入的方式。&lt;/p&gt;
&lt;h4 id="支持多个输入"&gt;支持多个输入&lt;a class="anchor" href="#%e6%94%af%e6%8c%81%e5%a4%9a%e4%b8%aa%e8%be%93%e5%85%a5"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;backtrader 尽量做到符合 Python 风格，并且系统中的 &lt;code&gt;self.datas&lt;/code&gt; 数组（自动提供给策略的所有数据源）可以查询其长度。我们可以利用这一点来区分调用者的需求，并正确地计算 &lt;code&gt;tprice&lt;/code&gt; 和 &lt;code&gt;mfraw&lt;/code&gt;。&lt;/p&gt;</description></item><item><title>Trade</title><link>https://www.poloxue.com/backtrader/docs/10-broker/06-trade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/10-broker/06-trade/</guid><description>&lt;h1 id="trade"&gt;Trade&lt;a class="anchor" href="#trade"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;交易的定义：当一个工具的头寸从 0 变为一个大小X（多头/空头头寸分别为正/负）时，交易被认为是开启的。或是当一个头寸从X变为0时，交易被认为是关闭的。&lt;/p&gt;
&lt;p&gt;以下两种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从正变负&lt;/li&gt;
&lt;li&gt;从负变正&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际上被视为：一个交易被关闭了（头寸从X变为0），一个新的交易被开启了（头寸从0变为Y）&lt;/p&gt;
&lt;p&gt;交易仅用于信息展示，用户无法调用其方法。&lt;/p&gt;
&lt;h2 id="参考"&gt;参考&lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;backtrader&lt;/span&gt;&lt;span style="color:#f92672"&gt;.&lt;/span&gt;trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Trade(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, tradeid&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, historyon&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;, value&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;, commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;追踪交易的生命周期：数量、价格、佣金（和价值？）。一个交易从0开始，可以增加和减少，如果回到0可以被认为是关闭的。交易可以是多头（正数）或空头（负数）。交易不支持反转（逻辑中不支持）&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;成员属性&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;唯一的交易标识符&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;Created&lt;/code&gt;, &lt;code&gt;Open&lt;/code&gt;, &lt;code&gt;Closed&lt;/code&gt;之一&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;tradeid&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;在创建订单时传递给订单的分组交易ID，订单的默认值为0&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;当前交易的数量&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;price&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;当前交易的价格&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;value&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;当前交易的价值&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;commission&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;当前累计的佣金&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;pnl&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;当前交易的盈亏（毛利）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;pnlcomm&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;当前交易的净盈亏（扣除佣金后的净利润）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;isclosed&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;记录最后一次更新是否关闭了交易（将交易数量设为零）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;isopen&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;记录任何更新是否开启了交易&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;justopened&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;如果交易刚刚开启&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;baropen&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;交易开启的bar&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;dtopen&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;交易开启的浮点编码日期时间，使用 &lt;code&gt;open_datetime&lt;/code&gt; 方法获取 Python &lt;code&gt;datetime.datetime&lt;/code&gt; 或使用平台提供的 &lt;code&gt;num2date&lt;/code&gt; 方法&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;barclose&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;交易关闭的bar&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;dtclose&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;交易关闭的浮点编码日期时间，使用 &lt;code&gt;close_datetime&lt;/code&gt; 方法获取 Python &lt;code&gt;datetime.datetime&lt;/code&gt; 或使用平台提供的 &lt;code&gt;num2date&lt;/code&gt; 方法&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;barlen&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;交易开启的bar数量&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;historyon&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;是否记录历史&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;history&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;包含每次“更新”事件更新后的状态和使用的参数的列表，历史记录的第一个条目是开启事件，最后一个条目是关闭事件&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>卖出操作</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/06-sell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/06-sell/</guid><description>&lt;h1 id="卖出操作"&gt;卖出操作&lt;a class="anchor" href="#%e5%8d%96%e5%87%ba%e6%93%8d%e4%bd%9c"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;了解如何进入市场（多头，&lt;code&gt;self.buy&lt;/code&gt;）后，还要一个“退出概念”，以及了解策略是否在市场中。&lt;/p&gt;
&lt;p&gt;本节将演示入场后如何退出市场。&lt;/p&gt;
&lt;p&gt;退出逻辑很简单，入场持有 5 根 bar 后（在第 6 根 bar 上）退出，无论是盈利还是亏损。另外，为了简化逻辑，仅在未入场时允许买入订单，即如果有持仓或者进行中的订单都不可买入。&lt;/p&gt;
&lt;h2 id="逻辑逻辑"&gt;逻辑逻辑&lt;a class="anchor" href="#%e9%80%bb%e8%be%91%e9%80%bb%e8%be%91"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;要完成这个逻辑，要能确认订单成交时间、成交所在位置、当前是否有进行中的订单以及是否有持仓。&lt;/p&gt;
&lt;h3 id="订单状态"&gt;订单状态&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95%e7%8a%b6%e6%80%81"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;订单确认状态通过 &lt;code&gt;Strategy&lt;/code&gt; 的订单状态变化 &lt;code&gt;notify_order&lt;/code&gt; 方法监听。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_order&lt;/span&gt;(self, order):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;订单状态有 &lt;code&gt;Accepted&lt;/code&gt;（已接受）、&lt;code&gt;Submitted&lt;/code&gt;（已提交）、&lt;code&gt;Completed&lt;/code&gt;（已成交）、&lt;code&gt;Margin&lt;/code&gt;（保证金不足）、&lt;code&gt;Rejected&lt;/code&gt;（已拒绝）。&lt;/p&gt;
&lt;p&gt;订单类中除了状态，还包括订单的其他信息，如执行价格 - &lt;code&gt;order.executed.price&lt;/code&gt;，已执行价值 - &lt;code&gt;order.executed.value&lt;/code&gt;，订单手续费 - &lt;code&gt;order.executed.comm&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;更多订单的信息，可查看 &lt;a href="https://www.poloxue.com/backtrader/docs/09-orders/01-general/"&gt;订单- Orders&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="成交位置"&gt;成交位置&lt;a class="anchor" href="#%e6%88%90%e4%ba%a4%e4%bd%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;策略对象提供了对默认数据源位置的访问，通过 &lt;code&gt;len(self)&lt;/code&gt; 即可获得。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;len(self)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;next 方法没有提供 &amp;ldquo;bar索引&amp;rdquo;，因此很难理解何时经过了 5 根bar，但调用对象的 len 方法，它会告诉你线的长度。&lt;/p&gt;
&lt;p&gt;我们只需记下订单完成时的长度，并查看当前长度是否距离其5根bar。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_order&lt;/span&gt;(self, order):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Completed]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bar_executed &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 其他代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(self) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bar_executed &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 卖出退场&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此处无 &amp;ldquo;时间&amp;rdquo; 或 &amp;ldquo;时间框架&amp;rdquo; 含义，仅仅是 bar 的数量。bar可以代表1分钟、1小时、1天、1周或任何其他时间周期。尽管我们知道数据源是每日的，但策略不对其做任何假设。&lt;/p&gt;
&lt;h3 id="进行中的订单"&gt;进行中的订单&lt;a class="anchor" href="#%e8%bf%9b%e8%a1%8c%e4%b8%ad%e7%9a%84%e8%ae%a2%e5%8d%95"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;是否有进行中的订单如何判断？&lt;/p&gt;</description></item><item><title>日志 Logging - Writter</title><link>https://www.poloxue.com/backtrader/docs/05-cerebro/06-logging-writer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/05-cerebro/06-logging-writer/</guid><description>&lt;h1 id="writer"&gt;Writer&lt;a class="anchor" href="#writer"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Writer类负责将以下内容写入流：&lt;/p&gt;
&lt;p&gt;数据源、策略、指标和观察者的CSV流。可以通过每个对象的&lt;code&gt;csv&lt;/code&gt;属性控制哪些对象实际进入CSV流（数据源和观察者默认为True，指标默认为False）。&lt;/p&gt;
&lt;p&gt;属性摘要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据源&lt;/li&gt;
&lt;li&gt;策略（线条和参数）&lt;/li&gt;
&lt;li&gt;指标/观察者（线条和参数）&lt;/li&gt;
&lt;li&gt;分析器（参数和分析结果）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;系统中定义了一个名为&lt;code&gt;WriterFile&lt;/code&gt;的Writer，可以通过以下方式添加：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置Cerebro的&lt;code&gt;writer&lt;/code&gt;参数为True，将实例化一个标准的&lt;code&gt;WriterFile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;Cerebro.addwriter(writerclass, **kwargs)&lt;/code&gt;，在回测执行期间，使用给定的kwargs实例化&lt;code&gt;writerclass&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于标准的&lt;code&gt;WriterFile&lt;/code&gt;默认不输出CSV，以下调用可以处理这一点：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addwriter(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;WriterFile, csv&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="参考"&gt;参考&lt;a class="anchor" href="#%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="class-backtraderwriterfile"&gt;&lt;code&gt;class backtrader.WriterFile()&lt;/code&gt;&lt;a class="anchor" href="#class-backtraderwriterfile"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;系统范围内的Writer类。&lt;/p&gt;
&lt;p&gt;可以通过以下参数进行参数化：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认&lt;/th&gt;
 &lt;th&gt;说明&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;out&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;写入的输出流，如果传递的是字符串，将使用参数内容作为文件名。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;close_out&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;如果 &lt;code&gt;out&lt;/code&gt; 是一个流，是否需要由Writer显式关闭。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;csv&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;在执行过程中，是否将数据源、策略、观察者和指标的CSV流写入输出流。可以通过每个对象的&lt;code&gt;csv&lt;/code&gt;属性控制哪些对象实际进入CSV流（数据源和观察者默认为True，指标默认为False）。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;csv_filternan&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;CSV流中清除nan值（用空字段替换）。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;csv_counter&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;是否应保持并输出实际输出行的计数器。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;indent&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;2&lt;/td&gt;
 &lt;td&gt;每个级别的缩进空格数。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;separators&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&amp;lsquo;=&amp;rsquo;, &amp;lsquo;-&amp;rsquo;, &amp;lsquo;+&amp;rsquo;, &amp;lsquo;*&amp;rsquo;, &amp;lsquo;.&amp;rsquo;, &amp;lsquo;~&amp;rsquo;, &amp;lsquo;&amp;quot;&amp;rsquo;, &amp;lsquo;^&amp;rsquo;, &amp;lsquo;#&amp;rsquo;&lt;/td&gt;
 &lt;td&gt;用于分隔部分/子部分的行分隔符字符。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;seplen&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;79&lt;/td&gt;
 &lt;td&gt;包括缩进在内的行分隔符的总长度。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;rounding&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;将浮点数舍入到的小数位数。如果为None，则不执行舍入。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title>期货和现货补偿</title><link>https://www.poloxue.com/backtrader/docs/09-orders/06-future-spot-compensation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/09-orders/06-future-spot-compensation/</guid><description>&lt;h1 id="期货和现货补偿"&gt;期货和现货补偿&lt;a class="anchor" href="#%e6%9c%9f%e8%b4%a7%e5%92%8c%e7%8e%b0%e8%b4%a7%e8%a1%a5%e5%81%bf"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;版本 1.9.32.116 增加了对社区提出的一个有趣用例的支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用期货启动交易，包括实物交割；&lt;/li&gt;
&lt;li&gt;使用指标进行分析；&lt;/li&gt;
&lt;li&gt;如有必要，通过操作现货价格来平仓，从而有效地取消实物交割，无论是收货还是交货（希望能获利）&lt;/li&gt;
&lt;li&gt;期货在操作现货价格的当天到期&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台接收来自两个不同资产的数据点&lt;/li&gt;
&lt;li&gt;平台必须以某种方式理解这些资产是相关的，并且现货价格的操作将关闭在期货上开启的头寸&lt;/li&gt;
&lt;li&gt;实际上，期货并未平仓，只是实物交割被补偿了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用这种补偿概念，backtrader 增加了一种方式，让用户告知平台一个数据流上的操作将对另一个数据流产生补偿效果。使用模式如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFavouriteDataFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;futurename&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFavouriteDataFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;spotname&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compensate(data0) &lt;span style="color:#75715e"&gt;# 告诉系统 data1 的操作会影响 data0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data1)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="综合示例"&gt;综合示例&lt;a class="anchor" href="#%e7%bb%bc%e5%90%88%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;一个示例胜过千言万语，所以让我们把所有的部分结合起来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 backtrader 源代码中的一个标准示例数据源。这将是期货数据&lt;/li&gt;
&lt;li&gt;通过重新使用相同的数据源并添加一个随机移动价格的过滤器来模拟一个类似但不同的价格，从而创建价差。如下简单地实现：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 更改收盘价的过滤器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;close_changer&lt;/span&gt;(data, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;50.0&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; random&lt;span style="color:#f92672"&gt;.&lt;/span&gt;randint(&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 数据流长度未变&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在同一轴上绘图会混淆默认包含的 BuyObserver 标记，因此将禁用标准观察者并手动重新添加以使用不同的数据标记。&lt;/p&gt;
&lt;p&gt;头寸将随机进入并在 10 天后退出。&lt;/p&gt;
&lt;p&gt;这并不匹配期货到期期限，但这只是为了实现功能，而不是检查交易日历。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果要在期货到期日模拟现货价格的执行，需要激活“cheat-on-close”以确保订单在期货到期时执行。这在本示例中不需要，因为到期是随机选择的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;买操作在 data0 上执行&lt;/li&gt;
&lt;li&gt;卖操作在 data1 上执行&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;St&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;obs&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BuySell(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data0, barplot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 为不同数据添加不同标记&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; BuySellArrows(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1, barplot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 为不同数据添加不同标记&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;position:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; random&lt;span style="color:#f92672"&gt;.&lt;/span&gt;randint(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;entered &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# 在市场中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (len(self) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;entered) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell(data&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="执行"&gt;执行：&lt;a class="anchor" href="#%e6%89%a7%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./future-spot.py --no-comp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到如下图形输出。&lt;/p&gt;</description></item><item><title>重采样</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/06-datafeed-resampling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/06-datafeed-resampling/</guid><description>&lt;h1 id="重采样"&gt;重采样&lt;a class="anchor" href="#%e9%87%8d%e9%87%87%e6%a0%b7"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;当数据只有单一时间框架可用，而分析要在不同时间框架上进行，就需要进行数据重采样。&amp;ldquo;重采样&amp;rdquo; 实际应称为 &amp;ldquo;上采样&amp;rdquo;，因为它是从源时间框架到更大的时间框架（如：从天到周）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 内置了通过过滤器对象进行重采样的支持。有几种方法可以实现这一点，但有一个简单的接口可以实现，它代替通过 &lt;code&gt;cerebro.adddata(data)&lt;/code&gt; 将数据放入系统中，使用 &lt;code&gt;resampledata&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有两个主要选项可以控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改时间框架&lt;/li&gt;
&lt;li&gt;压缩条数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要实现这些功能，请在调用&lt;code&gt;resampledata&lt;/code&gt;时使用以下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeframe&lt;/code&gt;（默认值：&lt;code&gt;bt.TimeFrame.Days&lt;/code&gt;）：目标时间框架，必须等于或大于源时间框架。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compression&lt;/code&gt;（默认值：1）：将选定的值“n”压缩为1个条。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们来看一个从每日到每周的示例，通过手工编写的脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./resampling-example.py --timeframe weekly --compression &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以将其与原始每日数据进行比较：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./resampling-example.py --timeframe daily --compression &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现这些功能的步骤有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先用 &lt;code&gt;cerebro.adddata&lt;/code&gt; 加载原始数据；&lt;/li&gt;
&lt;li&gt;使用带参数的&lt;code&gt;resampledata&lt;/code&gt; 传递数据给&lt;code&gt;cerebro&lt;/code&gt;：&lt;code&gt;timeframe&lt;/code&gt; 和 &lt;code&gt;compression&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 加载数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataname &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-day-001.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 方便的字典用于时间框架参数转换&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tframes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; daily&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; weekly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Weeks,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; monthly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Months)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 添加重采样数据而不是原始数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;tframes[args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timeframe],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; compression&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compression)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设，将时间框架从每日更改为每周，然后将 3 条压缩为 1 条。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./resampling-example.py --timeframe weekly --compression &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从原始的 256 个每日 Bar 中，最终得到 18 个 3 周的 Bar。因为一年是 52 周，而 52 / 3 = 17.33，因此有18个 Bar。&lt;/p&gt;</description></item><item><title>交易监控</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/07-commission/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/07-commission/</guid><description>&lt;h1 id="交易监控"&gt;交易监控&lt;a class="anchor" href="#%e4%ba%a4%e6%98%93%e7%9b%91%e6%8e%a7"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;我们已经知道如何使用 backtrader 买卖交易了。本节将介绍 backtrader 如何监控它每笔交易，如成本、利润和佣金。由于佣金的存在，利润还分为毛利润和净利润&lt;/p&gt;
&lt;h2 id="设置佣金"&gt;设置佣金&lt;a class="anchor" href="#%e8%ae%be%e7%bd%ae%e4%bd%a3%e9%87%91"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;让我们先设置一个合理佣金率 - 0.1% （买入和卖出都要收取的），一行代码即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 0.1% ... 除以 100 以去掉百分号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcommission(commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.001&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="订单的成本和佣金"&gt;订单的成本和佣金&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95%e7%9a%84%e6%88%90%e6%9c%ac%e5%92%8c%e4%bd%a3%e9%87%91"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;订单的成本和佣金可从订单回调 &lt;code&gt;notify_order&lt;/code&gt; 中获取，它的 Order 参数 &lt;code&gt;order.executed.comm&lt;/code&gt; 即为订单的已执行佣金，&lt;code&gt;order.executed.value&lt;/code&gt; 即投入的成本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_order&lt;/span&gt;(self, order):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Completed]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isbuy():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;买入执行，价格：&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;，成本：&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;，佣金 &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;卖出执行，价格：&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;，成本：&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;，佣金 &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="交易记录计算利润"&gt;交易记录计算利润&lt;a class="anchor" href="#%e4%ba%a4%e6%98%93%e8%ae%b0%e5%bd%95%e8%ae%a1%e7%ae%97%e5%88%a9%e6%b6%a6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于利润的计算，使用交易记录会更简单，所谓成交记录，即成交撮合一笔记录一次。与订单类似，我们可通过 &lt;code&gt;notify_trade&lt;/code&gt; 获取成交记录。它的回调参数是 Trade 类对象，利润相关属性有 &lt;code&gt;trade.pnl&lt;/code&gt;（毛利润）和 &lt;code&gt;trade.pnlcomm&lt;/code&gt;（净利润）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_trade&lt;/span&gt;(self, trade):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isclosed:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;利润记录，毛利润 &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;，净利润 &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pnl, trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pnlcomm))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;因为只有是平仓交易，才有利润的说法，故通过 &lt;code&gt;trade.isclosed&lt;/code&gt; 判断在平仓交易的情况才输出利润信息。&lt;/p&gt;</description></item><item><title>数据回放</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/07-datafeed-replay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/07-datafeed-replay/</guid><description>&lt;h1 id="数据回放"&gt;数据回放&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e5%9b%9e%e6%94%be"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;随着时间的推移，单纯对已经完成关闭的 Bar 进行策略测试已不再足够，数据回放应运而生。假设，策略在时间框架X上操作（例如：每日），数据在更小的时间框架Y（例如：1分钟）可用。&lt;/p&gt;
&lt;p&gt;数据回放的作用正如其名，使用1分钟数据回放每日条。虽然，这并不能完全再现市场发展，但比单独观察每日完成关闭的 Bar 要好得多。如果策略在每日 Bar 形成期间实时操作，那么近似 Bar 形成过程模拟策略在实际条件下的表现。&lt;/p&gt;
&lt;p&gt;要实现数据回放，只按常规使用 backtrader 即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载数据源；&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;replaydata&lt;/code&gt; 将数据传递给&lt;code&gt;cerebro&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;添加策略；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 数据回放不支持预加载，因为每个 Bar 实际上是实时构建的，任何 &lt;code&gt;Cerebro&lt;/code&gt; 实例中都会自动禁用预加载。&lt;/p&gt;
&lt;p&gt;可传递给&lt;code&gt;replaydata&lt;/code&gt;的参数：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;timeframe&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;bt.TimeFrame.Days&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;目标时间框架，必须等于或大于源时间框架&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;compression&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;1&lt;/td&gt;
 &lt;td&gt;将选定值“n”压缩为1条&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;扩展参数（若无特别需要请勿修改）：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;bar2edge&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;使用时间边界作为闭合条的目标。例如，使用“ticks -&amp;gt; 5 seconds”时，生成的5秒条将对齐到xx:00、xx:05、xx:10……&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;adjbartime&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;使用边界的时间调整传递的重采样条的时间，而不是最后看到的时间戳。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;rightedge&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;使用时间边界的右边缘设置时间。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;举例说明，标准的 2006 年每日数据在每周基础上进行回放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最终会有 52 个 Bar，即每周一个；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cerebro&lt;/code&gt; 将调用 &lt;code&gt;prenext&lt;/code&gt; 和 &lt;code&gt;next&lt;/code&gt; 共计255次，这是原始数量每日 Bar；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;诀窍在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在每周 Bar 形成时，策略的长度（&lt;code&gt;len(self)&lt;/code&gt;）保持不变。&lt;/li&gt;
&lt;li&gt;每过一周，长度增加1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是示例，但首先是测试脚本的主要部分，其中加载数据并将其传递给&lt;code&gt;cerebro&lt;/code&gt;进行回放，然后运行。&lt;/p&gt;</description></item><item><title>跟踪止损（限价）</title><link>https://www.poloxue.com/backtrader/docs/09-orders/07-stop-trails/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/09-orders/07-stop-trails/</guid><description>&lt;h1 id="跟踪止损限价"&gt;跟踪止损（限价）&lt;a class="anchor" href="#%e8%b7%9f%e8%b8%aa%e6%ad%a2%e6%8d%9f%e9%99%90%e4%bb%b7"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;版本 1.9.35.116 增加了跟踪止损和跟踪止损限价订单执行类型到回测工具中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，这只在回测中实现，尚未在实时经纪商中实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，更新至版本 1.9.36.116。Interactive Brokers 支持跟踪止损、跟踪止损限价和 OCO。&lt;/p&gt;
&lt;p&gt;OCO 始终将组中的第一个订单指定为参数 oco&lt;/p&gt;
&lt;p&gt;跟踪止损限价：经纪商模拟和 IB 经纪商具有相同的行为。指定：price 作为初始止损触发价格（也指定 trailamount），然后 plimit 作为初始限价。两者之间的差值将决定 limitoffset（限价与止损触发价格之间的距离）&lt;/p&gt;
&lt;p&gt;使用模式完全集成到策略实例的标准买、卖和平仓市场操作方法中。需要注意：&lt;/p&gt;
&lt;p&gt;指明所需的执行类型，如 &lt;code&gt;exectype=bt.Order.StopTrail&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以及跟踪价格是否需要用固定距离或百分比距离计算&lt;/p&gt;
&lt;p&gt;固定距离：&lt;code&gt;trailamount=10&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;百分比距离：&lt;code&gt;trailpercent=0.02&lt;/code&gt;（即：2%）&lt;/p&gt;
&lt;p&gt;如果通过发出买单进入市场多头，那么带有 &lt;code&gt;StopTrail&lt;/code&gt; 和 &lt;code&gt;trailamount&lt;/code&gt; 的卖单会这样做：&lt;/p&gt;
&lt;p&gt;如果未指定价格，则使用最新的收盘价&lt;/p&gt;
&lt;p&gt;从价格中减去 trailamount 以找到止损（或触发）价格&lt;/p&gt;
&lt;p&gt;经纪商的下一次迭代检查是否触及触发价格&lt;/p&gt;
&lt;p&gt;如果是：订单将以市场执行类型的方式执行&lt;/p&gt;
&lt;p&gt;如果否，使用最新的收盘价重新计算止损价格，并减去 trailamount 距离&lt;/p&gt;
&lt;p&gt;如果新价格上涨，则更新&lt;/p&gt;
&lt;p&gt;如果新价格下跌（或不变），则忽略&lt;/p&gt;
&lt;p&gt;也就是说：跟踪止损价格随着价格上涨而跟随，但如果价格开始下跌则保持不变，以潜在地确保利润。&lt;/p&gt;
&lt;p&gt;如果进入市场时发出的是卖单，那么发出带 &lt;code&gt;StopTrail&lt;/code&gt; 的买单会执行相反的操作，即：价格会向下跟随。&lt;/p&gt;
&lt;p&gt;一些使用模式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 对于向下的跟踪止损&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 将使用最后价格作为参考&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StopTrail, trailamount&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 或&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy(size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StopTrail, price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10.50&lt;/span&gt;, trailamount&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 对于向上的跟踪止损&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 将使用最后价格作为参考&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell(size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StopTrail, trailamount&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 或&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell(size&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, exectype&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StopTrail, price&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10.50&lt;/span&gt;, trailamount&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.25&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以指定 &lt;code&gt;trailpercent&lt;/code&gt; 而不是 &lt;code&gt;trailamount&lt;/code&gt;，并将距离价格的距离计算为价格的百分比&lt;/p&gt;</description></item><item><title>参数定义</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/08-parameters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/08-parameters/</guid><description>&lt;h1 id="参数定义"&gt;参数定义&lt;a class="anchor" href="#%e5%8f%82%e6%95%b0%e5%ae%9a%e4%b9%89"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;前面的案例中，参数都是硬编码在策略中。本节将介绍如何在 backtrader 自定义参数。&lt;/p&gt;
&lt;h2 id="定义参数"&gt;定义参数&lt;a class="anchor" href="#%e5%ae%9a%e4%b9%89%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;策略参数的定义非常简单，如在策略中定义两个参数：&lt;code&gt;myparam&lt;/code&gt; 和 &lt;code&gt;exitbars&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;myparam&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;exitbars&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;),)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参数 &lt;code&gt;myparam&lt;/code&gt; 的默认值是 27，&lt;code&gt;exitbars&lt;/code&gt; 的默认值是 5。&lt;/p&gt;
&lt;h2 id="配置参数"&gt;配置参数&lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们可以在添加策略时修改参数默认值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Add a strategy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(TestStrategy, myparam&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;, exitbars&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="使用参数"&gt;使用参数&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;策略代码中直接通过 &lt;code&gt;self.params.param_name &lt;/code&gt; 即可调用参数。&lt;/p&gt;
&lt;p&gt;如下代码，通过参数 &lt;code&gt;exitbars&lt;/code&gt; 修改退出逻辑：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(self) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bar_executed &lt;span style="color:#f92672"&gt;+&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;exitbars):&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="完整示例"&gt;完整示例&lt;a class="anchor" href="#%e5%ae%8c%e6%95%b4%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;exitbars&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(self, txt, dt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dt &lt;span style="color:#f92672"&gt;or&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (dt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isoformat(), txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buyprice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buycomm &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_order&lt;/span&gt;(self, order):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Submitted, order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Accepted]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Completed]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isbuy():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;BUY EXECUTED, Price: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Cost: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Comm &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buyprice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buycomm &lt;span style="color:#f92672"&gt;=&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;SELL EXECUTED, Price: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Cost: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Comm &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bar_executed &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;elif&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Canceled, order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Margin, order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Rejected]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Order Canceled/Margin/Rejected&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_trade&lt;/span&gt;(self, trade):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isclosed:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;OPERATION PROFIT, GROSS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;.2&lt;/span&gt;f, NET &lt;span style="color:#f92672"&gt;%&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;.2&lt;/span&gt;&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39; %&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pnl, trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pnlcomm))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Close, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;position:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;BUY CREATE, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(self) &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bar_executed &lt;span style="color:#f92672"&gt;+&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;exitbars):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;SELL CREATE, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>数据滚动</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/08-datafeed-rollover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/08-datafeed-rollover/</guid><description>&lt;h1 id="滚动"&gt;滚动&lt;a class="anchor" href="#%e6%bb%9a%e5%8a%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;并非所有提供商都提供连续期货合约数据。有时提供的数据是仍在交易的到期合约的有效数据。这种情况下，进行回测会变得很不方便，因为数据分散在多个不同的合约上，并且这些合约还会在时间上重叠。&lt;/p&gt;
&lt;p&gt;如果能够正确地将这些过去的合约数据连接成一个连续的数据流，可以缓解这种痛苦。问题在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有一种最佳方法将不同到期日期的数据连接成一个连续的期货数据&lt;/li&gt;
&lt;li&gt;有些文献，如 &lt;a href="http://www.sierrachart.com/index.php?page=doc/ChangingFuturesContract.html"&gt;SierraChart的文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="滚动数据源"&gt;滚动数据源&lt;a class="anchor" href="#%e6%bb%9a%e5%8a%a8%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;从backtrader 1.8.10.99开始，增加了将不同到期日期的期货数据连接成连续期货的功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dataN &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;ExpiryN&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drollover &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rolloverdata(data0, data1, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;, dataN, name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;MyRoll&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class='book-hint '&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**kwargs&lt;/code&gt;将在下文解释&lt;/li&gt;
&lt;li&gt;也可以直接访问RollOver数据源（如果需要子类化，这是很有帮助的）：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dataN &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;ExpiryN&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drollover &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;RollOver(data0, data1, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;, dataN, dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;MyRoll&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(drollover)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class='book-hint '&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用RollOver时，使用&lt;code&gt;dataname&lt;/code&gt;参数分配名称，这是所有数据源用于传递名称/代码的标准参数。在这种情况下，它被重用以给整个滚动的期货集分配一个通用名称。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;cerebro.rolloverdata&lt;/code&gt;，使用&lt;code&gt;name&lt;/code&gt;参数为数据源分配名称，这是该方法的一个命名参数。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Rollover 的使用可概括为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按通常方式创建数据源，但&lt;strong&gt;不要&lt;/strong&gt;将它们添加到cerebro&lt;/li&gt;
&lt;li&gt;将这些数据源作为输入传递给&lt;code&gt;bt.feeds.RollOver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也传递一个&lt;code&gt;dataname&lt;/code&gt;，主要用于识别目的&lt;/li&gt;
&lt;li&gt;然后将这个滚动的数据源添加到cerebro&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="滚动的选项"&gt;滚动的选项&lt;a class="anchor" href="#%e6%bb%9a%e5%8a%a8%e7%9a%84%e9%80%89%e9%a1%b9"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;提供两个参数来控制滚动过程：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;checkdate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;必须是一个可调用对象，签名：&lt;code&gt;checkdate(dt, d)&lt;/code&gt;&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- &lt;code&gt;dt&lt;/code&gt; 一个&lt;code&gt;datetime.datetime&lt;/code&gt;对象&lt;/li&gt; &lt;li&gt;- &lt;code&gt;d&lt;/code&gt;，当前活跃期货的数据源&lt;/li&gt;&lt;/ul&gt; 预期返回值&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- &lt;code&gt;True&lt;/code&gt;：只要可调用对象返回此值，就可以切换到下一个期货 &lt;/li&gt;&lt;li&gt;- &lt;code&gt;False&lt;/code&gt;：不能进行到期转换&lt;/li&gt;&lt;/ul&gt;例如，如果某商品在3月的第三个星期五到期，&lt;code&gt;checkdate&lt;/code&gt;可以在到期所在的一整周内返回&lt;code&gt;True&lt;/code&gt;。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;checkcondition&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;仅当&lt;code&gt;checkdate&lt;/code&gt;返回&lt;code&gt;True&lt;/code&gt;时才会调用此参数。如果为&lt;code&gt;None&lt;/code&gt;，则内部评估为&lt;code&gt;True&lt;/code&gt;（执行滚动）。否则，它必须是一个可调用对象，签名是 &lt;code&gt;checkcondition(d0, d1)&lt;/code&gt; &lt;ul&gt;&lt;li/&gt;- &lt;code&gt;d0&lt;/code&gt;是当前活跃期货的数据源&lt;/li&gt;&lt;li&gt;- &lt;code&gt;d1&lt;/code&gt;是下一个到期的数据源&lt;/li&gt;&lt;/ul&gt;预期返回值：&lt;ul&gt;&lt;li&gt;- &lt;code&gt;True&lt;/code&gt;：滚动到下一个期货&lt;/li&gt;&lt;li&gt;- &lt;code&gt;False&lt;/code&gt;：不能进行到期转换&lt;/li&gt;&lt;/ul&gt;例如，可以通过&lt;code&gt;checkcondition&lt;/code&gt;判断，如果&lt;code&gt;d0&lt;/code&gt;的交易量小于&lt;code&gt;d1&lt;/code&gt;，则进行到期转换。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="子类化rollover"&gt;子类化RollOver&lt;a class="anchor" href="#%e5%ad%90%e7%b1%bb%e5%8c%96rollover"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果指定的可调用对象还不够用，可以子类化&lt;code&gt;RollOver&lt;/code&gt;。需要子类化的方法有：&lt;/p&gt;</description></item><item><title>技术指标</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/09-indicators/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/09-indicators/</guid><description>&lt;h1 id="技术指标indicators"&gt;技术指标（Indicators）&lt;a class="anchor" href="#%e6%8a%80%e6%9c%af%e6%8c%87%e6%a0%87indicators"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节将介绍如何使用技术指标，将技术指标作为入场和出场信号。我们将用简单移动平均线（Simple Moving Average），或称 SMA，作为演示指标。SMA 是一个非常简单的技术指标，计算一定周期的价格均值。&lt;/p&gt;
&lt;h2 id="交易规则"&gt;交易规则&lt;a class="anchor" href="#%e4%ba%a4%e6%98%93%e8%a7%84%e5%88%99"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基于 SMA 交易规则，定义如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;入场条件：&lt;/strong&gt; 当收盘价大于最新的 SMA，则入场买入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;出场条件：&lt;/strong&gt; 当持有头寸，当收盘价小于 SMA，则出场卖出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面章节的策略代码大部分可复用，现在重点关注如何计算技术指标。&lt;/p&gt;
&lt;h2 id="指标计算"&gt;指标计算&lt;a class="anchor" href="#%e6%8c%87%e6%a0%87%e8%ae%a1%e7%ae%97"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;backtrader 下的 &lt;code&gt;indicators&lt;/code&gt; 模块内置了大量技术指标的计算方法，如 SMA 简单移动均线的计算。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MovingAverageSimple(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;maperiod)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上代码中参数 &lt;code&gt;self.params.maperiod&lt;/code&gt; 就是 SMA 的均线周期。&lt;/p&gt;
&lt;p&gt;注：如果安装了 talib，backtrader 也集成了 talib 的支持，详情文档 &lt;a href="https://www.poloxue.com/backtrader/docs/08-indicators/04-talib/"&gt;指标-TALib&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="条件判断"&gt;条件判断&lt;a class="anchor" href="#%e6%9d%a1%e4%bb%b6%e5%88%a4%e6%96%ad"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;现在基于 &lt;code&gt;self.sma&lt;/code&gt; 判断进出场条件。&lt;/p&gt;
&lt;p&gt;为了简化代码，这里只考虑 SMA 的判断逻辑，在完整实例中会包含所有情况。&lt;/p&gt;
&lt;p&gt;入场判断：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;出场判断：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="策略代码"&gt;策略代码&lt;a class="anchor" href="#%e7%ad%96%e7%95%a5%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;起始现金 1000 货币单位。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime &lt;span style="color:#75715e"&gt;# For datetime objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os.path &lt;span style="color:#75715e"&gt;# To manage paths&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys &lt;span style="color:#75715e"&gt;# To find out the script name (in argv[0])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;策略部分：&lt;/p&gt;</description></item><item><title>Yahoo 数据源说明</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/10-datafeed-yahoo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/10-datafeed-yahoo/</guid><description>&lt;h1 id="yahoo-数据源说明"&gt;Yahoo 数据源说明&lt;a class="anchor" href="#yahoo-%e6%95%b0%e6%8d%ae%e6%ba%90%e8%af%b4%e6%98%8e"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 2017 年 5 月，Yahoo 停用了现有的 CSV 格式的历史数据下载 API。&lt;/p&gt;
&lt;p&gt;很快，新 API（这里称为 v7）被标准化并已实现。&lt;/p&gt;
&lt;p&gt;这也带来了实际 CSV 下载格式的变化。&lt;/p&gt;
&lt;h4 id="使用-v7-api格式"&gt;使用 v7 API/格式&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8-v7-api%e6%a0%bc%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;从版本 1.9.49.116 开始，这是默认行为。可以简单地选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;YahooFinanceData&lt;/strong&gt; 用于在线下载&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YahooFinanceCSVData&lt;/strong&gt; 用于离线下载的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="使用旧的-api格式"&gt;使用旧的 API/格式&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%97%a7%e7%9a%84-api%e6%a0%bc%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;要使用旧的 API/格式，可以：&lt;/p&gt;
&lt;p&gt;在线 Yahoo 数据源实例化如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; version&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;离线 Yahoo 数据源实例化如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; version&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可能在线服务会恢复（服务在没有任何公告的情况下被停用……它也可能会恢复）&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;仅用于在变更前下载的离线文件，也可以这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooLegacyCSV(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新的 &lt;strong&gt;YahooLegacyCSV&lt;/strong&gt; 简化了使用 &lt;code&gt;version=''&lt;/code&gt; 的操作。&lt;/p&gt;</description></item><item><title>可视化</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/10-plotting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/10-plotting/</guid><description>&lt;h1 id="可视化"&gt;可视化&lt;a class="anchor" href="#%e5%8f%af%e8%a7%86%e5%8c%96"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;通过 &lt;code&gt;print&lt;/code&gt; 输出每个 bar 的信息不利于我们阅读，我们还是更倾向于图表的视觉效果。backtrader 内置了图表绘制的能力，一行代码即可绘图。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请确保在调用&lt;code&gt;cerebro.run()&lt;/code&gt;之后执行，还有，&lt;code&gt;backtrader&lt;/code&gt; 的绘图能力依赖 matplotlib。&lt;/p&gt;
&lt;h2 id="演示"&gt;演示&lt;a class="anchor" href="#%e6%bc%94%e7%a4%ba"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了展示出基本的价格和收益外，我们将执行以下操作以展示绘图的功能和配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加一个 EMA（指数移动平均线），默认情况下，它会与数据一起绘制。&lt;/li&gt;
&lt;li&gt;添加一个 WMA（移动平均线加权），配置在子图绘制（即使没有意义）。&lt;/li&gt;
&lt;li&gt;添加一个 StochasticSlow（慢速随机指标），不更改默认设置。&lt;/li&gt;
&lt;li&gt;添加一个 MACD，不更改默认设置。&lt;/li&gt;
&lt;li&gt;添加一个ATR，更改默认设置以避免绘图。&lt;/li&gt;
&lt;li&gt;添加一个 RSI，不更改默认设置。&lt;/li&gt;
&lt;li&gt;在 RSI 上添加一个 SMA 指标，不更改默认设置，且与RSI一起绘制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在策略的 &lt;code&gt;__init__&lt;/code&gt; 方法中添加的所有内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Indicators for the plotting show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ExponentialMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;WeightedMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25&lt;/span&gt;)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;subplot &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StochasticSlow(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MACDHisto(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rsi &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;RSI(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SmoothedMovingAverage(rsi, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ATR(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;即使将指标没有赋值到策略成员变量（如&lt;code&gt;self.sma = MovingAverageSimple…&lt;/code&gt;），它们也会被注册到策略中，成为图表的一部分。&lt;/p&gt;
&lt;p&gt;示例中，只有RSI被添加到临时变量rsi中，其目的是要在其上创建一个 SmoothedMovingAverage。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; __future__ &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (absolute_import, division, print_function,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unicode_literals)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime &lt;span style="color:#75715e"&gt;# For datetime objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os.path &lt;span style="color:#75715e"&gt;# To manage paths&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys &lt;span style="color:#75715e"&gt;# To find out the script name (in argv[0])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;maperiod&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;15&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(self, txt, dt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dt &lt;span style="color:#f92672"&gt;or&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (dt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isoformat(), txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buyprice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buycomm &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;maperiod)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Indicators for the plotting show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ExponentialMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;WeightedMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;25&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; subplot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;StochasticSlow(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MACDHisto(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; rsi &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;RSI(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SmoothedMovingAverage(rsi, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ATR(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], plot&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_order&lt;/span&gt;(self, order):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Submitted, order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Accepted]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Completed]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isbuy():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;BUY EXECUTED, Price: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Cost: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Comm &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buyprice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buycomm &lt;span style="color:#f92672"&gt;=&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;SELL EXECUTED, Price: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Cost: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, Comm &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bar_executed &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;elif&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Canceled, order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Margin, order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Rejected]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Order Canceled/Margin/Rejected&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_trade&lt;/span&gt;(self, trade):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isclosed:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;OPERATION PROFIT, GROSS &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, NET &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pnl, trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;pnlcomm))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;Close, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;position:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;BUY CREATE, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;SELL CREATE, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(TestStrategy)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; modpath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dirname(os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;abspath(sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(modpath, &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/orcl-1995-2014.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fromdate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; todate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reverse&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcash(&lt;span style="color:#ae81ff"&gt;1000.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addsizer(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedSize, stake&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcommission(commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Starting Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;Final Portfolio Value: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Plot the result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行后的输出：&lt;/p&gt;</description></item><item><title>Pandas 数据源示例</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/11-datafeed-pandas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/11-datafeed-pandas/</guid><description>&lt;h1 id="pandas-数据源示例"&gt;Pandas 数据源示例&lt;a class="anchor" href="#pandas-%e6%95%b0%e6%8d%ae%e6%ba%90%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，需要安装 pandas 及其依赖项。支持 Pandas Dataframe 对很多人来说很重要，他们依赖于 Pandas 提供的不同数据源（包括 CSV）的解析代码及其他功能。&lt;/p&gt;
&lt;h2 id="数据源的重要声明"&gt;数据源的重要声明&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e7%9a%84%e9%87%8d%e8%a6%81%e5%a3%b0%e6%98%8e"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些只是声明。不要盲目复制此代码。请参见下面的实际用法示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PandasData&lt;/span&gt;(feed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ``dataname`` 参数继承自 ``feed.DataBase`` 是 pandas DataFrame
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# datetime 的可能值（必须始终存在）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# None : datetime 是 Pandas Dataframe 中的 &amp;#34;index&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# -1 : 自动检测位置或大小写相同的名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# &amp;gt;= 0 : pandas dataframe 中列的数值索引&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# string : pandas dataframe 中的列名（作为索引）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 下面是可能的值：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# None : 列不存在&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# -1 : 自动检测位置或大小写相同的名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# &amp;gt;= 0 : pandas dataframe 中列的数值索引&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# string : pandas dataframe 中的列名（作为索引）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;high&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;low&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;volume&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;openinterest&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述 PandasData 类的片段展示了关键点：&lt;/p&gt;</description></item><item><title>策略优化</title><link>https://www.poloxue.com/backtrader/docs/03-quickstart/11-optimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/03-quickstart/11-optimization/</guid><description>&lt;h1 id="策略优化"&gt;策略优化&lt;a class="anchor" href="#%e7%ad%96%e7%95%a5%e4%bc%98%e5%8c%96"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;许多交易书籍中提到，每个市场和每个交易的股票（或商品等）都有不同的节奏，没有一种适合所有的策略。&lt;/p&gt;
&lt;p&gt;在绘图示例前，当策略开始使用一个指标，周期默认值为 15 个 bar。这是一个策略参数，可以用于优化，改变参数值以找出哪个更适合你的市场。&lt;/p&gt;
&lt;blockquote class='book-hint '&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：关于优化及其优缺点的文献很多。但建议基本是：不要过度优化。如果交易思路不健全，优化可能会产生一个仅对回测数据集有效的正面结果。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;示例修改为优化简单移动平均线的周期。为了清晰起见，已删除与买卖订单相关的任何输出。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; datetime &lt;span style="color:#75715e"&gt;#For datetime objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os.path &lt;span style="color:#75715e"&gt;# To manage paths&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys &lt;span style="color:#75715e"&gt;# To find out the script name (in argv[0])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;maperiod&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;15&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;printlog&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(self, txt, dt&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;, doprint&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;printlog &lt;span style="color:#f92672"&gt;or&lt;/span&gt; doprint:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dt &lt;span style="color:#f92672"&gt;or&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;date(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;, &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%s&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; (dt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isoformat(), txt))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buyprice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buycomm &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;maperiod)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_order&lt;/span&gt;(self, order):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Submitted, order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Accepted]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;status &lt;span style="color:#f92672"&gt;in&lt;/span&gt; [order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Completed]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isbuy():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buyprice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;price
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buycomm &lt;span style="color:#f92672"&gt;=&lt;/span&gt; order&lt;span style="color:#f92672"&gt;.&lt;/span&gt;executed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;comm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;bar_executed &lt;span style="color:#f92672"&gt;=&lt;/span&gt; len(self)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;notify_trade&lt;/span&gt;(self, trade):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; trade&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isclosed:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;position:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;buy()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataclose[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;order &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;stop&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;log(&lt;span style="color:#e6db74"&gt;&amp;#39;(MA Period &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%2d&lt;/span&gt;&lt;span style="color:#e6db74"&gt;) Ending Value &lt;/span&gt;&lt;span style="color:#e6db74"&gt;%.2f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;maperiod, self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getvalue()), doprint&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; strats &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;optstrategy(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TestStrategy,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; maperiod&lt;span style="color:#f92672"&gt;=&lt;/span&gt;range(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; modpath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dirname(os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;abspath(sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(modpath, &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/orcl-1995-2014.txt&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fromdate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; todate&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(&lt;span style="color:#ae81ff"&gt;2000&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;31&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; reverse&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcash(&lt;span style="color:#ae81ff"&gt;1000.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addsizer(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sizers&lt;span style="color:#f92672"&gt;.&lt;/span&gt;FixedSize, stake&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker&lt;span style="color:#f92672"&gt;.&lt;/span&gt;setcommission(commission&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0.0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run(maxcpus&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;策略优化调用不再是 &lt;code&gt;addstrategy&lt;/code&gt;，而是 &lt;code&gt;optstrategy&lt;/code&gt;，且传递的是值的范围，而非单一值。&lt;/p&gt;</description></item><item><title>数据源参考</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/12-datafeed-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/12-datafeed-reference/</guid><description>&lt;h3 id="数据源参考"&gt;数据源参考&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="abstractdatabase"&gt;AbstractDataBase&lt;a class="anchor" href="#abstractdatabase"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;数据行（Lines）:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;volume&lt;/li&gt;
&lt;li&gt;openinterest&lt;/li&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数（Params）:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dataname (None)&lt;/li&gt;
&lt;li&gt;name ()&lt;/li&gt;
&lt;li&gt;compression (1)&lt;/li&gt;
&lt;li&gt;timeframe (5)&lt;/li&gt;
&lt;li&gt;fromdate (None)&lt;/li&gt;
&lt;li&gt;todate (None)&lt;/li&gt;
&lt;li&gt;sessionstart (None)&lt;/li&gt;
&lt;li&gt;sessionend (None)&lt;/li&gt;
&lt;li&gt;filters ([])&lt;/li&gt;
&lt;li&gt;tz (None)&lt;/li&gt;
&lt;li&gt;tzinput (None)&lt;/li&gt;
&lt;li&gt;qcheck (0.0)&lt;/li&gt;
&lt;li&gt;calendar (None)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="backtradercsvdata"&gt;BacktraderCSVData&lt;a class="anchor" href="#backtradercsvdata"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;解析用于测试的自定义 CSV 数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特定参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dataname: 要解析的文件名或类文件对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据行：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;volume&lt;/li&gt;
&lt;li&gt;openinterest&lt;/li&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dataname (None)&lt;/li&gt;
&lt;li&gt;name ()&lt;/li&gt;
&lt;li&gt;compression (1)&lt;/li&gt;
&lt;li&gt;timeframe (5)&lt;/li&gt;
&lt;li&gt;fromdate (None)&lt;/li&gt;
&lt;li&gt;todate (None)&lt;/li&gt;
&lt;li&gt;sessionstart (None)&lt;/li&gt;
&lt;li&gt;sessionend (None)&lt;/li&gt;
&lt;li&gt;filters ([])&lt;/li&gt;
&lt;li&gt;tz (None)&lt;/li&gt;
&lt;li&gt;tzinput (None)&lt;/li&gt;
&lt;li&gt;qcheck (0.0)&lt;/li&gt;
&lt;li&gt;calendar (None)&lt;/li&gt;
&lt;li&gt;headers (True)&lt;/li&gt;
&lt;li&gt;separator (,)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="csvdatabase"&gt;CSVDataBase&lt;a class="anchor" href="#csvdatabase"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;用于实现 CSV 数据源的基类。&lt;/p&gt;</description></item><item><title/><link>https://www.poloxue.com/backtrader/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/readme/</guid><description>&lt;h1 id="fyne-中文文档"&gt;Fyne 中文文档&lt;a class="anchor" href="#fyne-%e4%b8%ad%e6%96%87%e6%96%87%e6%a1%a3"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Backtrader 是一款 Python 实现量化回测框架，本文档是基于 Backtrader4的官方文档中文翻译版。英文原版，请异步 &lt;a href="https://www.backtrader.com"&gt;backtrader.com&lt;/a&gt;。&lt;/p&gt;</description></item></channel></rss>