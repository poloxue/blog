<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>平台概念 on Backtrader 中文</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/</link><description>Recent content in 平台概念 on Backtrader 中文</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>数据源 DataFeed</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/01-datafeed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/01-datafeed/</guid><description>&lt;h1 id="数据源---配置与使用"&gt;&lt;strong&gt;数据源 - 配置与使用&lt;/strong&gt;&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90---%e9%85%8d%e7%bd%ae%e4%b8%8e%e4%bd%bf%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节介绍 &lt;code&gt;backtrader&lt;/code&gt; 中数据源的配置与使用，同时也包含了一些数据访问的技巧。&lt;/p&gt;
&lt;h2 id="数据配置"&gt;数据配置&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，数据源 &lt;code&gt;DataFeed&lt;/code&gt; 通过 &lt;code&gt;Celebro&lt;/code&gt; 配置。&lt;/p&gt;
&lt;p&gt;配置代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(MyStrategy, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;cerebro.adddata&lt;/code&gt; 将 &lt;code&gt;DataFeed&lt;/code&gt; 添加到系统中。我们无需关心系统是如何接收 &lt;code&gt;DataFeed&lt;/code&gt; 的。&lt;/p&gt;
&lt;h2 id="使用方法"&gt;使用方法&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%96%b9%e6%b3%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;策略中，我们通过 &lt;code&gt;self.datas&lt;/code&gt; 数组即可访问数据。我们看一个简单示例，如我们实现策略。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;params&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过 &lt;code&gt;self.datas[0]&lt;/code&gt; 即可访问数据。&lt;/p&gt;
&lt;p&gt;示例中有两个注意点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;策略的 &lt;code&gt;__init__&lt;/code&gt; 方法无需接收 &lt;code&gt;*args&lt;/code&gt; 或 &lt;code&gt;**kwargs&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.datas&lt;/code&gt; 是一个包含 &lt;code&gt;DataFeed&lt;/code&gt; 的数组，至少包含一个数据源，否则会出现异常；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦数据源被添加到系统中，我们在策略实现就可以按它们添加的顺序访问到每个数据源。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data0)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在策略类访问：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#75715e"&gt;# data0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datas[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#75715e"&gt;# data1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="快捷访问"&gt;&lt;strong&gt;快捷访问&lt;/strong&gt;&lt;a class="anchor" href="#%e5%bf%ab%e6%8d%b7%e8%ae%bf%e9%97%ae"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;数据源也可通过快捷方式轻松访问，&lt;code&gt;self.datas&lt;/code&gt; 数组中的每个元素都可以通过自动生成的成员变量进行访问：&lt;/p&gt;
&lt;p&gt;对应规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.data&lt;/code&gt; 对应的是 &lt;code&gt;self.datas[0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.dataX&lt;/code&gt; 对应的是 &lt;code&gt;self.datas[X]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;</description></item><item><title>策略参数</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/02-params/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/02-params/</guid><description>&lt;h1 id="策略参数"&gt;策略参数&lt;a class="anchor" href="#%e7%ad%96%e7%95%a5%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;策略基本上都需要&lt;strong&gt;参数&lt;/strong&gt;，而在 &lt;code&gt;backtrader&lt;/code&gt; 中，这些参数可作为类属性进行声明。我们可以通过元组或字典的形式声明这些策略变量。&lt;/p&gt;
&lt;p&gt;元组：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;字典：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;无论是元组还是字典，参数声明后，都可以通过 &lt;code&gt;self.params&lt;/code&gt; 或 &lt;code&gt;self.p&lt;/code&gt; 访问参数的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个例子中，&lt;code&gt;self.p.period&lt;/code&gt; 就是获取 &lt;code&gt;period&lt;/code&gt; 参数的值。&lt;/p&gt;
&lt;h2 id="参数继承"&gt;&lt;strong&gt;参数继承&lt;/strong&gt;&lt;a class="anchor" href="#%e5%8f%82%e6%95%b0%e7%bb%a7%e6%89%bf"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果你在一个类中定义了参数，子类会自动继承这些参数。你可以在子类中重写这些参数的默认值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;BaseStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;),)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(BaseStrategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;),) &lt;span style="color:#75715e"&gt;# 重写父类的 period 参数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你使用多重继承，子类会继承所有父类的参数。如果多个父类定义了相同的参数，子类会使用继承列表中最后一个类的默认值。&lt;/p&gt;</description></item><item><title>线 Line 类</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/03-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/03-line/</guid><description>&lt;h1 id="线-line-类"&gt;线 Line 类&lt;a class="anchor" href="#%e7%ba%bf-line-%e7%b1%bb"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，许多对象都会生成 &lt;code&gt;Line&lt;/code&gt; 对象，而每个 &lt;code&gt;Line&lt;/code&gt; 代表的是一个时间序列数据，可以是价格、指标或其他数据。策略逻辑基本都离不开操作 &lt;code&gt;Line&lt;/code&gt; 对象。&lt;/p&gt;
&lt;h2 id="line"&gt;&lt;strong&gt;&lt;code&gt;Line&lt;/code&gt; 的访问&lt;/strong&gt;&lt;a class="anchor" href="#line"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="数据源中的"&gt;&lt;strong&gt;数据源中的 &lt;code&gt;Line&lt;/code&gt;&lt;/strong&gt;&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e4%b8%ad%e7%9a%84"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;数据源中包含了多个 &lt;code&gt;Line&lt;/code&gt;，如 &lt;code&gt;close&lt;/code&gt;、&lt;code&gt;open&lt;/code&gt;、&lt;code&gt;high&lt;/code&gt;、&lt;code&gt;low&lt;/code&gt; ，通过 &lt;code&gt;self.data.lines&lt;/code&gt; 访问它们。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close_line &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#75715e"&gt;# 访问收盘价线&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="指标中的"&gt;&lt;strong&gt;指标中的 &lt;code&gt;Line&lt;/code&gt;&lt;/strong&gt;&lt;a class="anchor" href="#%e6%8c%87%e6%a0%87%e4%b8%ad%e7%9a%84"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;指标同样会生成 &lt;code&gt;Line&lt;/code&gt;，如 &lt;code&gt;SimpleMovingAverage&lt;/code&gt; 的 &lt;code&gt;sma&lt;/code&gt;，通过 &lt;code&gt;self.movav.lines.sma&lt;/code&gt; 访问。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;movav &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;movav&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;移动平均大于收盘价&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="访问线的快捷方式"&gt;&lt;strong&gt;访问线的快捷方式&lt;/strong&gt;&lt;a class="anchor" href="#%e8%ae%bf%e9%97%ae%e7%ba%bf%e7%9a%84%e5%bf%ab%e6%8d%b7%e6%96%b9%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前面的语法和我们平时使用的不一样，因为我们平时都是通过简写访问，如 &lt;code&gt;self.data.close&lt;/code&gt; 实际上是 &lt;code&gt;self.data.lines.close&lt;/code&gt; 的快捷方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Backtrader&lt;/code&gt; 提供了多种简化访问 &lt;code&gt;Line&lt;/code&gt; 的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xxx.lines&lt;/code&gt; 可简写 &lt;code&gt;xxx.l&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxx.lines.name&lt;/code&gt; 可简写 &lt;code&gt;xxx.lines_name&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxx.lines[0]&lt;/code&gt; 可简写为 &lt;code&gt;xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xxx.lines[X]&lt;/code&gt; 可简写为 &lt;code&gt;xxx.lineX&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有如：&lt;/p&gt;</description></item><item><title>索引和切片</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/04-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/04-index/</guid><description>&lt;h1 id="索引和切片"&gt;索引和切片&lt;a class="anchor" href="#%e7%b4%a2%e5%bc%95%e5%92%8c%e5%88%87%e7%89%87"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id="索引0-和--1"&gt;&lt;strong&gt;索引：0 和 -1&lt;/strong&gt;&lt;a class="anchor" href="#%e7%b4%a2%e5%bc%950-%e5%92%8c--1"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，&lt;code&gt;Line&lt;/code&gt; 代表着一组按时间顺序排列的点。这些点在策略执行期间动态生成，可以通过索引来访问。&lt;/p&gt;
&lt;h3 id="使用索引访问"&gt;&lt;strong&gt;使用索引访问 &lt;code&gt;Line&lt;/code&gt;&lt;/strong&gt;&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e7%b4%a2%e5%bc%95%e8%ae%bf%e9%97%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;访问当前值：&lt;/strong&gt; 使用 &lt;code&gt;0&lt;/code&gt; 索引访问当前的线值，如 &lt;code&gt;self.data.close[0]&lt;/code&gt; 获取当前收盘价。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]) &lt;span style="color:#75715e"&gt;# 当前的收盘价&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;访问前值：&lt;/strong&gt; 使用负数索引访问之前的值，如 &lt;code&gt;self.data.close[-1]&lt;/code&gt; 获取上一条数据的收盘价。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;今天的收盘价高于昨日的收盘价&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;索引的意义：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 索引指向当前时刻的值，&lt;code&gt;-1&lt;/code&gt; 指向上一个时刻的值，以此类推。&lt;/li&gt;
&lt;li&gt;负数索引指向历史数据点，这对于时间序列分析和策略中的数据回溯非常有用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;简单示例：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 比较今天的收盘价和昨天的收盘价&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;今天的收盘价更高&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#34;今天的收盘价更低&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个示例中，&lt;code&gt;self.data.close[0]&lt;/code&gt; 是今天的收盘价，&lt;code&gt;self.data.close[-1]&lt;/code&gt; 是昨天的收盘价。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="切片"&gt;&lt;strong&gt;切片&lt;/strong&gt;&lt;a class="anchor" href="#%e5%88%87%e7%89%87"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Backtrader&lt;/code&gt; 不支持对 &lt;code&gt;Line&lt;/code&gt; 对象的切片操作，这是为了保持设计的一致性。切片适用于普通的 Python 数组，但在 &lt;code&gt;Backtrader&lt;/code&gt; 中，&lt;code&gt;Line&lt;/code&gt; 对象是动态增长的，因此切片的使用存在一定的限制。&lt;/p&gt;
&lt;h3 id="为什么不支持切片"&gt;&lt;strong&gt;为什么不支持切片&lt;/strong&gt;&lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%b8%8d%e6%94%af%e6%8c%81%e5%88%87%e7%89%87"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先是 &lt;code&gt;Line&lt;/code&gt; 的设计上要保持一致性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Line&lt;/code&gt; 对象上的数据是通过索引（如 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;-1&lt;/code&gt;）动态访问，基于时间序列进行数据处理。切片在此情况下并不适用，因为线的数据是按时间顺序排列的。&lt;/p&gt;
&lt;p&gt;而常规可索引对象的切片是什么样的？&lt;/p&gt;</description></item><item><title>运算符</title><link>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/05-operator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/04-concepts/01-platform-concepts/05-operator/</guid><description>&lt;h1 id="运算符"&gt;运算符&lt;a class="anchor" href="#%e8%bf%90%e7%ae%97%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 &lt;code&gt;Backtrader&lt;/code&gt; 中，运算符不仅用于常规的数学运算，还能构建复杂的策略逻辑。&lt;code&gt;Backtrader&lt;/code&gt; 的自定义运算符让策略的数学和逻辑运算更自然和简洁。&lt;/p&gt;
&lt;h2 id="如何使用运算符"&gt;&lt;strong&gt;如何使用运算符&lt;/strong&gt;&lt;a class="anchor" href="#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e8%bf%90%e7%ae%97%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;backtrader&lt;/code&gt; 支持基于运算符创建新的对象，如在 &lt;code&gt;__init__&lt;/code&gt; 中通过运算符计算多个指标，得到一个新的操作对象。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SimpleMovingAverage(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 使用运算符创建新的逻辑对象&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; close_over_sma &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; sma
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma_dist_to_high &lt;span style="color:#f92672"&gt;=&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high &lt;span style="color:#f92672"&gt;-&lt;/span&gt; sma
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sma_dist_small &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sma_dist_to_high &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3.5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 创建卖出信号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sell_sig &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;And(close_over_sma, sma_dist_small)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们在 &lt;code&gt;Line&lt;/code&gt; 对象上使用了常规的运算符，如加减乘除、大小比较等。这简化了策略代码，增强了策略逻辑的可读性和可维护性。&lt;/p&gt;
&lt;p&gt;注：&lt;code&gt;backtrader&lt;/code&gt; 的指标计算是自有的体系，不是基于 &lt;code&gt;numpy&lt;/code&gt; 和 &lt;code&gt;pandas&lt;/code&gt;，所以要单独实现这些运算符。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="一些未覆盖的运算符函数"&gt;&lt;strong&gt;一些未覆盖的运算符/函数&lt;/strong&gt;&lt;a class="anchor" href="#%e4%b8%80%e4%ba%9b%e6%9c%aa%e8%a6%86%e7%9b%96%e7%9a%84%e8%bf%90%e7%ae%97%e7%ac%a6%e5%87%bd%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;某些 Python 中的运算符没有被覆盖，&lt;code&gt;backtrader&lt;/code&gt; 提供了专门的函数来模拟逻辑运算，如 &lt;code&gt;bt.And&lt;/code&gt; 和 &lt;code&gt;bt.Or&lt;/code&gt; 来实现逻辑 &amp;ldquo;与&amp;rdquo; 和 &amp;ldquo;或&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;下面把这些单独实现的运算符列出来看看吧。&lt;/p&gt;
&lt;h3 id="逻辑运算符"&gt;逻辑运算符&lt;a class="anchor" href="#%e9%80%bb%e8%be%91%e8%bf%90%e7%ae%97%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python 中的 &lt;code&gt;and&lt;/code&gt; 和 &lt;code&gt;or&lt;/code&gt; 运算符无法在 &lt;code&gt;Backtrader&lt;/code&gt; 中覆盖，&lt;code&gt;backtradr&lt;/code&gt; 提供了 &lt;code&gt;bt.And&lt;/code&gt; 和 &lt;code&gt;bt.Or&lt;/code&gt; 来模拟这两个逻辑操作。&lt;/p&gt;</description></item></channel></rss>