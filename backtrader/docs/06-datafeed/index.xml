<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DataFeed on Backtrader 中文</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/</link><description>Recent content in DataFeed on Backtrader 中文</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/backtrader/docs/06-datafeed/index.xml" rel="self" type="application/rss+xml"/><item><title>Data Feeds</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/01-datafeeds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/01-datafeeds/</guid><description>&lt;h2 id="数据源"&gt;数据源&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 提供了一组数据源解析器（在撰写本文时都是基于 CSV 的）以便从不同来源加载数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yahoo（在线或已保存到文件）&lt;/li&gt;
&lt;li&gt;VisualChart（参见 &lt;a href="https://www.visualchart.com"&gt;www.visualchart.com&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;Backtrader CSV（自定义格式用于测试）&lt;/li&gt;
&lt;li&gt;通用 CSV 支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从快速入门指南中可以清楚地看到，您可以将数据源添加到 Cerebro 实例中。这些数据源稍后将在策略中可用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.datas&lt;/code&gt; 数组（按插入顺序）&lt;/li&gt;
&lt;li&gt;数组对象的别名：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self.data&lt;/code&gt; 和 &lt;code&gt;self.data0&lt;/code&gt; 指向第一个元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self.dataX&lt;/code&gt; 指向数组中索引为 X 的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是插入方式的快速提醒：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader.feeds &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; btfeeds
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;wheremydatacsvis.csv&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data) &lt;span style="color:#75715e"&gt;# 可以传递一个 &amp;#39;name&amp;#39; 参数用于绘图&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="数据源通用参数"&gt;数据源通用参数&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e9%80%9a%e7%94%a8%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;这个数据源可以直接从 Yahoo 下载数据并将其输入系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 数据源常用参数：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;dataname&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;strong&gt;必须提供&lt;/strong&gt;。其含义因数据源类型而异，例如文件路径、股票代码等。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;''&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;用于绘图时的装饰性名称。如果未指定，可能会从 &lt;code&gt;dataname&lt;/code&gt; 派生（例如：文件路径的最后一部分）。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;fromdate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;mindate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Python &lt;code&gt;datetime&lt;/code&gt; 对象，表示应忽略此日期之前的任何数据。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;todate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;maxdate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;Python &lt;code&gt;datetime&lt;/code&gt; 对象，表示应忽略此日期之后的任何数据。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;timeframe&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;TimeFrame.Days&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;时间框架。可能的值包括：&lt;code&gt;Ticks&lt;/code&gt;、&lt;code&gt;Seconds&lt;/code&gt;、&lt;code&gt;Minutes&lt;/code&gt;、&lt;code&gt;Days&lt;/code&gt;、&lt;code&gt;Weeks&lt;/code&gt;、&lt;code&gt;Months&lt;/code&gt; 和 &lt;code&gt;Years&lt;/code&gt;。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;compression&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;每个实际条形图的条形数。仅在数据重采样/重放中有效。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;sessionstart&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;数据会话的开始时间。可用于重采样等目的。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;sessionend&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;数据会话的结束时间。可用于重采样等目的。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="csv-数据源通用参数"&gt;CSV 数据源通用参数&lt;a class="anchor" href="#csv-%e6%95%b0%e6%8d%ae%e6%ba%90%e9%80%9a%e7%94%a8%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;参数（除了通用参数外）：&lt;/p&gt;</description></item><item><title>扩展数据源</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/02-datafeed-extending/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/02-datafeed-extending/</guid><description>&lt;h1 id="扩展数据源"&gt;扩展数据源&lt;a class="anchor" href="#%e6%89%a9%e5%b1%95%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;用户是否可以轻松扩展现有机制，以添加额外的信息，将其与现有的价格信息（如开盘价、高价等）一起传递？&lt;/p&gt;
&lt;p&gt;据我了解，答案是：可以。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个数据源，正在解析为 CSV 格式&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;GenericCSVData&lt;/code&gt; 加载信息&lt;/li&gt;
&lt;li&gt;这种通用 CSV 支持是为了响应 Issue #6 开发的&lt;/li&gt;
&lt;li&gt;一个额外的字段，显然包含 P/E 信息，需要与解析的 CSV 数据一起传递&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们基于 CSV 数据源开发和 &lt;code&gt;GenericCSVData&lt;/code&gt; 示例帖子构建。&lt;/p&gt;
&lt;h4 id="步骤"&gt;步骤：&lt;a class="anchor" href="#%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;假设 P/E 信息已设置在被解析的 CSV 数据中&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;GenericCSVData&lt;/code&gt; 作为基类&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;pe&lt;/code&gt; 扩展现有的行（开盘价/最高价/最低价/收盘价/成交量/持仓兴趣）&lt;/li&gt;
&lt;li&gt;添加一个参数，让调用者确定 P/E 信息的列位置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; backtrader.feeds &lt;span style="color:#f92672"&gt;import&lt;/span&gt; GenericCSVData
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;GenericCSV_PE&lt;/span&gt;(GenericCSVData):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 添加 &amp;#39;pe&amp;#39; 行到从基类继承的行中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; lines &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;pe&amp;#39;&lt;/span&gt;,)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# GenericCSVData 中的 openinterest 索引为 7 ... 添加 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 将参数添加到从基类继承的参数中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;pe&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;),)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样工作就完成了&amp;hellip;&lt;/p&gt;
&lt;p&gt;稍后在策略中使用此数据源时：&lt;/p&gt;</description></item><item><title>开发 CSV 数据源</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/03-datafeed-development-csv/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/03-datafeed-development-csv/</guid><description>&lt;h1 id="csv-数据源开发"&gt;CSV 数据源开发&lt;a class="anchor" href="#csv-%e6%95%b0%e6%8d%ae%e6%ba%90%e5%bc%80%e5%8f%91"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 已经提供了一些通用 CSV 数据源和特定的 CSV 数据源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GenericCSVData&lt;/li&gt;
&lt;li&gt;VisualChartCSVData&lt;/li&gt;
&lt;li&gt;YahooFinanceData（用于在线下载）&lt;/li&gt;
&lt;li&gt;YahooFinanceCSVData（用于已下载的数据）&lt;/li&gt;
&lt;li&gt;BacktraderCSVData（内部使用&amp;hellip;用于测试目的，但也可以使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;即使如此，最终用户可能仍希望开发对特定 CSV 数据源的支持。&lt;/p&gt;
&lt;p&gt;通常的格言是：“说起来容易做起来难”。实际上，结构旨在使其变得简单。&lt;/p&gt;
&lt;h2 id="步骤"&gt;步骤&lt;a class="anchor" href="#%e6%ad%a5%e9%aa%a4"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;从 &lt;code&gt;backtrader.CSVDataBase&lt;/code&gt; 继承&lt;/li&gt;
&lt;li&gt;根据需要定义任何参数&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;start&lt;/code&gt; 方法中进行任何初始化&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;stop&lt;/code&gt; 方法中进行任何清理&lt;/li&gt;
&lt;li&gt;定义一个 &lt;code&gt;_loadline&lt;/code&gt; 方法，其中实际工作发生。此方法接收一个参数：&lt;code&gt;linetokens&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;顾名思义，这包含根据分隔符参数（从基类继承）拆分当前行后的标记。&lt;/p&gt;
&lt;p&gt;如果在完成其工作后有新数据……填充相应的行并返回 &lt;code&gt;True&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果没有可用的数据，因此解析已结束：返回 &lt;code&gt;False&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果后台代码发现没有更多行需要解析，则可能不需要返回 &lt;code&gt;False&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;已考虑的事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开文件（或接收类似文件的对象）&lt;/li&gt;
&lt;li&gt;跳过标头行（如果指示存在）&lt;/li&gt;
&lt;li&gt;读取行&lt;/li&gt;
&lt;li&gt;标记行&lt;/li&gt;
&lt;li&gt;预加载支持（将整个数据源一次性加载到内存中）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通常一个示例胜过千言万语。让我们使用 BacktraderCSVData 中定义的内部 CSV 解析代码的简化版本。这个版本不需要初始化或清理（例如，这可能是打开一个套接字并稍后关闭它）。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;backtrader 数据源包含通常的行业标准源，这些源是要填充的。即：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;volume&lt;/li&gt;
&lt;li&gt;openinterest&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果您的策略/算法或简单数据浏览只需要，例如收盘价，您可以不触碰其他字段（每次迭代会自动用 &lt;code&gt;float('NaN')&lt;/code&gt; 值填充它们，然后用户代码有机会进行任何操作）。&lt;/p&gt;
&lt;p&gt;在此示例中，仅支持每日格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; itertools
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyCSVData&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;CSVDataBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;start&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 对于此数据源类型无需做任何操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;stop&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 对于此数据源类型无需做任何操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_loadline&lt;/span&gt;(self, linetokens):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; itertools&lt;span style="color:#f92672"&gt;.&lt;/span&gt;count(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dttxt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; linetokens[next(i)]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 格式为 YYYY-MM-DD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(dttxt[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(dttxt[&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;7&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; d &lt;span style="color:#f92672"&gt;=&lt;/span&gt; int(dttxt[&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dt &lt;span style="color:#f92672"&gt;=&lt;/span&gt; datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime(y, m, d)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; dtnum &lt;span style="color:#f92672"&gt;=&lt;/span&gt; date2num(dt)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dtnum
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;open[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;high[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;low[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;close[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;volume[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lines&lt;span style="color:#f92672"&gt;.&lt;/span&gt;openinterest[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; float(linetokens[next(i)])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码假设所有字段都到位且可转换为浮点数，除了日期时间，它具有固定的 YYYY-MM-DD 格式，可以不使用 &lt;code&gt;datetime.datetime.strptime&lt;/code&gt; 进行解析。&lt;/p&gt;</description></item><item><title>开发 Binary 数据源</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/04-datafeed-development-general/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/04-datafeed-development-general/</guid><description>&lt;h1 id="开发-binary-据源"&gt;开发 Binary 据源&lt;a class="anchor" href="#%e5%bc%80%e5%8f%91-binary-%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：示例中使用的 Binary 文件 &lt;code&gt;goog.fd&lt;/code&gt; 属于 VisualChart，不能与 backtrader 一起分发。&lt;/p&gt;
&lt;p&gt;对于那些有兴趣直接使用 Binary 文件的人，可以免费下载 VisualChart。&lt;/p&gt;
&lt;p&gt;CSV 数据源开发展示了如何添加新的基于 CSV 的数据源。现有的基类 &lt;code&gt;CSVDataBase&lt;/code&gt; 提供了框架，减轻了子类的大部分工作，在大多数情况下，它们可以简单地执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_loadline&lt;/span&gt;(self, linetokens):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 在这里解析 linetokens 并将它们放入 self.lines.close, self.lines.high 等中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 如果数据已解析，否则返回 False&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;基类负责参数、初始化、打开文件、读取行、将行拆分为标记以及其他事项，例如跳过不符合日期范围（fromdate，todate）的行，这些行可能由最终用户定义。&lt;/p&gt;
&lt;p&gt;开发非 CSV 数据源遵循相同的模式，而无需深入到已拆分的行标记。&lt;/p&gt;
&lt;h3 id="需要做的事情"&gt;需要做的事情：&lt;a class="anchor" href="#%e9%9c%80%e8%a6%81%e5%81%9a%e7%9a%84%e4%ba%8b%e6%83%85"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;从 &lt;code&gt;backtrader.feed.DataBase&lt;/code&gt; 派生&lt;/li&gt;
&lt;li&gt;添加任何需要的参数&lt;/li&gt;
&lt;li&gt;如果需要初始化，重写 &lt;code&gt;__init__(self)&lt;/code&gt; 和/或 &lt;code&gt;start(self)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果需要清理代码，重写 &lt;code&gt;stop(self)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;工作发生在必须始终重写的方法 &lt;code&gt;_load(self)&lt;/code&gt; 内&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们看看 &lt;code&gt;backtrader.feed.DataBase&lt;/code&gt; 已经提供的参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; backtrader.utils.py3 &lt;span style="color:#f92672"&gt;import&lt;/span&gt; with_metaclass
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;DataBase&lt;/span&gt;(with_metaclass(MetaDataBase, dataseries&lt;span style="color:#f92672"&gt;.&lt;/span&gt;OHLCDateTime)):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ((&lt;span style="color:#e6db74"&gt;&amp;#39;dataname&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;fromdate&amp;#39;&lt;/span&gt;, datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;min),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;todate&amp;#39;&lt;/span&gt;, datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;datetime&lt;span style="color:#f92672"&gt;.&lt;/span&gt;max),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;compression&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;timeframe&amp;#39;&lt;/span&gt;, TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;sessionend&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些参数具有以下含义：&lt;/p&gt;</description></item><item><title>多时间框架</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/05-datafeed-multiple-timeframes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/05-datafeed-multiple-timeframes/</guid><description>&lt;h1 id="多时间框架策略"&gt;多时间框架策略&lt;a class="anchor" href="#%e5%a4%9a%e6%97%b6%e9%97%b4%e6%a1%86%e6%9e%b6%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在实际的交易中，我们常需要结合多个时间框架来制定投资决策，如在周级别评估趋势，而在日级别执行入场，或是基于 5 分钟与 60 分钟数据的对比执行交易。在 &lt;strong&gt;Backtrader&lt;/strong&gt; 中要实现这个目标，需要将不同时间框架的数据组合在一起。&lt;/p&gt;
&lt;p&gt;本节将介绍如何在 &lt;strong&gt;Backtrader&lt;/strong&gt; 实现多周期交易策略。&lt;/p&gt;
&lt;h2 id="基本规则"&gt;基本规则&lt;a class="anchor" href="#%e5%9f%ba%e6%9c%ac%e8%a7%84%e5%88%99"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 原生支持多时间框架的数据组合，只需遵循几个简单的规则。&lt;/p&gt;
&lt;p&gt;第一步，&lt;strong&gt;最小时间框架的数据必须首先加载&lt;/strong&gt;。较小时间框架（条数最多的数据）应当首先加载到Cerebro实例中。&lt;/p&gt;
&lt;p&gt;第二步，&lt;strong&gt;数据必须按日期时间对齐&lt;/strong&gt;。为了让平台能够正确解析数据并执行策略，必须保证各时间框架的数据时间对齐。&lt;/p&gt;
&lt;p&gt;第三步，&lt;strong&gt;使用 &lt;code&gt;resampledata&lt;/code&gt; 实现较大时间框架的重采样&lt;/strong&gt;。&lt;code&gt;cerebro.resample&lt;/code&gt; 函数能轻松地将较大的时间框架数据添加到策略中。&lt;/p&gt;
&lt;p&gt;在这个基础上，就可以在较短和较长时间框架上使用不同的技术指标。要注意，应用于大时间框架的指标产生的信号较少，还有，&lt;strong&gt;Backtrader&lt;/strong&gt; 会考虑大时间框架的最小周期，以确保数据的准确性。&lt;/p&gt;
&lt;h2 id="示例如何使用多个时间框架"&gt;示例：如何使用多个时间框架&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e5%a4%9a%e4%b8%aa%e6%97%b6%e9%97%b4%e6%a1%86%e6%9e%b6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如何在 &lt;strong&gt;Backtrader&lt;/strong&gt; 实现多时间周期呢？大概演示这个步骤吧。&lt;/p&gt;
&lt;h3 id="加载数据"&gt;加载数据&lt;a class="anchor" href="#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先，加载较小时间框架的数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="将数据添加到cerebro"&gt;将数据添加到Cerebro&lt;a class="anchor" href="#%e5%b0%86%e6%95%b0%e6%8d%ae%e6%b7%bb%e5%8a%a0%e5%88%b0cerebro"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;将较小时间框架数据都添加到 Cerebro 实例中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="重采样数据"&gt;重采样数据&lt;a class="anchor" href="#%e9%87%8d%e9%87%87%e6%a0%b7%e6%95%b0%e6%8d%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;cerebro.resampledata&lt;/code&gt; 将数据重采样到较大的时间框架。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;tframes[args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timeframe], compression&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compression)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="运行策略"&gt;运行策略&lt;a class="anchor" href="#%e8%bf%90%e8%a1%8c%e7%ad%96%e7%95%a5"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;执行策略并生成结果。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="示例"&gt;示例&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先，演示每日和每周时间框架。假设我们希望在一个策略中同时使用每日和每周的时间框架。通过命令行指定时间框架为每周，并进行数据重采样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./multitimeframe-example.py --timeframe weekly --compression &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，程序会加载每日数据，并将其重采样为每周数据。最终输出将包括每周和每日数据的合成图表。&lt;/p&gt;
&lt;p&gt;继续用每日时间框架压缩。如果我们希望将每日数据压缩为每两天一条数据，可以使用以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./multitimeframe-example.py --timeframe daily --compression &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，Backtrader会将每日数据压缩为每两天一条数据，并生成合成图表。&lt;/p&gt;
&lt;p&gt;还可以带简单移动平均（SMA）指标。为了展示不同时间框架对策略的影响，可以在策略中使用简单的移动平均线（SMA）指标。SMA将在较小和较大时间框架上应用，并根据它们产生不同的信号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在较小的时间框架（如每日）上，SMA将在第10个数据点后首次计算出值。&lt;/li&gt;
&lt;li&gt;在较大的时间框架（如每周）上，SMA的计算会延迟，可能需要10个周期的时间来产生有效信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于Backtrader的多时间框架支持，较大时间框架会消耗多个较小时间框架的数据条目来计算指标。&lt;/p&gt;
&lt;p&gt;在策略中使用 SMA 时，如果数据点来自较大时间框架，&lt;code&gt;nextstart&lt;/code&gt; 方法的调用可能会有所延迟。例如，在每周时间框架下，SMA的计算需要10周的数据，而在每个周期内，我们将看到多个“nextstart”调用，因为Backtrader会等待所有数据都齐全时才开始执行策略逻辑。&lt;/p&gt;
&lt;h2 id="代码示例"&gt;代码示例&lt;a class="anchor" href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 导入必要的库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;from&lt;/span&gt; __future__ &lt;span style="color:#f92672"&gt;import&lt;/span&gt; (absolute_import, division, print_function,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; unicode_literals)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; argparse
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader.feeds &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; btfeeds
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader.indicators &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; btind
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 创建SMA策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;SMAStrategy&lt;/span&gt;(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;period&amp;#39;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# SMA的周期&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;onlydaily&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;), &lt;span style="color:#75715e"&gt;# 是否只在每日时间框架上应用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;__init__&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 为较小时间框架添加SMA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma_small_tf &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 如果选择不只应用于每日时间框架&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;onlydaily:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 为较大时间框架（如每周）添加SMA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sma_large_tf &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btind&lt;span style="color:#f92672"&gt;.&lt;/span&gt;SMA(self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;data1, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;self&lt;span style="color:#f92672"&gt;.&lt;/span&gt;p&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# nextstart方法，用于输出调试信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nextstart&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;--------------------------------------------------&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;nextstart called with len&amp;#39;&lt;/span&gt;, len(self))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;&amp;#39;--------------------------------------------------&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; super(SMAStrategy, self)&lt;span style="color:#f92672"&gt;.&lt;/span&gt;nextstart()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 运行策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;runstrat&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; args &lt;span style="color:#f92672"&gt;=&lt;/span&gt; parse_args()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 创建Cerebro实例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro(stdstats&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 根据用户选择的策略参数加载相应策略&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;indicators:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Strategy)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;addstrategy(SMAStrategy, period&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;period, onlydaily&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;onlydaily)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 加载数据文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataname &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-day-001.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data) &lt;span style="color:#75715e"&gt;# 添加较小时间框架的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tframes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(daily&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days, weekly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Weeks, monthly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Months)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 根据需要重采样数据到较大时间框架&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;noresample:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataname2 &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-week-001.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; data2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(data2)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data, timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;tframes[args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timeframe], compression&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compression)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 执行策略并生成结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 绘制结果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;plot(style&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 解析命令行参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_args&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser &lt;span style="color:#f92672"&gt;=&lt;/span&gt; argparse&lt;span style="color:#f92672"&gt;.&lt;/span&gt;ArgumentParser(description&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Multitimeframe test&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--dataname&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;数据文件路径&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--dataname2&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, required&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;False&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;第二个数据文件路径&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--noresample&amp;#39;&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;不进行数据重采样&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--timeframe&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;weekly&amp;#39;&lt;/span&gt;, choices&lt;span style="color:#f92672"&gt;=&lt;/span&gt;[&lt;span style="color:#e6db74"&gt;&amp;#39;daily&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;weekly&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;], help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;重采样时间框架&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--compression&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;int, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;压缩数据条数&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--indicators&amp;#39;&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;是否使用带指标的策略&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--onlydaily&amp;#39;&lt;/span&gt;, action&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;store_true&amp;#39;&lt;/span&gt;, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;仅在每日时间框架上应用指标&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;add_argument(&lt;span style="color:#e6db74"&gt;&amp;#39;--period&amp;#39;&lt;/span&gt;, default&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;, type&lt;span style="color:#f92672"&gt;=&lt;/span&gt;int, help&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;指标周期&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; parser&lt;span style="color:#f92672"&gt;.&lt;/span&gt;parse_args()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; __name__ &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; runstrat()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="结论"&gt;结论&lt;a class="anchor" href="#%e7%bb%93%e8%ae%ba"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;通过Backtrader的多时间框架支持，您可以轻松地将不同时间框架的数据结合在一起，从而实现更加灵活的交易策略。只需遵循上述规则，就能在多个时间框架中应用不同的指标，并根据数据的不同粒度调整策略的执行逻辑。&lt;/p&gt;</description></item><item><title>重采样</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/06-datafeed-resampling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/06-datafeed-resampling/</guid><description>&lt;h1 id="重采样"&gt;重采样&lt;a class="anchor" href="#%e9%87%8d%e9%87%87%e6%a0%b7"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;当数据只有单一时间框架可用，而分析要在不同时间框架上进行，就需要进行数据重采样。&amp;ldquo;重采样&amp;rdquo; 实际应称为 &amp;ldquo;上采样&amp;rdquo;，因为它是从源时间框架到更大的时间框架（如：从天到周）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Backtrader&lt;/strong&gt; 内置了通过过滤器对象进行重采样的支持。有几种方法可以实现这一点，但有一个简单的接口可以实现，它代替通过 &lt;code&gt;cerebro.adddata(data)&lt;/code&gt; 将数据放入系统中，使用 &lt;code&gt;resampledata&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;有两个主要选项可以控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改时间框架&lt;/li&gt;
&lt;li&gt;压缩条数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要实现这些功能，请在调用&lt;code&gt;resampledata&lt;/code&gt;时使用以下参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timeframe&lt;/code&gt;（默认值：&lt;code&gt;bt.TimeFrame.Days&lt;/code&gt;）：目标时间框架，必须等于或大于源时间框架。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compression&lt;/code&gt;（默认值：1）：将选定的值“n”压缩为1个条。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们来看一个从每日到每周的示例，通过手工编写的脚本：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./resampling-example.py --timeframe weekly --compression &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以将其与原始每日数据进行比较：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./resampling-example.py --timeframe daily --compression &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现这些功能的步骤有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先用 &lt;code&gt;cerebro.adddata&lt;/code&gt; 加载原始数据；&lt;/li&gt;
&lt;li&gt;使用带参数的&lt;code&gt;resampledata&lt;/code&gt; 传递数据给&lt;code&gt;cerebro&lt;/code&gt;：&lt;code&gt;timeframe&lt;/code&gt; 和 &lt;code&gt;compression&lt;/code&gt;；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 加载数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;datapath &lt;span style="color:#f92672"&gt;=&lt;/span&gt; args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;dataname &lt;span style="color:#f92672"&gt;or&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;../../datas/2006-day-001.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; btfeeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;BacktraderCSVData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;datapath)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 方便的字典用于时间框架参数转换&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tframes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; dict(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; daily&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Days,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; weekly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Weeks,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; monthly&lt;span style="color:#f92672"&gt;=&lt;/span&gt;bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;TimeFrame&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Months)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 添加重采样数据而不是原始数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;resampledata(data,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; timeframe&lt;span style="color:#f92672"&gt;=&lt;/span&gt;tframes[args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;timeframe],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; compression&lt;span style="color:#f92672"&gt;=&lt;/span&gt;args&lt;span style="color:#f92672"&gt;.&lt;/span&gt;compression)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;假设，将时间框架从每日更改为每周，然后将 3 条压缩为 1 条。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./resampling-example.py --timeframe weekly --compression &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从原始的 256 个每日 Bar 中，最终得到 18 个 3 周的 Bar。因为一年是 52 周，而 52 / 3 = 17.33，因此有18个 Bar。&lt;/p&gt;</description></item><item><title>数据回放</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/07-datafeed-replay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/07-datafeed-replay/</guid><description>&lt;h1 id="数据回放"&gt;数据回放&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e5%9b%9e%e6%94%be"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;随着时间的推移，单纯对已经完成关闭的 Bar 进行策略测试已不再足够，数据回放应运而生。假设，策略在时间框架X上操作（例如：每日），数据在更小的时间框架Y（例如：1分钟）可用。&lt;/p&gt;
&lt;p&gt;数据回放的作用正如其名，使用1分钟数据回放每日条。虽然，这并不能完全再现市场发展，但比单独观察每日完成关闭的 Bar 要好得多。如果策略在每日 Bar 形成期间实时操作，那么近似 Bar 形成过程模拟策略在实际条件下的表现。&lt;/p&gt;
&lt;p&gt;要实现数据回放，只按常规使用 backtrader 即可。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加载数据源；&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;replaydata&lt;/code&gt; 将数据传递给&lt;code&gt;cerebro&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;添加策略；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 数据回放不支持预加载，因为每个 Bar 实际上是实时构建的，任何 &lt;code&gt;Cerebro&lt;/code&gt; 实例中都会自动禁用预加载。&lt;/p&gt;
&lt;p&gt;可传递给&lt;code&gt;replaydata&lt;/code&gt;的参数：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;timeframe&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;bt.TimeFrame.Days&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;目标时间框架，必须等于或大于源时间框架&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;compression&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;1&lt;/td&gt;
 &lt;td&gt;将选定值“n”压缩为1条&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;扩展参数（若无特别需要请勿修改）：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;bar2edge&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;使用时间边界作为闭合条的目标。例如，使用“ticks -&amp;gt; 5 seconds”时，生成的5秒条将对齐到xx:00、xx:05、xx:10……&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;adjbartime&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;False&lt;/td&gt;
 &lt;td&gt;使用边界的时间调整传递的重采样条的时间，而不是最后看到的时间戳。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;rightedge&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;True&lt;/td&gt;
 &lt;td&gt;使用时间边界的右边缘设置时间。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;举例说明，标准的 2006 年每日数据在每周基础上进行回放。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最终会有 52 个 Bar，即每周一个；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cerebro&lt;/code&gt; 将调用 &lt;code&gt;prenext&lt;/code&gt; 和 &lt;code&gt;next&lt;/code&gt; 共计255次，这是原始数量每日 Bar；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;诀窍在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在每周 Bar 形成时，策略的长度（&lt;code&gt;len(self)&lt;/code&gt;）保持不变。&lt;/li&gt;
&lt;li&gt;每过一周，长度增加1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是示例，但首先是测试脚本的主要部分，其中加载数据并将其传递给&lt;code&gt;cerebro&lt;/code&gt;进行回放，然后运行。&lt;/p&gt;</description></item><item><title>数据滚动</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/08-datafeed-rollover/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/08-datafeed-rollover/</guid><description>&lt;h1 id="滚动"&gt;滚动&lt;a class="anchor" href="#%e6%bb%9a%e5%8a%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;并非所有提供商都提供连续期货合约数据。有时提供的数据是仍在交易的到期合约的有效数据。这种情况下，进行回测会变得很不方便，因为数据分散在多个不同的合约上，并且这些合约还会在时间上重叠。&lt;/p&gt;
&lt;p&gt;如果能够正确地将这些过去的合约数据连接成一个连续的数据流，可以缓解这种痛苦。问题在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有一种最佳方法将不同到期日期的数据连接成一个连续的期货数据&lt;/li&gt;
&lt;li&gt;有些文献，如 &lt;a href="http://www.sierrachart.com/index.php?page=doc/ChangingFuturesContract.html"&gt;SierraChart的文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="滚动数据源"&gt;滚动数据源&lt;a class="anchor" href="#%e6%bb%9a%e5%8a%a8%e6%95%b0%e6%8d%ae%e6%ba%90"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;从backtrader 1.8.10.99开始，增加了将不同到期日期的期货数据连接成连续期货的功能：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dataN &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;ExpiryN&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drollover &lt;span style="color:#f92672"&gt;=&lt;/span&gt; cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;rolloverdata(data0, data1, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;, dataN, name&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;MyRoll&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class='book-hint '&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**kwargs&lt;/code&gt;将在下文解释&lt;/li&gt;
&lt;li&gt;也可以直接访问RollOver数据源（如果需要子类化，这是很有帮助的）：&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data0 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry0&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;Expiry1&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dataN &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;MyFeed(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;ExpiryN&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;drollover &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;RollOver(data0, data1, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;, dataN, dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;MyRoll&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;adddata(drollover)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class='book-hint '&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用RollOver时，使用&lt;code&gt;dataname&lt;/code&gt;参数分配名称，这是所有数据源用于传递名称/代码的标准参数。在这种情况下，它被重用以给整个滚动的期货集分配一个通用名称。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;cerebro.rolloverdata&lt;/code&gt;，使用&lt;code&gt;name&lt;/code&gt;参数为数据源分配名称，这是该方法的一个命名参数。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;Rollover 的使用可概括为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按通常方式创建数据源，但&lt;strong&gt;不要&lt;/strong&gt;将它们添加到cerebro&lt;/li&gt;
&lt;li&gt;将这些数据源作为输入传递给&lt;code&gt;bt.feeds.RollOver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也传递一个&lt;code&gt;dataname&lt;/code&gt;，主要用于识别目的&lt;/li&gt;
&lt;li&gt;然后将这个滚动的数据源添加到cerebro&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="滚动的选项"&gt;滚动的选项&lt;a class="anchor" href="#%e6%bb%9a%e5%8a%a8%e7%9a%84%e9%80%89%e9%a1%b9"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;提供两个参数来控制滚动过程：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;参数名&lt;/th&gt;
 &lt;th&gt;默认值&lt;/th&gt;
 &lt;th&gt;描述&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;checkdate&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;必须是一个可调用对象，签名：&lt;code&gt;checkdate(dt, d)&lt;/code&gt;&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- &lt;code&gt;dt&lt;/code&gt; 一个&lt;code&gt;datetime.datetime&lt;/code&gt;对象&lt;/li&gt; &lt;li&gt;- &lt;code&gt;d&lt;/code&gt;，当前活跃期货的数据源&lt;/li&gt;&lt;/ul&gt; 预期返回值&lt;ul style="list-style-type: none;padding-left: 0; margin-left: 0;"&gt;&lt;li&gt;- &lt;code&gt;True&lt;/code&gt;：只要可调用对象返回此值，就可以切换到下一个期货 &lt;/li&gt;&lt;li&gt;- &lt;code&gt;False&lt;/code&gt;：不能进行到期转换&lt;/li&gt;&lt;/ul&gt;例如，如果某商品在3月的第三个星期五到期，&lt;code&gt;checkdate&lt;/code&gt;可以在到期所在的一整周内返回&lt;code&gt;True&lt;/code&gt;。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;checkcondition&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;None&lt;/td&gt;
 &lt;td&gt;仅当&lt;code&gt;checkdate&lt;/code&gt;返回&lt;code&gt;True&lt;/code&gt;时才会调用此参数。如果为&lt;code&gt;None&lt;/code&gt;，则内部评估为&lt;code&gt;True&lt;/code&gt;（执行滚动）。否则，它必须是一个可调用对象，签名是 &lt;code&gt;checkcondition(d0, d1)&lt;/code&gt; &lt;ul&gt;&lt;li/&gt;- &lt;code&gt;d0&lt;/code&gt;是当前活跃期货的数据源&lt;/li&gt;&lt;li&gt;- &lt;code&gt;d1&lt;/code&gt;是下一个到期的数据源&lt;/li&gt;&lt;/ul&gt;预期返回值：&lt;ul&gt;&lt;li&gt;- &lt;code&gt;True&lt;/code&gt;：滚动到下一个期货&lt;/li&gt;&lt;li&gt;- &lt;code&gt;False&lt;/code&gt;：不能进行到期转换&lt;/li&gt;&lt;/ul&gt;例如，可以通过&lt;code&gt;checkcondition&lt;/code&gt;判断，如果&lt;code&gt;d0&lt;/code&gt;的交易量小于&lt;code&gt;d1&lt;/code&gt;，则进行到期转换。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="子类化rollover"&gt;子类化RollOver&lt;a class="anchor" href="#%e5%ad%90%e7%b1%bb%e5%8c%96rollover"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果指定的可调用对象还不够用，可以子类化&lt;code&gt;RollOver&lt;/code&gt;。需要子类化的方法有：&lt;/p&gt;</description></item><item><title>Yahoo 数据源说明</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/10-datafeed-yahoo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/10-datafeed-yahoo/</guid><description>&lt;h1 id="yahoo-数据源说明"&gt;Yahoo 数据源说明&lt;a class="anchor" href="#yahoo-%e6%95%b0%e6%8d%ae%e6%ba%90%e8%af%b4%e6%98%8e"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在 2017 年 5 月，Yahoo 停用了现有的 CSV 格式的历史数据下载 API。&lt;/p&gt;
&lt;p&gt;很快，新 API（这里称为 v7）被标准化并已实现。&lt;/p&gt;
&lt;p&gt;这也带来了实际 CSV 下载格式的变化。&lt;/p&gt;
&lt;h4 id="使用-v7-api格式"&gt;使用 v7 API/格式&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8-v7-api%e6%a0%bc%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;从版本 1.9.49.116 开始，这是默认行为。可以简单地选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;YahooFinanceData&lt;/strong&gt; 用于在线下载&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YahooFinanceCSVData&lt;/strong&gt; 用于离线下载的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="使用旧的-api格式"&gt;使用旧的 API/格式&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e6%97%a7%e7%9a%84-api%e6%a0%bc%e5%bc%8f"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;要使用旧的 API/格式，可以：&lt;/p&gt;
&lt;p&gt;在线 Yahoo 数据源实例化如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; version&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;离线 Yahoo 数据源实例化如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooFinanceCSVData(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; version&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可能在线服务会恢复（服务在没有任何公告的情况下被停用……它也可能会恢复）&lt;/p&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;p&gt;仅用于在变更前下载的离线文件，也可以这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;YahooLegacyCSV(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;新的 &lt;strong&gt;YahooLegacyCSV&lt;/strong&gt; 简化了使用 &lt;code&gt;version=''&lt;/code&gt; 的操作。&lt;/p&gt;</description></item><item><title>Pandas 数据源示例</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/11-datafeed-pandas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/11-datafeed-pandas/</guid><description>&lt;h1 id="pandas-数据源示例"&gt;Pandas 数据源示例&lt;a class="anchor" href="#pandas-%e6%95%b0%e6%8d%ae%e6%ba%90%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，需要安装 pandas 及其依赖项。支持 Pandas Dataframe 对很多人来说很重要，他们依赖于 Pandas 提供的不同数据源（包括 CSV）的解析代码及其他功能。&lt;/p&gt;
&lt;h2 id="数据源的重要声明"&gt;数据源的重要声明&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e7%9a%84%e9%87%8d%e8%a6%81%e5%a3%b0%e6%98%8e"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些只是声明。不要盲目复制此代码。请参见下面的实际用法示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PandasData&lt;/span&gt;(feed&lt;span style="color:#f92672"&gt;.&lt;/span&gt;DataBase):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ``dataname`` 参数继承自 ``feed.DataBase`` 是 pandas DataFrame
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; params &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# datetime 的可能值（必须始终存在）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# None : datetime 是 Pandas Dataframe 中的 &amp;#34;index&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# -1 : 自动检测位置或大小写相同的名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# &amp;gt;= 0 : pandas dataframe 中列的数值索引&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# string : pandas dataframe 中的列名（作为索引）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 下面是可能的值：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# None : 列不存在&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# -1 : 自动检测位置或大小写相同的名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# &amp;gt;= 0 : pandas dataframe 中列的数值索引&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# string : pandas dataframe 中的列名（作为索引）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;high&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;low&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;volume&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;openinterest&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述 PandasData 类的片段展示了关键点：&lt;/p&gt;</description></item><item><title>数据源参考</title><link>https://www.poloxue.com/backtrader/docs/06-datafeed/12-datafeed-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/06-datafeed/12-datafeed-reference/</guid><description>&lt;h3 id="数据源参考"&gt;数据源参考&lt;a class="anchor" href="#%e6%95%b0%e6%8d%ae%e6%ba%90%e5%8f%82%e8%80%83"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id="abstractdatabase"&gt;AbstractDataBase&lt;a class="anchor" href="#abstractdatabase"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;数据行（Lines）:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;volume&lt;/li&gt;
&lt;li&gt;openinterest&lt;/li&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数（Params）:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dataname (None)&lt;/li&gt;
&lt;li&gt;name ()&lt;/li&gt;
&lt;li&gt;compression (1)&lt;/li&gt;
&lt;li&gt;timeframe (5)&lt;/li&gt;
&lt;li&gt;fromdate (None)&lt;/li&gt;
&lt;li&gt;todate (None)&lt;/li&gt;
&lt;li&gt;sessionstart (None)&lt;/li&gt;
&lt;li&gt;sessionend (None)&lt;/li&gt;
&lt;li&gt;filters ([])&lt;/li&gt;
&lt;li&gt;tz (None)&lt;/li&gt;
&lt;li&gt;tzinput (None)&lt;/li&gt;
&lt;li&gt;qcheck (0.0)&lt;/li&gt;
&lt;li&gt;calendar (None)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="backtradercsvdata"&gt;BacktraderCSVData&lt;a class="anchor" href="#backtradercsvdata"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;解析用于测试的自定义 CSV 数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特定参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dataname: 要解析的文件名或类文件对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据行：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;close&lt;/li&gt;
&lt;li&gt;low&lt;/li&gt;
&lt;li&gt;high&lt;/li&gt;
&lt;li&gt;open&lt;/li&gt;
&lt;li&gt;volume&lt;/li&gt;
&lt;li&gt;openinterest&lt;/li&gt;
&lt;li&gt;datetime&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;参数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dataname (None)&lt;/li&gt;
&lt;li&gt;name ()&lt;/li&gt;
&lt;li&gt;compression (1)&lt;/li&gt;
&lt;li&gt;timeframe (5)&lt;/li&gt;
&lt;li&gt;fromdate (None)&lt;/li&gt;
&lt;li&gt;todate (None)&lt;/li&gt;
&lt;li&gt;sessionstart (None)&lt;/li&gt;
&lt;li&gt;sessionend (None)&lt;/li&gt;
&lt;li&gt;filters ([])&lt;/li&gt;
&lt;li&gt;tz (None)&lt;/li&gt;
&lt;li&gt;tzinput (None)&lt;/li&gt;
&lt;li&gt;qcheck (0.0)&lt;/li&gt;
&lt;li&gt;calendar (None)&lt;/li&gt;
&lt;li&gt;headers (True)&lt;/li&gt;
&lt;li&gt;separator (,)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="csvdatabase"&gt;CSVDataBase&lt;a class="anchor" href="#csvdatabase"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;用于实现 CSV 数据源的基类。&lt;/p&gt;</description></item></channel></rss>