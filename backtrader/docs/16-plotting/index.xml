<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>绘图 on Backtrader 中文</title><link>https://www.poloxue.com/backtrader/docs/16-plotting/</link><description>Recent content in 绘图 on Backtrader 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/backtrader/docs/16-plotting/index.xml" rel="self" type="application/rss+xml"/><item><title>Plotting</title><link>https://www.poloxue.com/backtrader/docs/16-plotting/01-plotting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/16-plotting/01-plotting/</guid><description>绘图 # 尽管回测主要是基于数学计算的自动化过程，但人们常常希望能够实际可视化所发生的一切。不论是使用已经经过回测的现有算法，还是查看数据所产生的内置或自定义指标，绘图都能帮助人们更好地理解所发生的事情，剔除、修改或创建新的想法。
由于所有操作背后都是人类，绘制数据馈送、指标、操作、现金流动和投资组合价值的演变图表有助于人们更好地理解过程，从而做出更明智的决策。因此，backtrader 使用 matplotlib 提供的功能，内置了绘图设施。
如何绘图 # 任何回测运行都可以通过调用一个方法进行绘图：
cerebro.plot() 当然，这通常是最后一个命令。例如，以下简单代码使用了 backtrader 源代码中的一个示例数据：
from __future__ import (absolute_import, division, print_function, unicode_literals) import backtrader as bt class St(bt.Strategy): def __init__(self): self.sma = bt.indicators.SimpleMovingAverage(self.data) data = bt.feeds.BacktraderCSVData(dataname=&amp;#39;../../datas/2005-2006-day-001.txt&amp;#39;) cerebro = bt.Cerebro() cerebro.adddata(data) cerebro.addstrategy(St) cerebro.run() cerebro.plot() 这将生成以下图表：
图表包含了 3 个观察器，由于缺乏任何交易，它们在这种情况下几乎没有意义：
CashValue 观察器：跟踪回测运行期间的现金和总投资组合价值（包括现金）。 Trade 观察器：在交易结束时显示实际的利润和亏损。交易定义为开仓并将仓位归零（直接或从多头转为空头或从空头转为多头）。 BuySell 观察器：在价格图上绘制买入和卖出操作的位置。 这 3 个观察器由 cerebro 自动添加，可以通过 stdstats 参数控制（默认：True）。如果希望禁用它们，可以如下操作：
cerebro = bt.Cerebro(stdstats=False) 或在运行时：
cerebro = bt.Cerebro() ... cerebro.run(stdstats=False) 绘图元素 # 尽管前面提到了观察器，它们并不是唯一被绘制的元素。以下 3 种元素会被绘制：</description></item><item><title>绘制日期范围</title><link>https://www.poloxue.com/backtrader/docs/16-plotting/02-ploting-date-ranges/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/16-plotting/02-ploting-date-ranges/</guid><description>日期范围 # 在 1.9.31.x 版本中，backtrader 增加了部分绘图的功能。
可以使用策略实例中保存的完整时间戳数组的索引来指定绘图范围
也可以使用实际的 datetime.date 或 datetime.datetime 实例来限制绘图范围。
仍然通过标准的 cerebro.plot 进行。例如：
cerebro.plot(start=datetime.date(2005, 7, 1), end=datetime.date(2006, 1, 31)) 这对人类来说是最直接的方法。具有扩展能力的人类实际上可以尝试使用时间戳的索引，如下所示：
cerebro.plot(start=75, end=185) 下面是一个非常标准的示例，其中包含一个简单移动平均线（在数据上绘图）、一个随机指标（独立绘图）以及随机指标线的交叉。在命令行参数中传递给 cerebro.plot 的参数。
使用日期方法的执行：
./partial-plot.py --plot &amp;#39;start=datetime.date(2005, 7, 1),end=datetime.date(2006, 1, 31)&amp;#39; Python 中的 eval 魔法允许直接在命令行中编写 datetime.date 并将其映射到实际有意义的内容。输出图表如下所示：
让我们将其与完整的绘图进行比较，以查看数据是否确实从两端跳过：
./partial-plot.py --plot Python 中的 eval 魔法允许直接在命令行中编写 datetime.date 并将其映射到实际有意义的内容。输出图表如下所示：
示例用法 # $ ./partial-plot.py --help usage: partial-plot.py [-h] [--data0 DATA0] [--fromdate FROMDATE] [--todate TODATE] [--cerebro kwargs] [--broker kwargs] [--sizer kwargs] [--strat kwargs] [--plot [kwargs]] Sample for partial plotting optional arguments: -h, --help show this help message and exit --data0 DATA0 Data to read in (default: .</description></item><item><title>同轴绘图</title><link>https://www.poloxue.com/backtrader/docs/16-plotting/03-plotting-same-axis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/16-plotting/03-plotting-same-axis/</guid><description>在同轴绘图 # 在之前的文章“future-spot”中，我们在同一空间上绘制了原始数据和略微（随机）修改后的数据，但它们并没有在同一轴上绘制。
恢复该文章的第一张图片：
我们可以看到：
图表的左右两侧有不同的刻度。 当观察摆动的红线（随机化数据）时最明显，它在原始数据周围上下摆动大约 50 个点。 在图表上，视觉印象是这种随机化数据大部分时间都在原始数据上方。这只是由于不同刻度导致的视觉印象。 虽然 1.9.32.116 版本已经初步支持完全在同一轴上绘图，但图例标签会重复（仅标签，不是数据），这会让人感到困惑。
1.9.33.116 版本修复了这个问题，允许完全在同一轴上绘图。使用模式类似于选择使用哪个数据进行绘图。在之前的文章中：
import backtrader as bt cerebro = bt.Cerebro() data0 = bt.feeds.MyFavouriteDataFeed(dataname=&amp;#39;futurename&amp;#39;) cerebro.adddata(data0) data1 = bt.feeds.MyFavouriteDataFeed(dataname=&amp;#39;spotname&amp;#39;) data1.compensate(data0) # 告诉系统 data1 的操作影响 data0 data1.plotinfo.plotmaster = data0 data1.plotinfo.sameaxis = True cerebro.adddata(data1) ... cerebro.run() data1 获取一些 plotinfo 值来：
与 plotmaster（即 data0）在同一空间绘图。 获取使用 sameaxis 的指示。 原因是平台无法提前知道每个数据的刻度是否兼容。因此，它们会在独立的刻度上绘图。
在之前的示例中，增加了一个选项在 sameaxis 上绘图。示例执行：
$ ./future-spot.py --sameaxis 结果图表：
需要注意的是：
右侧只有一个刻度。 现在，随机化数据似乎明显在原始数据周围摆动，这是预期的视觉行为。 示例用法 # $ ./future-spot.py --help usage: future-spot.</description></item></channel></rss>