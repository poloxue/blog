<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sizer on Backtrader 中文</title><link>https://www.poloxue.com/backtrader/docs/14-sizers/</link><description>Recent content in Sizer on Backtrader 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/backtrader/docs/14-sizers/index.xml" rel="self" type="application/rss+xml"/><item><title>sizers</title><link>https://www.poloxue.com/backtrader/docs/14-sizers/01-sizers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/14-sizers/01-sizers/</guid><description>Sizers # 策略提供交易方法，即：buy、sell 和 close。让我们看看 buy 的签名：
def buy(self, data=None, size=None, price=None, plimit=None, exectype=None, valid=None, tradeid=0, **kwargs): 注意，如果调用者没有指定 size，则 size 的默认值为 None。这就是 Sizers 发挥重要作用的地方：
size=None 请求策略向其 Sizer 询问实际的头寸大小 这显然意味着策略有一个 Sizer：是的，确实如此！如果用户没有添加 Sizer，后台机制会为策略添加一个默认的 Sizer。添加到策略中的默认 Sizer 是 SizerFix。定义的初始行：
class SizerFix(SizerBase): params = ((&amp;#39;stake&amp;#39;, 1),) 很容易猜到这个 Sizer 只是使用 1 个单位（无论是股票、合约等）买卖。
使用 Sizers # 从 Cerebro # Sizers 可以通过 Cerebro 以两种不同的方法添加：
addsizer(sizercls, *args, **kwargs)：添加一个 Sizer，将应用于添加到 cerebro 的任何策略。这就是所谓的默认 Sizer。例如： cerebro = bt.Cerebro() cerebro.addsizer(bt.sizers.SizerFix, stake=20) # 默认策略的 Sizer addsizer_byidx(idx, sizercls, *args, **kwargs)：只将 Sizer 添加到 idx 引用的策略中。 这个 idx 可以作为 addstrategy 的返回值获得。例如：</description></item><item><title>参考</title><link>https://www.poloxue.com/backtrader/docs/14-sizers/02-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/14-sizers/02-reference/</guid><description> 参考 # FixedSize # class backtrader.sizers.FixedSize() 此 Sizer 仅为任何操作返回固定大小。通过指定 tranches 参数，可以控制系统希望用于逐步进入交易的批次数量。
参数：
stake（默认：1） tranches（默认：1） FixedReverser # class backtrader.sizers.FixedReverser() 此 Sizer 返回反转已开头寸所需的固定大小或开仓所需的固定大小。
开仓：返回参数 stake 反转头寸：返回 2 * stake 参数：
stake（默认：1） PercentSizer # class backtrader.sizers.PercentSizer() 此 Sizer 返回可用现金的百分比。
参数：
percents（默认：20） AllInSizer # class backtrader.sizers.AllInSizer() 此 Sizer 返回经纪人所有可用现金。
参数：
percents（默认：100） PercentSizerInt # class backtrader.sizers.PercentSizerInt() 此 Sizer 以整数形式返回可用现金的百分比，并将大小截断为整数。
参数：
percents（默认：20） AllInSizerInt # class backtrader.sizers.AllInSizerInt() 此 Sizer 返回经纪人所有可用现金，并将大小截断为整数。
参数：
percents（默认：100）</description></item></channel></rss>