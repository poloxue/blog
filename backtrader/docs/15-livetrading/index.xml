<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>实盘 on Backtrader 中文</title><link>https://www.poloxue.com/backtrader/docs/15-livetrading/</link><description>Recent content in 实盘 on Backtrader 中文</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/backtrader/docs/15-livetrading/index.xml" rel="self" type="application/rss+xml"/><item><title>Interactive Brokers</title><link>https://www.poloxue.com/backtrader/docs/15-livetrading/01-interactive-brokers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/15-livetrading/01-interactive-brokers/</guid><description>&lt;h1 id="盈透interactive-brokers"&gt;盈透（Interactive Brokers）&lt;a class="anchor" href="#%e7%9b%88%e9%80%8finteractive-brokers"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;与盈透（Interactive Brokers）的集成支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时数据馈送&lt;/li&gt;
&lt;li&gt;实时交易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：尽管已经尽力测试了尽可能多的错误条件和情况，但代码（像任何其他软件一样）可能包含错误。在进入生产环境之前，请使用纸面交易账户或 TWS 演示帐户彻底测试任何策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：与互动经纪商的交互是通过使用 IbPy 模块进行的，该模块在使用前必须安装。目前在 Pypi 中没有该模块的包（撰写本文时），但可以使用以下命令通过 pip 安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip install git+https://github.com/blampe/IbPy.git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果您的系统中没有 git（例如在 Windows 上安装），以下命令也可以正常工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip install https://github.com/blampe/IbPy/archive/master.zip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;源码包含一个完整的示例，位于：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;samples/ibtest/ibtest.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该示例无法涵盖所有可能的用例，但它试图提供广泛的见解，并应强调在使用回测模块或实时数据模块时没有实际差异。&lt;/p&gt;
&lt;p&gt;需要注意的一点是：&lt;/p&gt;
&lt;p&gt;示例在任何交易活动开始之前，都会等待 &lt;code&gt;data.LIVE&lt;/code&gt; 数据状态通知。这可能是任何实时策略中都需要考虑的事项。&lt;/p&gt;
&lt;h2 id="存储模型与直接模型"&gt;存储模型与直接模型&lt;a class="anchor" href="#%e5%ad%98%e5%82%a8%e6%a8%a1%e5%9e%8b%e4%b8%8e%e7%9b%b4%e6%8e%a5%e6%a8%a1%e5%9e%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;与互动经纪商的交互支持两种模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存储模型（推荐）&lt;/li&gt;
&lt;li&gt;直接与数据馈送类和经纪商类交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;存储模型提供了一种明确的分离模式，用于创建经纪商和数据。以下两个代码片段应更好地作为示例。&lt;/p&gt;
&lt;p&gt;首先是存储模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ibstore &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stores&lt;span style="color:#f92672"&gt;.&lt;/span&gt;IBStore(host&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, port&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7496&lt;/span&gt;, clientId&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;35&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; ibstore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;EUR.USD-CASH-IDEALPRO&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里的参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;，&lt;code&gt;port&lt;/code&gt; 和 &lt;code&gt;clientId&lt;/code&gt; 传递到 IBStore 中，用于打开连接。&lt;/li&gt;
&lt;li&gt;然后使用 &lt;code&gt;getdata&lt;/code&gt; 创建数据馈送，并使用 backtrader 中所有数据馈送中常见的参数 &lt;code&gt;dataname&lt;/code&gt; 请求 EUR/USD 外汇对。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接使用模型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;feeds&lt;span style="color:#f92672"&gt;.&lt;/span&gt;IBData(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;EUR.USD-CASH-IDEALPRO&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; host&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;, port&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;7496&lt;/span&gt;, clientId&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;35&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这里：&lt;/p&gt;</description></item><item><title>Qanda</title><link>https://www.poloxue.com/backtrader/docs/15-livetrading/02-qanda-v1-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/15-livetrading/02-qanda-v1-0/</guid><description>&lt;h1 id="oanda"&gt;Oanda&lt;a class="anchor" href="#oanda"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Oanda的集成支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时数据馈送&lt;/li&gt;
&lt;li&gt;实时交易&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="要求"&gt;要求&lt;a class="anchor" href="#%e8%a6%81%e6%b1%82"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;oandapy&lt;/strong&gt;：可以通过以下命令安装：&lt;code&gt;pip install git+https://github.com/oanda/oandapy.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pytz&lt;/strong&gt;（可选，不推荐）：由于外汇市场的全球性和24x7的特点，选择使用UTC时间。如果愿意，仍然可以使用所需的输出时区。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;源代码中包含完整示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;samples/oandatest/oandatest.py&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="oanda---存储"&gt;Oanda - 存储&lt;a class="anchor" href="#oanda---%e5%ad%98%e5%82%a8"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;存储是实时数据馈送和交易支持的核心，提供了Oanda API和数据馈送及经纪代理之间的适配层。&lt;/p&gt;
&lt;p&gt;可以通过以下方法获取经纪商实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OandaStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbroker(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过以下方法获取数据馈送实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;OandaStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，许多**kwargs是数据馈送的常见参数，如dataname、fromdate、todate、sessionstart、sessionend、timeframe、compression。&lt;/p&gt;
&lt;p&gt;数据可能提供其他参数。请参阅下面的参考。&lt;/p&gt;
&lt;h2 id="必要参数"&gt;必要参数&lt;a class="anchor" href="#%e5%bf%85%e8%a6%81%e5%8f%82%e6%95%b0"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为了成功连接到Oanda，以下参数是必要的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt;（默认：无）：API访问令牌&lt;/li&gt;
&lt;li&gt;&lt;code&gt;account&lt;/code&gt;（默认：无）：账户ID&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些由Oanda提供。&lt;/p&gt;
&lt;p&gt;无论是连接到模拟服务器还是真实服务器，请使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;practice&lt;/code&gt;（默认：False）：使用测试环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;账户需要定期检查以获取现金和价值。周期性可以通过以下方式控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;account_tmout&lt;/code&gt;（默认：10.0）：刷新账户价值/现金刷新周期&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="oanda数据馈送"&gt;Oanda数据馈送&lt;a class="anchor" href="#oanda%e6%95%b0%e6%8d%ae%e9%a6%88%e9%80%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;实例化数据时：&lt;/p&gt;
&lt;p&gt;按照Oanda指南传递符号。例如，EUR/USD根据Oanda的指南需要指定为EUR_USD。实例化如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;data &lt;span style="color:#f92672"&gt;=&lt;/span&gt; oandastore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(dataname&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;EUR_USD&amp;#39;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;...&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="时间管理"&gt;时间管理&lt;a class="anchor" href="#%e6%97%b6%e9%97%b4%e7%ae%a1%e7%90%86"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;除非传递了&lt;code&gt;tz&lt;/code&gt;参数（一个pytz兼容对象）给数据馈送，否则所有时间输出都以UTC格式表示，如上所述。&lt;/p&gt;
&lt;h2 id="回填"&gt;回填&lt;a class="anchor" href="#%e5%9b%9e%e5%a1%ab"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;backtrader不会向Oanda发出特殊请求。对于小时间框架，Oanda在模拟服务器上返回的回填数据长度为500个柱。&lt;/p&gt;
&lt;h2 id="oandabroker---实时交易"&gt;OandaBroker - 实时交易&lt;a class="anchor" href="#oandabroker---%e5%ae%9e%e6%97%b6%e4%ba%a4%e6%98%93"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id="使用经纪商"&gt;使用经纪商&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e7%bb%8f%e7%ba%aa%e5%95%86"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要使用OandaBroker，需要替换cerebro创建的标准经纪商模拟实例。&lt;/p&gt;
&lt;p&gt;使用存储模型（推荐）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; backtrader &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;Cerebro()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;oandastore &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bt&lt;span style="color:#f92672"&gt;.&lt;/span&gt;stores&lt;span style="color:#f92672"&gt;.&lt;/span&gt;OandaStore()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cerebro&lt;span style="color:#f92672"&gt;.&lt;/span&gt;broker &lt;span style="color:#f92672"&gt;=&lt;/span&gt; oandastore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbroker() &lt;span style="color:#75715e"&gt;# 或 cerebro.setbroker(...)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="经纪商---初始头寸"&gt;经纪商 - 初始头寸&lt;a class="anchor" href="#%e7%bb%8f%e7%ba%aa%e5%95%86---%e5%88%9d%e5%a7%8b%e5%a4%b4%e5%af%b8"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;经纪商支持一个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use_positions&lt;/code&gt;（默认：True）：连接到经纪商提供商时使用现有头寸来启动经纪商。
在实例化时设置为False以忽略任何现有头寸。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="操作"&gt;操作&lt;a class="anchor" href="#%e6%93%8d%e4%bd%9c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用方面没有变化。只需使用策略中提供的方法（请参阅策略参考以获取完整说明）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;buy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="订单执行类型"&gt;订单执行类型&lt;a class="anchor" href="#%e8%ae%a2%e5%8d%95%e6%89%a7%e8%a1%8c%e7%b1%bb%e5%9e%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Oanda支持几乎所有backtrader需要的订单执行类型，除了Close。因此，订单执行类型限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Order.Market&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.Limit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.Stop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.StopLimit&lt;/code&gt;（使用Stop和upperBound/lowerBound价格）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Order.StopTrail&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过使用&lt;code&gt;takeprofit&lt;/code&gt;和&lt;code&gt;stoploss&lt;/code&gt;订单成员并创建内部模拟订单来支持括号订单。&lt;/p&gt;</description></item><item><title>Visual Chart</title><link>https://www.poloxue.com/backtrader/docs/15-livetrading/03-visual-chart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/backtrader/docs/15-livetrading/03-visual-chart/</guid><description>&lt;h1 id="visual-chart"&gt;Visual Chart&lt;a class="anchor" href="#visual-chart"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Visual Chart 的集成支持以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时数据馈送&lt;/li&gt;
&lt;li&gt;实时交易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visual Chart 是一个完整的交易解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集成图表、数据馈送和经纪功能于单一平台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有关更多信息，请访问：&lt;a href="http://www.visualchart.com"&gt;www.visualchart.com&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="要求"&gt;要求&lt;a class="anchor" href="#%e8%a6%81%e6%b1%82"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VisualChart 6&lt;/strong&gt;（运行在 Windows 上）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;comtypes fork&lt;/strong&gt;： &lt;a href="https://github.com/mementum/comtypes"&gt;https://github.com/mementum/comtypes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以通过以下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pip install https://github.com/mementum/comtypes/archive/master.zip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Visual Chart 的 API 基于 COM。目前 comtypes 主分支不支持解包 VT_ARRAYS of VT_RECORD。这是 Visual Chart 所使用的。Pull Request #104 已提交，但尚未集成。一旦集成，可以使用主分支。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pytz&lt;/strong&gt;（可选但强烈推荐）：确保每个数据都在市场时间返回。这对于大多数市场来说都是正确的，但有些市场确实是例外（全球指数就是一个很好的例子）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="示例代码"&gt;示例代码&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;源代码中包含完整示例：&lt;code&gt;samples/vctest/vctest.py&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="vcstore---存储"&gt;VCStore - 存储&lt;a class="anchor" href="#vcstore---%e5%ad%98%e5%82%a8"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;存储是实时数据馈送/交易支持的核心，提供了 COM API 和数据馈送及经纪代理之间的适配层。&lt;/p&gt;
&lt;p&gt;可以通过以下方法获取经纪商实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VCStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getbroker(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以通过以下方法获取数据馈送实例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VCStore&lt;span style="color:#f92672"&gt;.&lt;/span&gt;getdata(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;args, &lt;span style="color:#f92672"&gt;**&lt;/span&gt;kwargs)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这种情况下，许多 **kwargs 是数据馈送的常见参数，如 dataname、fromdate、todate、sessionstart、sessionend、timeframe、compression。&lt;/p&gt;
&lt;p&gt;VCStore 将尝试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Windows 注册表自动定位 VisualChart 在系统中的位置。&lt;/li&gt;
&lt;li&gt;如果找到，将扫描安装目录中的 COM DLLs 以创建 COM typelibs 并实例化适当的对象。&lt;/li&gt;
&lt;li&gt;如果未找到，将尝试使用已知和硬编码的 CLSIDs 进行相同操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：即使通过扫描文件系统找到 DLLs，Visual Chart 本身也必须在运行。backtrader 不会启动 Visual Chart。&lt;/p&gt;</description></item></channel></rss>