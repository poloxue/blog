<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>控件 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/05-widget/</link><description>Recent content in 控件 on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/05-widget/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 标签 Label</title><link>https://www.poloxue.com/gofyne/docs/05-widget/01-label/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/05-widget/01-label/</guid><description> 标签 Label # Widgets 是 Fyne 应用程序 GUI 的主要组件，它们可以被用在任何一个基本的 fyne.CanvasObject 可以使用的地方。它们管理用户交互，并且总是与当前主题相匹配。
Label widget 是最简单的一个 - 它向用户展示文本。与 canvas.Text 不同，它可以处理一些简单的格式化（如 \n）和换行（通过设置 Wrapping 字段）。 你可以通过调用 widget.NewLabel(&amp;quot;some text&amp;quot;) 来创建一个标签，结果可以被赋值给一个变量或直接传递给一个容器。
package main import ( &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;Label Widget&amp;#34;) content := widget.NewLabel(&amp;#34;text&amp;#34;) myWindow.SetContent(content) myWindow.ShowAndRun() }</description></item><item><title>02. 按钮 Button</title><link>https://www.poloxue.com/gofyne/docs/05-widget/02-button/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/05-widget/02-button/</guid><description> 按钮 Button # 按钮控件可以包含文本、图标或两者，构造函数是 widget.NewButton() 和 widget.NewButtonWithIcon()。要创建一个文本按钮，只有两个参数，string 内容和一个没有参数的 func()，当按钮被点击时将调用此函数。参见示例以了解如何创建它。
带有图标的按钮构造函数包含一个额外的参数，即包含图标数据的 fyne.Resource。theme 包中的内置图标都适当地适应主题更改。如果将自己的图像加载为资源，你可以传入自己的图像 - 诸如 fyne.LoadResourceFromPath() 的助手可能会有所帮助，尽可能推荐捆绑资源。
要创建仅带图标的按钮，你应该将 &amp;quot;&amp;quot; 作为标签参数传递给 widget.NewButtonWithIcon()。
package main import ( &amp;#34;log&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; //&amp;#34;fyne.io/fyne/v2/theme&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;按钮控件&amp;#34;) content := widget.NewButton(&amp;#34;点击我&amp;#34;, func() { log.Println(&amp;#34;点击&amp;#34;) }) //content := widget.NewButtonWithIcon(&amp;#34;首页&amp;#34;, theme.HomeIcon(), func() { // log.Println(&amp;#34;点击首页&amp;#34;) //}) myWindow.SetContent(content) myWindow.ShowAndRun() }</description></item><item><title>03. 输入框 Entry</title><link>https://www.poloxue.com/gofyne/docs/05-widget/03-entry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/05-widget/03-entry/</guid><description>输入框 Entry # 输入控件（Entry widget）用于用户输入简单文本内容。可以通过widget.NewEntry()构造函数简单地创建一个输入控件。创建控件时，保留一个引用，以便以后可以访问其Text字段。还可以使用OnChanged回调函数，每当内容变化时都会收到通知。
输入控件还可以有验证功能，用于验证输入的文本。这可以通过设置Validator字段为fyne.StringValidator来完成。你还可以设置PlaceHolder文本，并且设置输入控件为MultiLine以接受多行文本。
package main import ( &amp;#34;log&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;Entry Widget&amp;#34;) input := widget.NewEntry() input.SetPlaceHolder(&amp;#34;Enter text...&amp;#34;) content := container.NewVBox(input, widget.NewButton(&amp;#34;Save&amp;#34;, func() { log.Println(&amp;#34;Content was:&amp;#34;, input.Text) })) myWindow.SetContent(content) myWindow.ShowAndRun() } 你还可以使用NewPasswordEntry()函数创建一个密码输入控件（内容被隐藏）。</description></item><item><title>04. 复选框 Choices</title><link>https://www.poloxue.com/gofyne/docs/05-widget/04-choices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/05-widget/04-choices/</guid><description>复选框 Choices # 有各种控件可用于向用户展示选择，包括复选框、单选按钮组和下拉选择框。
widget.Check 提供一个简单的是/否选择，使用字符串标签创建。这些控件每一个都接受一个 &amp;ldquo;changed&amp;rdquo; func(...)，其中参数类型适用于它们。因此，widget.NewCheck(..) 接受一个 string 参数作为标签和一个 func(bool) 参数作为更改处理器。你也可以使用 Checked 字段来获取布尔值。
单选按钮控件类似，但第一个参数是表示每个选项的 string 切片。这次更改函数期望一个 string 参数，以返回当前选定的值。调用 widget.NewRadioGroup(...) 来构造单选按钮组控件，你可以稍后使用这个引用来读取 Selected 字段，而不是使用更改回调。
下拉选择控件在构造函数签名上与单选按钮控件相同。调用 widget.NewSelect(...) 将显示一个按钮，当点击时会显示一个弹出窗口，用户可以从中进行选择。对于长列表的选项，这更加合适。
package main import ( &amp;#34;log&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;选择控件&amp;#34;) check := widget.NewCheck(&amp;#34;可选&amp;#34;, func(value bool) { log.Println(&amp;#34;复选框设置为&amp;#34;, value) }) radio := widget.NewRadioGroup([]string{&amp;#34;选项 1&amp;#34;, &amp;#34;选项 2&amp;#34;}, func(value string) { log.Println(&amp;#34;单选按钮设置为&amp;#34;, value) }) combo := widget.NewSelect([]string{&amp;#34;选项 1&amp;#34;, &amp;#34;选项 2&amp;#34;}, func(value string) { log.</description></item><item><title>05. 表单 Form</title><link>https://www.poloxue.com/gofyne/docs/05-widget/05-form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/05-widget/05-form/</guid><description> 表单 Form # 表单控件用于排列许多输入字段、标签以及可选的取消和提交按钮。在其最简单的形式中，它将标签对齐到每个输入控件的左侧。通过设置OnCancel或OnSubmit，表单将添加一个按钮栏，当适当时调用指定的处理程序。
可以通过传递widget.FormItem列表使用widget.NewForm(...)创建控件，或者使用示例中所示的&amp;amp;widget.Form{}语法。还有一个有用的Form.Append(label, widget)，可用于另一种语法。
在这个例子中，我们创建了两个输入框，其中一个是“多行”的（类似HTML TextArea）来保存值。有一个OnSubmit处理程序，在关闭窗口（因此是应用程序）之前打印信息。
package main import ( &amp;#34;log&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;表单控件&amp;#34;) entry := widget.NewEntry() textArea := widget.NewMultiLineEntry() form := &amp;amp;widget.Form{ Items: []*widget.FormItem{ // 我们可以在构造函数中指定项 {Text: &amp;#34;输入框&amp;#34;, Widget: entry}}, OnSubmit: func() { // 可选，处理表单提交 log.Println(&amp;#34;表单提交：&amp;#34;, entry.Text) log.Println(&amp;#34;多行：&amp;#34;, textArea.Text) myWindow.Close() }, } // 我们也可以追加项目 form.Append(&amp;#34;文本&amp;#34;, textArea) myWindow.SetContent(form) myWindow.ShowAndRun() }</description></item><item><title>06. 进度条 ProgressBar</title><link>https://www.poloxue.com/gofyne/docs/05-widget/06-progressbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/05-widget/06-progressbar/</guid><description> 进度条 ProgressBar # 进度条控件有两种形式，标准进度条向用户显示已达到的 Value，从 Min 到 Max。默认最小值是 0.0，最大值默认为 1.0。要使用默认值，只需调用 widget.NewProgressBar()。创建后，你可以设置 Value 字段。
要设置自定义范围，你可以手动设置 Min 和 Max 字段。标签将始终显示完成百分比。
进度控件的另一种形式是无限进度条。此版本仅通过将条的一部分从左向右移动然后再移动回来，简单地显示一些活动正在进行中。使用 widget.NewProgressBarInfinite() 创建此版本，并且一旦显示就会开始动画。
package main import ( &amp;#34;time&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;进度条控件&amp;#34;) progress := widget.NewProgressBar() infinite := widget.NewProgressBarInfinite() go func() { for i := 0.0; i &amp;lt;= 1.0; i += 0.1 { time.Sleep(time.Millisecond * 250) progress.SetValue(i) } }() myWindow.SetContent(container.NewVBox(progress, infinite)) myWindow.ShowAndRun() }</description></item><item><title>07. 工具栏 Toolbar</title><link>https://www.poloxue.com/gofyne/docs/05-widget/07-toolbar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/05-widget/07-toolbar/</guid><description>工具栏 Toolbar # 工具栏控件使用图标创建一行动作按钮来表示每个操作。widget.NewToolbar(...) 构造函数接受一系列 widget.ToolbarItem 参数。内置的工具栏项目类型有动作，分隔符和空格器。
最常用的项目是动作，使用 widget.NewToolbarAction(..) 函数创建。动作有两个参数，第一个是要绘制的图标资源，后一个是点击时调用的 func()。这样创建了一个标准的工具栏按钮。
你可以使用 widget.NewToolbarSeparator() 在工具栏中的项目之间创建一个小分隔符（通常是一个细的垂直线）。最后，你可以使用 widget.NewToolbarSpacer() 在元素之间创建一个灵活的空间。这最适合用于右对齐列表中的工具栏项目。
工具栏应始终位于内容区域的顶部，所以通常使用 layout.BorderLayout 将其添加到 fyne.Container 中，以便将其与其他内容对齐。
package main import ( &amp;#34;log&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/theme&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;工具栏控件&amp;#34;) toolbar := widget.NewToolbar( widget.NewToolbarAction(theme.DocumentCreateIcon(), func() { log.Println(&amp;#34;新建文档&amp;#34;) }), widget.NewToolbarSeparator(), widget.NewToolbarAction(theme.ContentCutIcon(), func() {}), widget.NewToolbarAction(theme.ContentCopyIcon(), func() {}), widget.NewToolbarAction(theme.ContentPasteIcon(), func() {}), widget.NewToolbarSpacer(), widget.NewToolbarAction(theme.HelpIcon(), func() { log.Println(&amp;#34;显示帮助&amp;#34;) }), ) content := container.NewBorder(toolbar, nil, nil, nil, widget.</description></item></channel></rss>