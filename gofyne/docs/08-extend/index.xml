<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>扩展新类型 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/08-extend/</link><description>Recent content in 扩展新类型 on Go Fyne 中文</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/08-extend/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 自定义布局 Layout</title><link>https://www.poloxue.com/gofyne/docs/08-extend/01-custom-layout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/01-custom-layout/</guid><description>&lt;h2 id="自定义布局-layout"&gt;自定义布局 Layout&lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%b8%83%e5%b1%80-layout"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在Fyne应用程序中，每个&lt;code&gt;Container&lt;/code&gt;都使用一个简单的布局算法来排列其子元素。Fyne在&lt;code&gt;fyne.io/fyne/v2/layout&lt;/code&gt;包中定义了许多可用的布局。如果你查看代码，你会看到它们都实现了&lt;code&gt;Layout&lt;/code&gt;接口。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Layout&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Layout&lt;/span&gt;([]&lt;span style="color:#a6e22e"&gt;CanvasObject&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MinSize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;objects&lt;/span&gt; []&lt;span style="color:#a6e22e"&gt;CanvasObject&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;任何应用程序都可以提供一个自定义布局来以非标准的方式排列控件。为此，你需要在自己的代码中实现上述接口。为了说明这一点，我们将创建一个新的布局，该布局将元素排列在对角线上，并排列到其容器的左下角。&lt;/p&gt;
&lt;p&gt;首先，我们将定义一个新类型&lt;code&gt;diagonal&lt;/code&gt;，并定义其最小大小将是多少。为了计算这个，我们只需添加所有子元素（指定为&lt;code&gt;MinSize&lt;/code&gt;的&lt;code&gt;[]fyne.CanvasObject&lt;/code&gt;参数）的宽度和高度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;diagonal&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;d&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;diagonal&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;MinSize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;objects&lt;/span&gt; []&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CanvasObject&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;h&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; float32(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;), float32(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;objects&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;childSize&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;o&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MinSize&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;childSize&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Width&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;h&lt;/span&gt; &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;childSize&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Height&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewSize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;h&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对这个类型，我们添加一个&lt;code&gt;Layout()&lt;/code&gt;函数，该函数应该将所有指定的对象移动到第二个参数中指定的&lt;code&gt;fyne.Size&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;在我们的实现中，我们计算控件的左上角位置（这是&lt;code&gt;0&lt;/code&gt; x参数，并且有一个y位置，即容器的高度减去所有子项高度的总和）。从顶部位置开始，我们简单地将每个项目位置按前一个子项目的大小向前移动。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;d&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;diagonal&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Layout&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;objects&lt;/span&gt; []&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CanvasObject&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;containerSize&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pos&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewPos&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;containerSize&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Height&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;d&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MinSize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;objects&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;Height&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;o&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;objects&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;o&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MinSize&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;o&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Resize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;o&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Move&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pos&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pos&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;pos&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Add&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewPos&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Width&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Height&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;创建自定义布局就是这么简单。现在代码都写好了，我们可以将其作为&lt;code&gt;container.New&lt;/code&gt;的&lt;code&gt;layout&lt;/code&gt;参数使用。下面的代码设置了3个&lt;code&gt;Label&lt;/code&gt;控件，并将它们与我们新的布局放在一个容器中。如果你运行这个应用程序，你将看到对角线控件的排列，并且在调整窗口大小时，它们将对齐到可用空间的左下角。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/container&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Diagonal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;text1&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;topleft&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;text2&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Middle Label&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;text3&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;bottomright&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;container&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;diagonal&lt;/span&gt;{}, &lt;span style="color:#a6e22e"&gt;text1&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;text2&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;text3&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShowAndRun&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>02. 自定义控件 Widget</title><link>https://www.poloxue.com/gofyne/docs/08-extend/02-custom-widget/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/02-custom-widget/</guid><description>&lt;h2 id="自定义控件-widget"&gt;自定义控件 Widget&amp;quot;&lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e6%8e%a7%e4%bb%b6-widget"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;标准控件与 Fyne 一起提供，旨在支持标准用户交互和需求。由于 GUI 经常需要提供自定义功能，因此可能需要编写自定义控件。本文概述了如何进行。&lt;/p&gt;
&lt;p&gt;一个控件被分为两个区域 - 每个都实现一个标准接口 - &lt;code&gt;fyne.Widget&lt;/code&gt; 和 &lt;code&gt;fyne.WidgetRenderer&lt;/code&gt;。控件定义行为和状态，而渲染器用于定义它应如何绘制到屏幕上。&lt;/p&gt;
&lt;h3 id="fynewidget"&gt;fyne.Widget&lt;a class="anchor" href="#fynewidget"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fyne 中的控件简单来说是一个有状态的画布对象，其渲染定义与主逻辑分离。从 &lt;code&gt;fyne.Widget&lt;/code&gt; 接口可以看出，必须实现的内容并不多。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Widget&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;CanvasObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;CreateRenderer&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;WidgetRenderer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于控件需要像任何其他画布项目一样被使用，我们从相同的接口继承。为了省去编写所有必需的函数，我们可以使用 &lt;code&gt;widget.BaseWidget&lt;/code&gt; 类型，它处理了基础内容。&lt;/p&gt;
&lt;p&gt;每个控件定义将包含比接口要求更多的内容。在 Fyne 控件中导出定义行为的字段是标准做法（就像 &lt;code&gt;canvas&lt;/code&gt; 包中定义的原语一样）。&lt;/p&gt;
&lt;p&gt;例如，看看 &lt;code&gt;widget.Button&lt;/code&gt; 类型：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Button&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;BaseWidget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;Text&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;Style&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ButtonStyle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;Icon&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;OnTapped&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以看到这些项目如何存储有关控件行为的状态，但没有关于它如何呈现的信息。&lt;/p&gt;
&lt;h3 id="fynewidgetrenderer"&gt;fyne.WidgetRenderer&lt;a class="anchor" href="#fynewidgetrenderer"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;控件渲染器负责管理一组 &lt;code&gt;fyne.CanvasObject&lt;/code&gt; 原语，这些原语组合在一起创建了我们控件的设计。它很像 &lt;code&gt;fyne.Container&lt;/code&gt;，但有自定义布局和一些额外的主题处理。&lt;/p&gt;
&lt;p&gt;每个控件都必须提供一个渲染器，但完全可以重用另一个控件的渲染器 - 特别是如果你的控件是另一个标准控件的轻量级包装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;WidgetRenderer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;Layout&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;MinSize&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;Refresh&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;Objects&lt;/span&gt;() []&lt;span style="color:#a6e22e"&gt;CanvasObject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;Destroy&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到 &lt;code&gt;Layout(Size)&lt;/code&gt; 和 &lt;code&gt;MinSize()&lt;/code&gt; 函数类似于 &lt;code&gt;fyne.Layout&lt;/code&gt; 接口，但没有 &lt;code&gt;[]fyne.CanvasObject&lt;/code&gt; 参数 - 这是因为控件确实需要布局，但它控制哪些对象将被包含。&lt;/p&gt;</description></item><item><title>03. 资源包 Bundle</title><link>https://www.poloxue.com/gofyne/docs/08-extend/03-bundle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/03-bundle/</guid><description>&lt;h2 id="资源包"&gt;资源包&lt;a class="anchor" href="#%e8%b5%84%e6%ba%90%e5%8c%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基于 Go 的应用程序通常构建为单个二进制可执行文件，Fyne应用程序也是如此。单个文件使我们更容易分发和安装软件。不幸的是，GUI应用程序通常需要额外的资源来渲染用户界面。为了管理这个挑战，Go应用程序可以将资产捆绑到二进制文件本身中。Fyne工具包更喜欢使用&amp;quot;fyne bundle&amp;quot;，因为它有我们将在下面探索的各种好处。&lt;/p&gt;
&lt;p&gt;捆绑资产的基本方法是执行&amp;quot;fyne bundle&amp;quot;命令。这个工具有各种参数来自定义输出，但在其最基本的形式中，要捆绑的文件将被转换为可以构建到您的应用程序中的Go源代码。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;image.png	main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ fyne bundle -o bundled.go image.png
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bundled.go	image.png	main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;bundled.go&lt;/code&gt;的内容将是我们然后可以在代码中访问的资源变量列表。例如，上面的代码将导致包含以下内容的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resourceImagePng&lt;/span&gt; = &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StaticResource&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;StaticName&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;image.png&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;StaticContent&lt;/span&gt;: []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如你所见，默认命名为&amp;quot;resource&amp;lt;Name&amp;gt;.&amp;lt;Ext&amp;gt;&amp;quot;。这个文件中使用的名称和包可以在命令参数中自定义。然后我们可以使用这个名称来，例如，在我们的画布上加载一张图片：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;img&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;canvas&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewImageFromResource&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;resourceImagePng&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fyne资源只是一个带有唯一名称的字节集合，所以这可以是一个字体、一个声音&lt;/p&gt;</description></item><item><title>04. 自定义主题 Theme</title><link>https://www.poloxue.com/gofyne/docs/08-extend/04-custom-theme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/04-custom-theme/</guid><description>&lt;h2 id="自定义主题-theme"&gt;自定义主题 Theme&lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e4%b8%bb%e9%a2%98-theme"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;应用程序能够加载自定义主题，这些主题可以对标准主题进行小的更改，或提供完全独特的外观。一个主题需要实现&lt;code&gt;fyne.Theme&lt;/code&gt;接口的函数，该接口定义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Theme&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Color&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ThemeColorName&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ThemeVariant&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;color&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Color&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Font&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;TextStyle&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Icon&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ThemeIconName&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Resource&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ThemeSizeName&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;float32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要应用我们的主题更改，我们首先定义一个实现了这个接口的新类型。&lt;/p&gt;
&lt;h3 id="定义你的主题"&gt;定义你的主题&lt;a class="anchor" href="#%e5%ae%9a%e4%b9%89%e4%bd%a0%e7%9a%84%e4%b8%bb%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们从定义一个将成为我们主题的新类型开始，一个简单的空结构体就可以了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myTheme&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;断言我们实现了一个接口是个好主意，这样编译错误会更接近于定义类型。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Theme&lt;/span&gt; = (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myTheme&lt;/span&gt;)(&lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时你可能会看到编译错误，因为我们还需要实现方法，我们从颜色开始。&lt;/p&gt;
&lt;h4 id="自定义颜色"&gt;自定义颜色&lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e9%a2%9c%e8%89%b2"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Theme&lt;/code&gt;接口中定义的&lt;code&gt;Color&lt;/code&gt;函数要求我们定义一个命名颜色，并且还为用户期望的变体提供了提示（例如&lt;code&gt;theme.VariantLight&lt;/code&gt;或&lt;code&gt;theme.VariantDark&lt;/code&gt;）。在我们的主题中，我们将返回一个自定义的背景颜色 - 对于明亮和暗黑主题使用不同的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// 需要从&amp;#34;image/color&amp;#34;导入color包。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;m&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myTheme&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Color&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ThemeColorName&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;variant&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ThemeVariant&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;color&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Color&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ColorNameBackground&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;variant&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VariantLight&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;color&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;White&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;color&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Black&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DefaultTheme&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Color&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;variant&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会看到这里的最后一行引用了&lt;code&gt;theme.DefaultTheme()&lt;/code&gt;来查找标准值。这允许我们提供自定义值，但在我们不想提供自己的值时回退到标准主题。&lt;/p&gt;
&lt;p&gt;当然，颜色比资源更简单，我们来看看如何自定义图标。&lt;/p&gt;
&lt;h4 id="覆盖默认图标"&gt;覆盖默认图标&lt;a class="anchor" href="#%e8%a6%86%e7%9b%96%e9%bb%98%e8%ae%a4%e5%9b%be%e6%a0%87"&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;图标（和字体）使用&lt;code&gt;fyne.Resource&lt;/code&gt;作为值，而不是像&lt;code&gt;int&lt;/code&gt;（用于大小）或&lt;code&gt;color.Color&lt;/code&gt;（用于颜色）这样的简单类型。我们可以使用&lt;code&gt;fyne.NewStaticResource&lt;/code&gt;构建自己的资源，或者你可以传入使用&lt;a href="https://developer.fyne.io/tutorial/bundle"&gt;资源嵌入&lt;/a&gt;创建的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;m&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myTheme&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Icon&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ThemeIconName&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Resource&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;IconNameHome&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewStaticResource&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;myHome&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;homeBytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DefaultTheme&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Icon&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上所述，如果我们不想提供特定的覆盖，我们返回默认主题图标。&lt;/p&gt;
&lt;h3 id="加载主题"&gt;加载主题&lt;a class="anchor" href="#%e5%8a%a0%e8%bd%bd%e4%b8%bb%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在你可以加载主题之前，你还需要实现&lt;code&gt;Size&lt;/code&gt;和&lt;code&gt;Font&lt;/code&gt;方法。如果你满意使用默认值，你可以使用这些空实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;m&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myTheme&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Font&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TextStyle&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Resource&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DefaultTheme&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Font&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;m&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myTheme&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ThemeSizeName&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;float32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DefaultTheme&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要为你的应用设置主题，你需要添加以下代码行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Settings&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;SetTheme&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myTheme&lt;/span&gt;{})&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过这些更改，你可以应用自己的风格，进行小的调整或提供完全自定义的应用程序外观！&lt;/p&gt;</description></item><item><title>05. 扩展控件 Widget</title><link>https://www.poloxue.com/gofyne/docs/08-extend/05-extending-widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/05-extending-widgets/</guid><description>&lt;h2 id="扩展控件-widget"&gt;扩展控件 Widget&lt;a class="anchor" href="#%e6%89%a9%e5%b1%95%e6%8e%a7%e4%bb%b6-widget"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fyne标准控件提供最小的功能和自定义选项以支持大多数用例。在某些时候可能需要更高级的功能。与其让开发者构建自己的控件，不如扩展现有的控件。&lt;/p&gt;
&lt;p&gt;例如，我们将扩展图标控件以支持被点击。为此，我们声明一个新的结构体，嵌入了&lt;code&gt;widget.Icon&lt;/code&gt;类型。我们创建一个构造函数，调用重要的&lt;code&gt;ExtendBaseWidget&lt;/code&gt;函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tappableIcon&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Icon&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newTappableIcon&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;res&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Resource&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tappableIcon&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;icon&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tappableIcon&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;icon&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ExtendBaseWidget&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;icon&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;icon&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetResource&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;res&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;icon&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote class='book-hint '&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 像&lt;code&gt;widget.NewIcon&lt;/code&gt;这样的控件构造函数可能不适用于扩展，因为它已经调用了&lt;code&gt;ExtendBaseWidget&lt;/code&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;然后，我们添加新函数以实现&lt;code&gt;fyne.Tappable&lt;/code&gt;接口，有了这些函数，每次用户点击我们的新图标时都会调用新的&lt;code&gt;Tapped&lt;/code&gt;函数。接口需要有两个函数，&lt;code&gt;Tapped(*PointEvent)&lt;/code&gt;和&lt;code&gt;TappedSecondary(*PointEvent)&lt;/code&gt;，所以我们将添加这两个。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tappableIcon&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Tapped&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PointEvent&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;I have been tapped&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tappableIcon&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;TappedSecondary&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PointEvent&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以使用如下简单的应用程序测试这个新控件。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/theme&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Tappable&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;newTappableIcon&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;FyneLogo&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShowAndRun&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>06. 数字输入框 Entry</title><link>https://www.poloxue.com/gofyne/docs/08-extend/06-numerical-entry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/06-numerical-entry/</guid><description>&lt;h2 id="数字输入框-entry"&gt;数字输入框 Entry&lt;a class="anchor" href="#%e6%95%b0%e5%ad%97%e8%be%93%e5%85%a5%e6%a1%86-entry"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在传统意义上，GUI程序使用回调来自定义控件的操作。Fyne不暴露插入自定义回调来捕获控件上的事件，但这并不是必需的。Go语言完全有足够的扩展性来实现这一点。&lt;/p&gt;
&lt;p&gt;我们可以简单地使用类型嵌入来扩展控件，使其只能输入数值。&lt;/p&gt;
&lt;p&gt;首先创建一个新的类型结构体，我们将其称为&lt;code&gt;numericalEntry&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如&lt;a href="https://developer.fyne.io/tutorial/extending-widgets"&gt;扩展现有控件&lt;/a&gt;中所提到的，我们遵循良好实践并创建一个构造函数，该函数扩展了&lt;code&gt;BaseWidget&lt;/code&gt;。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newNumericalEntry&lt;/span&gt;() &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ExtendBaseWidget&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在我们需要让条目只接受数字。这可以通过重写&lt;code&gt;TypedRune(rune)&lt;/code&gt;方法来完成，这是&lt;code&gt;fyne.Focusable&lt;/code&gt;接口的一部分。这将允许我们拦截按键输入的标准处理，并只通过我们想要的输入。在此方法中，我们将使用条件检查rune是否匹配0到9之间的任何数字。如果是，我们将其委托给嵌入式条目的标准&lt;code&gt;TypedRune(rune)&lt;/code&gt;方法。如果不是，我们就忽略输入。此实现只允许输入整数，但如果需要，可以轻松扩展以检查将来的其他键。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;TypedRune&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rune&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;9&amp;#39;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TypedRune&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果我们想要更新实现以允许输入小数，我们可以简单地将&lt;code&gt;.&lt;/code&gt;和&lt;code&gt;,&lt;/code&gt;添加到允许的rune列表中（一些语言对于小数记数使用逗号而不是点）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;TypedRune&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rune&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;			&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TypedRune&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过这种方式，现在条目只允许用户在按键时输入数值。然而，粘贴快捷键仍然允许输入文本。为了解决这个问题，我们可以重写&lt;code&gt;TypedShortcut(fyne.Shortcut)&lt;/code&gt;方法，这是&lt;code&gt;fyne.Shortcutable&lt;/code&gt;接口的一部分。首先我们需要进行类型断言，检查给定的快捷键是否为&lt;code&gt;*fyne.ShortcutPaste&lt;/code&gt;类型。如果不是，我们可以将快捷键委托回嵌入式条目。如果是，我们检查剪贴板内容是否为数值，通过使用&lt;code&gt;strconv.ParseFloat()&lt;/code&gt;（如果你只想允许整数，&lt;code&gt;strconv.Atoi()&lt;/code&gt;就足够了），然后如果剪贴板内容可以无误地解析，再将快捷键委托回嵌入式条目。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;TypedShortcut&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Shortcut&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;paste&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt;.(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShortcutPaste&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TypedShortcut&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;paste&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Clipboard&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Content&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseFloat&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;64&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TypedShortcut&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作为额外福利，我们还可以确保移动操作系统打开数值键盘而不是默认键盘。这可以通过首先导入&lt;code&gt;fyne.io/fyne/v2/driver/mobile&lt;/code&gt;包并重写&lt;code&gt;mobile.Keyboardable&lt;/code&gt;接口的&lt;code&gt;Keyboard() mobile.KeyboardType&lt;/code&gt;方法来完成。在函数中，我们简单地返回&lt;code&gt;mobile.NumberKeyboard&lt;/code&gt;类型。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Keyboard&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;mobile&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;KeyboardType&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mobile&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NumberKeyboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，结果代码可能如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/driver/mobile&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newNumericalEntry&lt;/span&gt;() &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ExtendBaseWidget&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;TypedRune&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rune&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TypedRune&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;TypedShortcut&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Shortcut&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;paste&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt;.(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShortcutPaste&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TypedShortcut&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;paste&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Clipboard&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Content&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseFloat&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;64&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TypedShortcut&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;shortcut&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;numericalEntry&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Keyboard&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;mobile&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;KeyboardType&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mobile&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NumberKeyboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Numerical&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newNumericalEntry&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShowAndRun&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个示例展示了如何扩展Fyne的&lt;code&gt;Entry&lt;/code&gt;控件来创建一个只接受数值输入的&lt;code&gt;Entry&lt;/code&gt;控件，通过重写&lt;code&gt;TypedRune&lt;/code&gt;和&lt;code&gt;TypedShortcut&lt;/code&gt;方法，并通过重写&lt;code&gt;Keyboard&lt;/code&gt;方法为移动设备提供了数值键盘。&lt;/p&gt;</description></item></channel></rss>