<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>扩展新类型 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/08-extend/</link><description>Recent content in 扩展新类型 on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/08-extend/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 自定义布局 Layout</title><link>https://www.poloxue.com/gofyne/docs/08-extend/01-custom-layout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/01-custom-layout/</guid><description>自定义布局 Layout # 在Fyne应用程序中，每个Container都使用一个简单的布局算法来排列其子元素。Fyne在fyne.io/fyne/v2/layout包中定义了许多可用的布局。如果你查看代码，你会看到它们都实现了Layout接口。
type Layout interface { Layout([]CanvasObject, Size) MinSize(objects []CanvasObject) Size } 任何应用程序都可以提供一个自定义布局来以非标准的方式排列控件。为此，你需要在自己的代码中实现上述接口。为了说明这一点，我们将创建一个新的布局，该布局将元素排列在对角线上，并排列到其容器的左下角。
首先，我们将定义一个新类型diagonal，并定义其最小大小将是多少。为了计算这个，我们只需添加所有子元素（指定为MinSize的[]fyne.CanvasObject参数）的宽度和高度。
import &amp;#34;fyne.io/fyne/v2&amp;#34; type diagonal struct { } func (d *diagonal) MinSize(objects []fyne.CanvasObject) fyne.Size { w, h := float32(0), float32(0) for _, o := range objects { childSize := o.MinSize() w += childSize.Width h += childSize.Height } return fyne.NewSize(w, h) } 对这个类型，我们添加一个Layout()函数，该函数应该将所有指定的对象移动到第二个参数中指定的fyne.Size中。
在我们的实现中，我们计算控件的左上角位置（这是0 x参数，并且有一个y位置，即容器的高度减去所有子项高度的总和）。从顶部位置开始，我们简单地将每个项目位置按前一个子项目的大小向前移动。
func (d *diagonal) Layout(objects []fyne.CanvasObject, containerSize fyne.Size) { pos := fyne.</description></item><item><title>02. 自定义控件 Widget</title><link>https://www.poloxue.com/gofyne/docs/08-extend/02-custom-widget/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/02-custom-widget/</guid><description>自定义控件 Widget&amp;quot; # 标准控件与 Fyne 一起提供，旨在支持标准用户交互和需求。由于 GUI 经常需要提供自定义功能，因此可能需要编写自定义控件。本文概述了如何进行。
一个控件被分为两个区域 - 每个都实现一个标准接口 - fyne.Widget 和 fyne.WidgetRenderer。控件定义行为和状态，而渲染器用于定义它应如何绘制到屏幕上。
fyne.Widget # Fyne 中的控件简单来说是一个有状态的画布对象，其渲染定义与主逻辑分离。从 fyne.Widget 接口可以看出，必须实现的内容并不多。
type Widget interface { CanvasObject CreateRenderer() WidgetRenderer } 由于控件需要像任何其他画布项目一样被使用，我们从相同的接口继承。为了省去编写所有必需的函数，我们可以使用 widget.BaseWidget 类型，它处理了基础内容。
每个控件定义将包含比接口要求更多的内容。在 Fyne 控件中导出定义行为的字段是标准做法（就像 canvas 包中定义的原语一样）。
例如，看看 widget.Button 类型：
type Button struct { BaseWidget Text string Style ButtonStyle Icon fyne.Resource OnTapped func() } 你可以看到这些项目如何存储有关控件行为的状态，但没有关于它如何呈现的信息。
fyne.WidgetRenderer # 控件渲染器负责管理一组 fyne.CanvasObject 原语，这些原语组合在一起创建了我们控件的设计。它很像 fyne.Container，但有自定义布局和一些额外的主题处理。
每个控件都必须提供一个渲染器，但完全可以重用另一个控件的渲染器 - 特别是如果你的控件是另一个标准控件的轻量级包装。
type WidgetRenderer interface { Layout(Size) MinSize() Size Refresh() Objects() []CanvasObject Destroy() } 可以看到 Layout(Size) 和 MinSize() 函数类似于 fyne.</description></item><item><title>03. 资源包 Bundle</title><link>https://www.poloxue.com/gofyne/docs/08-extend/03-bundle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/03-bundle/</guid><description>资源包 # 基于 Go 的应用程序通常构建为单个二进制可执行文件，Fyne应用程序也是如此。单个文件使我们更容易分发和安装软件。不幸的是，GUI应用程序通常需要额外的资源来渲染用户界面。为了管理这个挑战，Go应用程序可以将资产捆绑到二进制文件本身中。Fyne工具包更喜欢使用&amp;quot;fyne bundle&amp;quot;，因为它有我们将在下面探索的各种好处。
捆绑资产的基本方法是执行&amp;quot;fyne bundle&amp;quot;命令。这个工具有各种参数来自定义输出，但在其最基本的形式中，要捆绑的文件将被转换为可以构建到您的应用程序中的Go源代码。
$ ls image.png main.go $ fyne bundle -o bundled.go image.png $ ls bundled.go image.png main.go $ bundled.go的内容将是我们然后可以在代码中访问的资源变量列表。例如，上面的代码将导致包含以下内容的文件：
var resourceImagePng = &amp;amp;fyne.StaticResource{ StaticName: &amp;#34;image.png&amp;#34;, StaticContent: []byte{ ... }} 如你所见，默认命名为&amp;quot;resource&amp;lt;Name&amp;gt;.&amp;lt;Ext&amp;gt;&amp;quot;。这个文件中使用的名称和包可以在命令参数中自定义。然后我们可以使用这个名称来，例如，在我们的画布上加载一张图片：
img := canvas.NewImageFromResource(resourceImagePng) Fyne资源只是一个带有唯一名称的字节集合，所以这可以是一个字体、一个声音</description></item><item><title>04. 自定义主题 Theme</title><link>https://www.poloxue.com/gofyne/docs/08-extend/04-custom-theme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/04-custom-theme/</guid><description>自定义主题 Theme # 应用程序能够加载自定义主题，这些主题可以对标准主题进行小的更改，或提供完全独特的外观。一个主题需要实现fyne.Theme接口的函数，该接口定义如下：
type Theme interface { Color(ThemeColorName, ThemeVariant) color.Color Font(TextStyle) Resource Icon(ThemeIconName) Resource Size(ThemeSizeName) float32 } 要应用我们的主题更改，我们首先定义一个实现了这个接口的新类型。
定义你的主题 # 我们从定义一个将成为我们主题的新类型开始，一个简单的空结构体就可以了：
type myTheme struct {} 断言我们实现了一个接口是个好主意，这样编译错误会更接近于定义类型。
var _ fyne.Theme = (*myTheme)(nil) 此时你可能会看到编译错误，因为我们还需要实现方法，我们从颜色开始。
自定义颜色 # Theme接口中定义的Color函数要求我们定义一个命名颜色，并且还为用户期望的变体提供了提示（例如theme.VariantLight或theme.VariantDark）。在我们的主题中，我们将返回一个自定义的背景颜色 - 对于明亮和暗黑主题使用不同的值。
// 需要从&amp;#34;image/color&amp;#34;导入color包。 func (m myTheme) Color(name fyne.ThemeColorName, variant fyne.ThemeVariant) color.Color { if name == theme.ColorNameBackground { if variant == theme.VariantLight { return color.White } return color.Black } return theme.DefaultTheme().Color(name, variant) } 你会看到这里的最后一行引用了theme.</description></item><item><title>05. 扩展控件 Widget</title><link>https://www.poloxue.com/gofyne/docs/08-extend/05-extending-widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/05-extending-widgets/</guid><description> 扩展控件 Widget # Fyne标准控件提供最小的功能和自定义选项以支持大多数用例。在某些时候可能需要更高级的功能。与其让开发者构建自己的控件，不如扩展现有的控件。
例如，我们将扩展图标控件以支持被点击。为此，我们声明一个新的结构体，嵌入了widget.Icon类型。我们创建一个构造函数，调用重要的ExtendBaseWidget函数。
import ( &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) type tappableIcon struct { widget.Icon } func newTappableIcon(res fyne.Resource) *tappableIcon { icon := &amp;amp;tappableIcon{} icon.ExtendBaseWidget(icon) icon.SetResource(res) return icon } 注意： 像widget.NewIcon这样的控件构造函数可能不适用于扩展，因为它已经调用了ExtendBaseWidget。
然后，我们添加新函数以实现fyne.Tappable接口，有了这些函数，每次用户点击我们的新图标时都会调用新的Tapped函数。接口需要有两个函数，Tapped(*PointEvent)和TappedSecondary(*PointEvent)，所以我们将添加这两个。
import &amp;#34;log&amp;#34; func (t *tappableIcon) Tapped(_ *fyne.PointEvent) { log.Println(&amp;#34;I have been tapped&amp;#34;) } func (t *tappableIcon) TappedSecondary(_ *fyne.PointEvent) { } 我们可以使用如下简单的应用程序测试这个新控件。
import ( &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/theme&amp;#34; ) func main() { a := app.New() w := a.NewWindow(&amp;#34;Tappable&amp;#34;) w.SetContent(newTappableIcon(theme.FyneLogo())) w.ShowAndRun() }</description></item><item><title>06. 数字输入框 Entry</title><link>https://www.poloxue.com/gofyne/docs/08-extend/06-numerical-entry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/08-extend/06-numerical-entry/</guid><description>数字输入框 Entry # 在传统意义上，GUI程序使用回调来自定义控件的操作。Fyne不暴露插入自定义回调来捕获控件上的事件，但这并不是必需的。Go语言完全有足够的扩展性来实现这一点。
我们可以简单地使用类型嵌入来扩展控件，使其只能输入数值。
首先创建一个新的类型结构体，我们将其称为numericalEntry。
type numericalEntry struct { widget.Entry } 如 扩展现有控件中所提到的，我们遵循良好实践并创建一个构造函数，该函数扩展了BaseWidget。
func newNumericalEntry() *numericalEntry { entry := &amp;amp;numericalEntry{} entry.ExtendBaseWidget(entry) return entry } 现在我们需要让条目只接受数字。这可以通过重写TypedRune(rune)方法来完成，这是fyne.Focusable接口的一部分。这将允许我们拦截按键输入的标准处理，并只通过我们想要的输入。在此方法中，我们将使用条件检查rune是否匹配0到9之间的任何数字。如果是，我们将其委托给嵌入式条目的标准TypedRune(rune)方法。如果不是，我们就忽略输入。此实现只允许输入整数，但如果需要，可以轻松扩展以检查将来的其他键。
func (e *numericalEntry) TypedRune(r rune) { if r &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; r &amp;lt;= &amp;#39;9&amp;#39; { e.Entry.TypedRune(r) } } 如果我们想要更新实现以允许输入小数，我们可以简单地将.和,添加到允许的rune列表中（一些语言对于小数记数使用逗号而不是点）。
func (e *numericalEntry) TypedRune(r rune) { if (r &amp;gt;= &amp;#39;0&amp;#39; &amp;amp;&amp;amp; r &amp;lt;= &amp;#39;9&amp;#39;) || r == &amp;#39;.&amp;#39; || r == &amp;#39;,&amp;#39; { e.Entry.TypedRune(r) } } 通过这种方式，现在条目只允许用户在按键时输入数值。然而，粘贴快捷键仍然允许输入文本。为了解决这个问题，我们可以重写TypedShortcut(fyne.</description></item></channel></rss>