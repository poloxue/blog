<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>容器与布局 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/04-container/</link><description>Recent content in 容器与布局 on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/04-container/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 盒子 Box</title><link>https://www.poloxue.com/gofyne/docs/04-container/01-box/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/01-box/</guid><description> 盒子 Box # 如在 容器和布局中讨论的，容器中的元素可以使用布局来排列。本节探讨内置布局及其使用方法。
最常用的布局是 layout.BoxLayout，它有两个变体，水平和垂直。盒子布局将所有元素排列在单个行或列中，并可选择间隔以协助对齐。
水平盒子布局，通过 layout.NewHBoxLayout() 创建，将项目排列在单行中。盒子中的每个项目的宽度将设置为其 MinSize().Width，高度对所有项目而言都是相等的，值为所有 MinSize().Height 值中的最大值。该布局可用于容器中，或者你可以使用盒子控件 widget.NewHBox()。
垂直盒子布局与之相似，但它将项目排列在一列中。每个项目的高度将设置为最小值，所有宽度将相等，设置为最小宽度中的最大值。
为了在元素之间创建扩展空间（例如，使某些元素左对齐，其他元素右对齐），在项目中添加一个 layout.NewSpacer()。间隔符将扩展以填充所有可用空间。在垂直盒子布局开始处添加一个间隔符将导致所有项目底部对齐。你可以在水平排列的开始和结束处各添加一个间隔符，以创建居中对齐。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;盒子布局&amp;#34;) text1 := canvas.NewText(&amp;#34;你好&amp;#34;, color.White) text2 := canvas.NewText(&amp;#34;在那里&amp;#34;, color.White) text3 := canvas.NewText(&amp;#34;(右侧)&amp;#34;, color.White) content := container.New(layout.NewHBoxLayout(), text1, text2, layout.NewSpacer(), text3) text4 := canvas.NewText(&amp;#34;居中&amp;#34;, color.White) centered := container.New(layout.NewHBoxLayout(), layout.NewSpacer(), text4, layout.NewSpacer()) myWindow.SetContent(container.New(layout.NewVBoxLayout(), content, centered)) myWindow.ShowAndRun() }</description></item><item><title>02. 网格 Grid</title><link>https://www.poloxue.com/gofyne/docs/04-container/02-grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/02-grid/</guid><description> 网格 Grid # 网格布局将容器的元素以网格模式布置，具有固定数量的列。项目将填充单个行，直到达到列数，之后将创建新行。垂直空间将在对象的每一行之间平均分配。
使用 layout.NewGridLayout(cols) 创建网格布局，其中 cols 是您希望每行中有的项目（列）数量。然后将此布局作为第一个参数传递给 container.New(...)。
如果您调整容器的大小，则每个单元格将平等地调整大小，以分享可用空间。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;网格布局&amp;#34;) text1 := canvas.NewText(&amp;#34;1&amp;#34;, color.White) text2 := canvas.NewText(&amp;#34;2&amp;#34;, color.White) text3 := canvas.NewText(&amp;#34;3&amp;#34;, color.White) grid := container.New(layout.NewGridLayout(2), text1, text2, text3) myWindow.SetContent(grid) myWindow.ShowAndRun() }</description></item><item><title>03. 网格包装 Grid Wrap</title><link>https://www.poloxue.com/gofyne/docs/04-container/03-gridwrap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/03-gridwrap/</guid><description> 网格包装 Grid Wrap # 与之前的网格布局一样，网格包装布局在网格模式中创建元素的排列。然而，这种网格没有固定数量的列，而是为每个单元格使用固定大小，然后将内容流动到需要显示项目的尽可能多的行中。
使用 layout.NewGridWrapLayout(size) 创建网格包装布局，其中 size 指定要应用于所有子元素的大小。然后将此布局作为第一个参数传递给 container.New(...)。根据容器的当前大小计算列数和行数。
最初，网格包装布局将有一个单列，如果您调整它的大小（如代码注释中所示），它将重新排列子元素以填充空间。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;网格包装布局&amp;#34;) text1 := canvas.NewText(&amp;#34;1&amp;#34;, color.White) text2 := canvas.NewText(&amp;#34;2&amp;#34;, color.White) text3 := canvas.NewText(&amp;#34;3&amp;#34;, color.White) grid := container.New(layout.NewGridWrapLayout(fyne.NewSize(50, 50)), text1, text2, text3) myWindow.SetContent(grid) // myWindow.Resize(fyne.NewSize(180, 75)) myWindow.ShowAndRun() }</description></item><item><title>04. 边框布局 Border</title><link>https://www.poloxue.com/gofyne/docs/04-container/04-border/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/04-border/</guid><description>边框布局 Border # 边框布局可能是构建用户界面时使用最广泛的布局之一，因为它允许围绕一个将扩展以填充空间的中心元素定位项目。要创建一个边框容器，你需要将应该在边框位置定位的 fyne.CanvasObject 作为构造函数的前四个参数传递。这个语法基本上就是 container.NewBorder(top, bottom, left, right, center)，如示例所示。
传递给容器的前四个项目之后的任何项目都将被定位到中心区域，并将扩展以填充可用空间。你也可以将 nil 传递给你希望留空的边框参数。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;边框布局&amp;#34;) top := canvas.NewText(&amp;#34;顶部栏&amp;#34;, color.White) left := canvas.NewText(&amp;#34;左侧&amp;#34;, color.White) middle := canvas.NewText(&amp;#34;内容&amp;#34;, color.White) content := container.NewBorder(top, nil, left, nil, middle) myWindow.SetContent(content) myWindow.ShowAndRun() } 请注意，中心的所有项目都将扩展以填充空间（就像它们在 layout.MaxLayout 容器中一样）。要自己管理该区域，你可以使用任何 fyne.Container 作为内容。</description></item><item><title>05. 表单布局 Form</title><link>https://www.poloxue.com/gofyne/docs/04-container/05-form/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/05-form/</guid><description> 表单布局 Form # layout.FormLayout 类似于两列的 网格布局，但针对应用中的表单布局进行了调整。每个项目的高度将是每行中两个最小高度中的较大者。第一列中所有项目的最大最小宽度将是左侧项目的宽度，而每行中的第二个项目将扩展以填满空间。
这种布局更典型地用于 widget.Form（用于验证、提交和取消按钮等），但也可以直接使用 layout.NewFormLayout() 作为 container.New(...) 的第一个参数。
package main import ( &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;表单布局&amp;#34;) label1 := widget.NewLabel(&amp;#34;标签 1&amp;#34;) value1 := widget.NewLabel(&amp;#34;值&amp;#34;) label2 := widget.NewLabel(&amp;#34;标签 2&amp;#34;) value2 := widget.NewLabel(&amp;#34;某些内容&amp;#34;) grid := container.New(layout.NewFormLayout(), label1, value1, label2, value2) myWindow.SetContent(grid) myWindow.ShowAndRun() }</description></item><item><title>06. 居中布局 Center</title><link>https://www.poloxue.com/gofyne/docs/04-container/06-center/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/06-center/</guid><description>居中布局 # layout.CenterLayout 将其容器中的所有项目都组织在可用空间的中心。这些对象将按照它们被传递到容器的顺序绘制，最后传递的对象将被绘制在最顶部。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; &amp;#34;fyne.io/fyne/v2/theme&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;Center Layout&amp;#34;) img := canvas.NewImageFromResource(theme.FyneLogo()) img.FillMode = canvas.ImageFillOriginal text := canvas.NewText(&amp;#34;Overlay&amp;#34;, color.Black) content := container.New(layout.NewCenterLayout(), img, text) myWindow.SetContent(content) myWindow.ShowAndRun() } 中心布局使所有项目保持其最小大小，如果你希望扩展项目以填充空间，那么请参见 layout.MaxLayout。</description></item><item><title>07. 最大布局 Max</title><link>https://www.poloxue.com/gofyne/docs/04-container/07-max/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/07-max/</guid><description> 最大布局 Max # layout.MaxLayout是最简单的布局，它将容器中的所有项目设置为与容器相同的大小。这通常在一般的容器中不太有用，但在组合控件时可能适用。
最大布局会扩展容器，使其至少与最大项目的最小大小相同。对象将按照它们传递给容器的顺序被绘制，最后传递的对象将被绘制在最上面。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/layout&amp;#34; &amp;#34;fyne.io/fyne/v2/theme&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;Max Layout&amp;#34;) img := canvas.NewImageFromResource(theme.FyneLogo()) text := canvas.NewText(&amp;#34;Overlay&amp;#34;, color.Black) content := container.New(layout.NewMaxLayout(), img, text) myWindow.SetContent(content) myWindow.ShowAndRun() }</description></item><item><title>08. Tab 布局 AppTabs</title><link>https://www.poloxue.com/gofyne/docs/04-container/08-apptabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/04-container/08-apptabs/</guid><description>Tab 布局 AppTabs # AppTabs 容器用于允许用户在不同的内容面板之间切换。标签页要么只有文本，要么是文本和图标。建议不要混合使用一些标签页有图标而另一些没有图标的情况。使用 container.NewAppTabs(...) 创建标签容器，并传递 container.TabItem 项（可以使用 container.NewTabItem(...) 创建）。
可以通过设置标签的位置来配置标签容器，位置选项包括 container.TabLocationTop、container.TabLocationBottom、container.TabLocationLeading 和 container.TabLocationTrailing。默认位置是顶部。
package main import ( &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; //&amp;#34;fyne.io/fyne/v2/theme&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;TabContainer 控件&amp;#34;) tabs := container.NewAppTabs( container.NewTabItem(&amp;#34;标签 1&amp;#34;, widget.NewLabel(&amp;#34;你好&amp;#34;)), container.NewTabItem(&amp;#34;标签 2&amp;#34;, widget.NewLabel(&amp;#34;世界！&amp;#34;)), ) //tabs.Append(container.NewTabItemWithIcon(&amp;#34;首页&amp;#34;, theme.HomeIcon(), widget.NewLabel(&amp;#34;首页标签&amp;#34;))) tabs.SetTabLocation(container.TabLocationLeading) myWindow.SetContent(tabs) myWindow.ShowAndRun() } 在移动设备上加载时，可能会忽略标签位置。在纵向方向，前导或尾随位置将被更改为底部。在横向方向，顶部或底部位置将移至前导。</description></item></channel></rss>