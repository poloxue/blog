<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据绑定 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/07-binding/</link><description>Recent content in 数据绑定 on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/07-binding/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 简单绑定</title><link>https://www.poloxue.com/gofyne/docs/07-binding/01-simple/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/07-binding/01-simple/</guid><description>简单绑定 # 绑定控件的最简单形式是将绑定项作为值传递给它，而不是静态值。许多控件提供了一个WithData构造函数，它将接受一个类型化的数据绑定项。要设置绑定，你需要做的就是传递正确的类型。
尽管在初始代码中这看起来可能没有多大好处，但你可以看到它如何确保显示的内容始终与数据源保持最新。你会注意到，我们不需要在Label控件上调用Refresh()，甚至不需要保留它的引用，但它仍然会适当更新。
package main import ( &amp;#34;time&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;Simple&amp;#34;) str := binding.NewString() str.Set(&amp;#34;Initial value&amp;#34;) text := widget.NewLabelWithData(str) w.SetContent(text) go func() { time.Sleep(time.Second * 2) str.Set(&amp;#34;A new string&amp;#34;) }() w.ShowAndRun() } 在下一步中，我们将看看如何通过 双向绑定设置编辑值的控件。</description></item><item><title>02. 双向绑定</title><link>https://www.poloxue.com/gofyne/docs/07-binding/02-twoway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/07-binding/02-twoway/</guid><description>双向绑定 # 到目前为止，我们已经看到了数据绑定作为一种方式来保持用户界面元素更新。然而，更常见的需求是从UI控件更新值并保持数据在各处都是最新的。值得庆幸的是，Fyne提供的绑定是“双向”的，这意味着值既可以被推入其中也可以被读出。数据的更改将被通知到所有连接的代码，无需任何额外的代码。
为了看到这个功能的实际操作，我们可以更新最后的测试应用，以显示一个Label和一个Entry，它们绑定到同一个值。通过这样设置，你可以看到通过entry编辑值也会更新label中的文本。这一切都可以在不调用refresh或在代码中引用控件的情况下实现。
通过将你的应用移动到使用数据绑定，你可以停止保存指向所有控件的指针。相反，通过捕获数据作为一组绑定的值，你的用户界面可以是完全独立的代码。更清晰易读，更易于管理。
package main import ( &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;Two Way&amp;#34;) str := binding.NewString() str.Set(&amp;#34;Hi!&amp;#34;) w.SetContent(container.NewVBox( widget.NewLabelWithData(str), widget.NewEntryWithData(str), )) w.ShowAndRun() } 接下来，我们将看看如何在我们的数据中添加 转换。</description></item><item><title>03. 数据转换</title><link>https://www.poloxue.com/gofyne/docs/07-binding/03-conversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/07-binding/03-conversion/</guid><description>数据转换 # 到目前为止，我们使用的数据绑定是数据类型与输出类型匹配的情况（例如String与Label或Entry）。通常，将需要以不同于原始格式的方式展示数据。为此，binding包提供了许多有用的转换函数。
最常见的用途是将不同类型的数据转换为字符串，以便在Label或Entry控件中显示。看看我们如何使用binding.FloatToString将Float转换为String。原始值可以通过移动滑块来编辑。每次数据变化时，它都会运行转换代码并更新任何连接的控件。
也可以使用格式字符串为用户界面添加更自然的输出。你可以看到我们的short绑定也是将Float转换为String，但通过使用WithFormat助手，我们可以传递一个格式字符串（类似于fmt包）来提供自定义输出。
package main import ( &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;转换&amp;#34;) f := binding.NewFloat() str := binding.FloatToString(f) short := binding.FloatToStringWithFormat(f, &amp;#34;%0.0f%%&amp;#34;) f.Set(25.0) w.SetContent(container.NewVBox( widget.NewSliderWithData(0, 100.0, f), widget.NewLabelWithData(str), widget.NewLabelWithData(short), )) w.ShowAndRun() } 最后，在本节中，我们将查看 list数据。</description></item><item><title>04. 列表类型</title><link>https://www.poloxue.com/gofyne/docs/07-binding/04-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/07-binding/04-list/</guid><description>列表类型 # 为了展示如何连接更复杂的类型，我们将看看List控件以及数据绑定如何使其更易用。首先，我们创建一个StringList数据绑定，这是一个String数据类型的列表。一旦我们有了列表类型的数据，我们就可以将这个数据连接到标准的List控件。为此，我们使用widget.NewListWithData构造函数，这和其他控件类似。
将这段代码与 列表教程进行比较，你会看到两个主要变化，第一个是我们将数据类型作为第一个参数传递，而不是长度回调函数。第二个变化是最后一个参数，我们的UpdateItem回调。修订版采用binding.DataItem值而不是widget.ListIndexID。使用这种回调结构时，我们应该Bind到模板标签控件而不是调用SetText。这意味着如果数据源中的任何字符串发生变化，表格的每个受影响行都将刷新。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;List Data&amp;#34;) data := binding.BindStringList( &amp;amp;[]string{&amp;#34;Item 1&amp;#34;, &amp;#34;Item 2&amp;#34;, &amp;#34;Item 3&amp;#34;}, ) list := widget.NewListWithData(data, func() fyne.CanvasObject { return widget.NewLabel(&amp;#34;template&amp;#34;) }, func(i binding.DataItem, o fyne.CanvasObject) { o.(*widget.Label).Bind(i.(binding.String)) }) add := widget.NewButton(&amp;#34;Append&amp;#34;, func() { val := fmt.Sprintf(&amp;#34;Item %d&amp;#34;, data.Length()+1) data.Append(val) }) myWindow.SetContent(container.NewBorder(nil, add, nil, nil, list)) myWindow.</description></item></channel></rss>