<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架构 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/09-architecture/</link><description>Recent content in 架构 on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/09-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 几何 Geometry</title><link>https://www.poloxue.com/gofyne/docs/09-architecture/01-geometry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/09-architecture/01-geometry/</guid><description>几何 Geometry # Fyne 应用基于每个窗口有一个画布。每个画布有一个根 CanvasObject，它可以是一个单独的控件或一个容器，用于控制多个子对象的大小和位置，这些子对象由布局控制。
位置 # 每个画布的原点位于左上角（0, 0），UI 的每个元素都可能根据输出设备进行缩放，因此 API 不描述像素或精确的尺寸。 例如，在120DPI的显示器上，位置（10, 10）可能从原点向右和向下各10像素，但在HiDPI（或“Retina”）显示器上，这可能更接近20像素。
每个 CanvasObject 引用的位置都是相对于它的父级的。这对于布局算法很重要，但对于开发者在例如 Tappable.Tapped(PointEvent) 处理程序这样的情况下也很重要。这里的 X/Y 坐标将从按钮的左上角而不是整个画布计算。这样设计是为了让代码尽可能自包含。
像素大小 # 像其他基于矢量的 GUI 库一样，Fyne 坐标需要基于某种基线显示器分辨率。所有 缩放都是相对于这个值的。对于 Fyne 来说，该分辨率是120DPI。这意味着当你的显示器是120DPI且所有缩放值都设置为1时，fyne.Size中引用的尺寸将是1=1px。对于 HiDPI 屏幕，如上所述，实际 DPI 可能更接近240，在移动设备上甚至可能是360或更高。为了管理这种复杂性，工具包在内部管理缩放，因此你的应用总是看起来大小合适。如果用户设置的缩放比例较小，那么他们的应用将始终具有小于正常的字体、按钮等，当他们指定较大时，你的应用将适当放大。
与 Material Design 相比，我们可以看到他们的基线 DPI 是 160，尽管数学上相似，但实际数字会有所不同。这意味着 Fyne 中的设备独立尺寸使用较小的数字来代表相同的物理尺寸。例如，Fyne 中高度为 18 的图标在标准的 Material Design（例如 Android）应用中的尺寸为 24。构建应用程序时，这并不重要，但在与设计师或熟悉 Material Design 的专家合作时可能很重要。
如果你开始加载位图图像，像素尺寸将变得重要。通常这些图像会适当缩放，但如果你指定 FillMode=fyne.FillOriginal，则由于像素密度的不同，实际图像大小在不同设备上会有所不同。通常这个功能会在 Scroll 容器内使用。Fyne 还定义了一个 canvas.Raster 原始类型，它将在输出设备的像素密度下精确绘制像素。这使你的代码能够在不了解运行设备的详细信息的情况下，以最高可能的输出分辨率进行绘制。如果由于某种原因你需要“像素完美”定位，你需要将 CanvasObject.Size() 乘以 Canvas.Scale()。</description></item><item><title>02. 缩放 Scaling</title><link>https://www.poloxue.com/gofyne/docs/09-architecture/02-scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/09-architecture/02-scaling/</guid><description> 缩放 Scaling # Fyne 完全使用矢量图形构建，这意味着用 Fyne 编写的应用程序可以美观地缩放到任何大小（不仅仅是整数增量）。这对于移动设备和高端计算机上越来越受欢迎的高密度显示屏是一个巨大的好处。默认的缩放值是根据你的操作系统计算出来的 - 在一些系统上，这是用户配置，在其他系统上则来自于你的屏幕像素密度（DPI - 每英寸点数）。如果一个 Fyne 窗口被移动到另一个屏幕上，它将重新缩放并相应地调整窗口大小！我们称之为“自动缩放”，旨在在更换显示器时保持应用程序用户界面的相同大小。
你可以使用 fyne_settings 应用程序调整应用程序的大小，或者通过设置 FYNE_SCALE 环境变量来设置特定的缩放比例。这些值可以使内容比系统设置大或小，使用 &amp;ldquo;1.5&amp;rdquo; 会使事物变大 50%，设置 0.8 会使其缩小 20%。
Standard size FYNE_SCALE=0.5 FYNE_SCALE=2.5</description></item><item><title>03. 控件 Widget</title><link>https://www.poloxue.com/gofyne/docs/09-architecture/03-widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/09-architecture/03-widgets/</guid><description>控件 Widget # Fyne 工具包中的控件旨在提供干净愉快的用户交互体验，遵循标准主题，并支持快速应用开发、稳定测试和易于维护。这里有一些促进这一目标的设计考虑，我们将在本页探讨它们。
行为 API # 你会注意到标准控件的 API 全部关于行为和状态——但实际上很少控制元素的外观。这是有意为之的。它使我们的代码，以及应用开发者的代码，能够专注于控件的行为，以便将其渲染过程留给其他代码处理。这使得测试变得更加容易，实际上完整的应用可以在内存中通过单元测试运行，而无需渲染应用。
你可以 扩展现有控件来添加新的行为，而无需担心其渲染方式。也可以 编写自己的组件，应用不限于使用提供的控件集。构建自己的控件时，你会注意到渲染细节与状态完全分离——这是上述设计的一部分。WidgetRenderer（渲染Widget的代码）通常持有对它将要渲染的控件的引用，以访问状态或其他信息。当控件状态改变时，将调用 Refresh()——然后会要求渲染器刷新，并且它应该更新显示以反映新状态。建议自定义控件使用当前的Theme，但在看似合适的情况下可以选择指定自己的尺寸、颜色和图标。
内容填充 # 标准控件使用主题指定的填充来在其图形组件周围创建适当的空间。widget 包使用标准高度和基线来确保提供的布局默认情况下能够很好地对齐。如果你正在构建自定义控件，建议遵循这些指南。
theme.Padding() 的值用于布局中以分隔容器的元素，它在应用的各个部分周围创建一致的空间。然而，有些控件的内容应该从范围的边缘内缩。考虑Entry，它有一个背景和边框延伸到边缘，但其内容应该内缩。因此，我们标准化了用于内缩的空间量，以便对齐匹配。
控件的标准内缩或内容填充被定义为theme.InnerPadding()。标准的填充值是4，内部填充是8。你可以在Label和Entry中看到（文本）内容被这么多内缩，以便它们在并排放置时能够水平和垂直对齐。
建议自定义控件包含类似的尺寸，以便它们能够与标准控件很好地配合。</description></item><item><title>04. 包组织 Package</title><link>https://www.poloxue.com/gofyne/docs/09-architecture/04-organisation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/09-architecture/04-organisation/</guid><description> 包的组织 # Fyne 项目分为许多包，每个包提供不同类型的功能，如下所示：
fyne.io/fyne/v2 这个导入提供了所有 Fyne 代码共有的基本定义，包括数据类型和接口。 fyne.io/fyne/v2/app app 包提供启动新应用的 API。 通常你只需要 app.New() 或 app.NewWithID()。 fyne.io/fyne/v2/canvas canvas 包提供 Fyne 中所有的绘图 API。 完整的 Fyne 工具包由这些原始图形类型组成。 fyne.io/fyne/v2/container container 包提供用于布局和组织应用的容器。 fyne.io/fyne/v2/data/binding binding 包包含将数据源绑定到控件的方法。 fyne.io/fyne/v2/data/validation validation 包提供工具用于验证控件内的数据。 fyne.io/fyne/v2/dialog dialog 包包含确认、错误和文件保存/打开等对话框。 fyne.io/fyne/v2/layout layout 包提供用于容器的各种布局实现（在后续教程中讨论）。 fyne.io/fyne/v2/storage storage 包提供存储访问和管理功能。 fyne.io/fyne/v2/test 使用 test 包内的工具可以更容易地测试应用。 fyne.io/fyne/v2/widget 大多数图形应用是使用一系列控件创建的。 Fyne 中的所有控件和交互元素都在这个包中。</description></item></channel></rss>