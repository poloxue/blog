<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>集合 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/06-collection/</link><description>Recent content in 集合 on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/06-collection/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 列表 List</title><link>https://www.poloxue.com/gofyne/docs/06-collection/01-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/06-collection/01-list/</guid><description>列表 List # List 集合控件是工具包中的集合控件之一。这些控件旨在帮助构建在呈现大量数据时性能非常高的界面。你还可以看到具有类似 API 的 Table 和 Tree 控件。由于这种设计，它们使用起来稍微复杂一些。
List 使用回调函数来在需要数据时请求数据。有三个主要的回调函数：Length、CreateItem 和 UpdateItem。Length 回调（首先传递）是最简单的，它返回要展示的数据中有多少项。其他回调与模板相关 - 如何创建、缓存和重用图形元素。
CreateItem 回调返回一个新的模板对象。当控件呈现时，这将使用真实数据重新使用。此对象的 MinSize 将影响 List 的最小尺寸。最后，UpdateItem 被调用来将一个数据项应用于缓存的模板。使用这个来设置准备显示的内容。
package main import ( &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) var data = []string{&amp;#34;a&amp;#34;, &amp;#34;string&amp;#34;, &amp;#34;list&amp;#34;} func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;列表控件&amp;#34;) list := widget.NewList( func() int { return len(data) }, func() fyne.CanvasObject { return widget.NewLabel(&amp;#34;template&amp;#34;) }, func(i widget.ListItemID, o fyne.CanvasObject) { o.(*widget.Label).SetText(data[i]) }) myWindow.</description></item><item><title>02. 表格 Table</title><link>https://www.poloxue.com/gofyne/docs/06-collection/02-table/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/06-collection/02-table/</guid><description> 表格 Table # Table集合控件类似于 List控件（工具包的另一个集合控件），它具有二维索引。像List一样，这旨在帮助构建性能非常高的接口，当展示大量数据时。因此，控件不是用所有数据创建的，而是在需要时调用数据源。
Table使用回调函数在需要数据时请求数据。有3个主要的回调，Length、CreateCell和UpdateCell。Length回调（首先传递）是最简单的，它返回要展示的数据中有多少项，它返回的两个int分别代表行数和列数。其他两个与内容模板相关。
CreateCell回调返回一个新的模板对象，就像列表一样。不同之处在于MinSize将定义每个单元格的标准大小，以及表格的最小大小（它至少显示一个单元格）。如前所述，UpdateCell被调用来将数据应用于单元格模板。传入的索引是相同的(row, col)int对。
package main import ( &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) var data = [][]string{[]string{&amp;#34;左上角&amp;#34;, &amp;#34;右上角&amp;#34;}, []string{&amp;#34;左下角&amp;#34;, &amp;#34;右下角&amp;#34;}} func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;表格控件&amp;#34;) list := widget.NewTable( func() (int, int) { return len(data), len(data[0]) }, func() fyne.CanvasObject { return widget.NewLabel(&amp;#34;宽内容&amp;#34;) }, func(i widget.TableCellID, o fyne.CanvasObject) { o.(*widget.Label).SetText(data[i.Row][i.Col]) }) myWindow.SetContent(list) myWindow.ShowAndRun() }</description></item><item><title>03. 树 Tree</title><link>https://www.poloxue.com/gofyne/docs/06-collection/03-tree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/06-collection/03-tree/</guid><description>树 Tree # Tree 集合控件类似于 List 控件（工具包的另一个集合控件），具有多级数据结构。像 List 一样，它旨在帮助构建性能良好的接口，以便在展示大量数据时使用。因此，控件不是用所有数据创建的，而是在需要时调用数据源。
Tree 使用回调函数在需要时请求数据。有四个主要的回调，ChildUIDs、IsBranch、CreateNode 和 UpdateNode。ChildUIDs 回调在这里传递每个子节点的唯一 ID 到请求的节点。这将以 TreeNodeID 为 &amp;quot;&amp;quot; 被调用，首先获取所有显示在树根中的 ID 列表。IsBranch 回调应当在节点是分支时返回 true。如果节点 ID 有子节点，通常返回 true - 但你可以有一个空的分支。
确保树中每个树节点的 id 是唯一的，这一点至关重要。 例如，如果你正在构建一个文件管理器，ID 应该是文件路径而不是其名称。
其他两个回调与内容模板相关。
CreateNode 回调返回一个新的模板对象，就像列表一样，尽管有一个额外的 bool 参数，如果节点可以有子元素（是一个分支），则为 true。如前所述，UpdateNode 被调用以将数据应用于单元格模板。你应该根据 TreeNodeID 和 isBranch 参数更新内容。
package main import ( &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;树形控件&amp;#34;) tree := widget.NewTree( func(id widget.TreeNodeID) []widget.TreeNodeID { switch id { case &amp;#34;&amp;#34;: return []widget.</description></item></channel></rss>