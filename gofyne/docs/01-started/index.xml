<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>快速开始 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/01-started/</link><description>Recent content in 快速开始 on Go Fyne 中文</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/01-started/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 安装指南</title><link>https://www.poloxue.com/gofyne/docs/01-started/01-index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/01-index/</guid><description>&lt;h1 id="安装指南"&gt;安装指南&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e6%8c%87%e5%8d%97"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;使用 Fyne 工具包构建跨平台应用程序非常简单，但在开始之前需要安装一些工具。如果您的计算机已经为Go开发设置好了，以下步骤可能不是必需的，但我们建议您阅读一下您操作系统的提示，以防万一。如果本教程后面的步骤出现问题，那么您应该重新检查以下的先决条件。&lt;/p&gt;
&lt;h3 id="先决条件"&gt;先决条件&lt;a class="anchor" href="#%e5%85%88%e5%86%b3%e6%9d%a1%e4%bb%b6"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fyne需要3个基本元素：Go工具（至少版本1.12）、一个C编译器（用于与系统图形驱动连接）和一个系统图形驱动。根据您的操作系统，安装指令会有所不同，请选择下面适合您的选项卡查看安装指令。&lt;/p&gt;
&lt;p&gt;请注意，这些步骤仅用于开发 - 您的Fyne应用不需要为最终用户安装任何设置或依赖！&lt;/p&gt;
&lt;blockquote class="book-hint warning"&gt;
 **如下的 termux 是用于在 Android 设备上构建 Fyne 应用，无 PC 依赖。** &lt;/blockquote&gt;
&lt;div class="book-tabs"&gt;

&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-0" checked="checked" /&gt;&lt;label for="tabs-prerequisites-0"&gt;Windows&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 

- 从[下载页面](https://golang.org/dl/)下载Go并按照说明安装
- 为Windows安装以下测试过的C编译器之一：
 - MSYS2配合MingW-w64 - [msys2.org](https://www.msys2.org/)
 - TDM-GCC - [tdm-gcc.tdragon.net](https://jmeubank.github.io/tdm-gcc/download/)
 - Cygwin - [cygwin.com](https://www.cygwin.com/)
- 在Windows上，您的图形驱动程序已经安装好了，但建议确保它们是最新的。

使用MSYS2（推荐）的安装步骤如下：

- 从[msys2.org](https://www.msys2.org/)安装MSYS2
- 安装完成后不要使用打开的MSYS终端
- 从开始菜单打开“MSYS2 MinGW 64位”
- 执行以下命令（如果询问安装选项，请确保选择“全部”）：

```bash
$ pacman -Syu
$ pacman -S git mingw-w64-x86_64-toolchain
```

- 您需要将 /c/Program\ Files/Go/bin和 ~/Go/bin 添加到您的 $PATH 中，对于MSYS2，您可以将以下命令粘贴到终端中：
```bash
$ echo "export PATH=\$PATH:/c/Program\ Files/Go/bin:~/Go/bin" &gt;&gt; ~/.bashrc
```

- 为了让编译器在其他终端上工作，您需要设置Windows的%PATH%变量，以便找到这些工具。进入“编辑系统环境变量”控制面板，点击“高级”，并将“C:\msys64\mingw64\bin”添加到路径列表中。

&lt;/div&gt;
&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-1" /&gt;&lt;label for="tabs-prerequisites-1"&gt;MacOS&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 

- 从[下载页面](https://golang.org/dl/)下载Go并按照说明进行安装。
- 从[Mac App Store](https://apps.apple.com/us/app/xcode/id497799835?mt=12)安装Xcode。
- 通过打开终端窗口并输入以下命令来设置Xcode命令行工具：`xcode-select --install`。
- 在macOS上，图形驱动程序将已经安装。

&lt;/div&gt;

&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-2" /&gt;&lt;label for="tabs-prerequisites-2"&gt;Linux&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 

- 您需要使用包管理器安装Go、gcc和图形库头文件，以下命令之一可能会起作用。
- Debian / Ubuntu: `sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev`
- Fedora: `sudo dnf install golang gcc libXcursor-devel libXrandr-devel mesa-libGL-devel libXi-devel libXinerama-devel libXxf86vm-devel`
- Arch Linux: `sudo pacman -S go xorg-server-devel libxcursor libxrandr libxinerama libxi`
- Solus: `sudo eopkg it -c system.devel golang mesalib-devel libxrandr-devel libxcursor-devel libxi-devel libxinerama-devel`
- openSUSE: `sudo zypper install go gcc libXcursor-devel libXrandr-devel Mesa-libGL-devel libXi-devel libXinerama-devel libXxf86vm-devel`
- Void Linux: `sudo xbps-install -S go base-devel xorg-server-devel libXrandr-devel libXcursor-devel libXinerama-devel`

- Alpine Linux: `sudo apk add go gcc libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev linux-headers mesa-dev`
- NixOS: `nix-shell -p libGL pkg-config xorg.libX11.dev xorg.libXcursor xorg.libXi xorg.libXinerama xorg.libXrandr xorg.libXxf86vm`

&lt;/div&gt;

&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-3" /&gt;&lt;label for="tabs-prerequisites-3"&gt;Raspberry Pi&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 

您需要使用包管理器安装Go、gcc和图形库头文件。

```bash
sudo apt-get install golang gcc libegl1-mesa-dev xorg-dev
```

&lt;/div&gt;
&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-4" /&gt;&lt;label for="tabs-prerequisites-4"&gt;BSD&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 

您需要使用包管理器安装Go、gcc和图形库头文件。

- FreeBSD: sudo pkg install go gcc xorg pkgconf
- OpenBSD: sudo pkg_add go
- NetBSD: sudo pkgin install go pkgconf

&lt;/div&gt;
&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-5" /&gt;&lt;label for="tabs-prerequisites-5"&gt;Android&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 

- 要为Android开发应用，您首先需要为您当前的电脑（Windows、macOS或Linux）安装工具。
- 完成后，您需要安装Android SDK和Android NDK——推荐的方法是安装[Android Studio](https://developer.android.com/studio/index.html)，然后转到Tools &gt; SDK Manager，并从SDK Tools安装NDK（并行）包。
- 或者，您可以下载[Standalone Android NDK](https://github.com/android/ndk/wiki#supported-downloads)，这是一种更精简的方法。解压缩文件夹，并将ANDROID_NDK_HOME环境变量指向它。

&lt;/div&gt;
&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-6" /&gt;&lt;label for="tabs-prerequisites-6"&gt;IOS&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 
- 要为iOS开发应用，您将需要访问一台按照上面macOS标签配置的苹果Mac电脑。
- 您还需要创建一个苹果开发者账户并注册开发者计划（需要支付费用）以获取在任何设备上运行应用所需的证书。
&lt;/div&gt;
&lt;input type="radio" class="toggle" name="tabs-prerequisites" id="tabs-prerequisites-7" /&gt;&lt;label for="tabs-prerequisites-7"&gt;Termux&lt;/label&gt;&lt;div class="book-tabs-content markdown-inner"&gt;
 

在Android上编译Fyne应用，您将需要Android 9或以上版本。

- 安装fdroid，然后从那里安装termux。
- 打开Termux并安装Go和Git：`pkg install golang git`。
- 从[https://github.com/Lzhiyong/termux-ndk](https://github.com/Lzhiyong/termux-ndk)安装NDK和SDK到termux，并设置环境变量`ANDROID_HOME`和`ANDROID_NDK_HOME`。

&lt;/div&gt;

&lt;/div&gt;
&lt;h3 id="下载"&gt;下载&lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bd"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;使用Go模块（Go 1.16及更高版本要求），在使用包之前需要设置模块。&lt;/p&gt;</description></item><item><title>02. 创建第一个应用</title><link>https://www.poloxue.com/gofyne/docs/01-started/02-hello/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/02-hello/</guid><description>&lt;h1 id="第一个应用"&gt;第一个应用&lt;a class="anchor" href="#%e7%ac%ac%e4%b8%80%e4%b8%aa%e5%ba%94%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在完成了入门安装文档中的步骤后，你现在已经准备好构建你的第一个应用程序了。为了说明这个过程，我们将构建一个简单的“Hello World”应用程序。&lt;/p&gt;
&lt;p&gt;一个简单的应用程序从使用&lt;code&gt;app.New()&lt;/code&gt;创建一个应用实例开始，然后使用&lt;code&gt;app.NewWindow()&lt;/code&gt;打开一个窗口。接着定义一个控件树，并使用窗口上的&lt;code&gt;SetContent()&lt;/code&gt;将其设置为主内容。然后通过在窗口上调用&lt;code&gt;ShowAndRun()&lt;/code&gt;来显示应用UI。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShowAndRun&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面的代码可以使用命令&lt;code&gt;go build .&lt;/code&gt;进行构建，然后通过运行hello命令或双击图标来执行。你也可以跳过编译步骤，直接使用&lt;code&gt;go run ..&lt;/code&gt;来运行代码。&lt;/p&gt;
&lt;p&gt;无论采取哪种方法，都会显示一个窗口，看起来像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@gofyne/started/hello-dark.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;如果你更喜欢浅色主题，只需设置环境变量&lt;code&gt;FYNE_THEME=light&lt;/code&gt;，你就会得到：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@gofyne/started/hello-light.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;这就是入门的全部内容了。要了解更多，你可以阅读完整的 &lt;a href="https://docs.fyne.io/api"&gt;API文档&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>03. 运行 Fyne Demo</title><link>https://www.poloxue.com/gofyne/docs/01-started/03-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/03-demo/</guid><description>&lt;h1 id="运行-fyne-demo"&gt;运行 Fyne Demo&lt;a class="anchor" href="#%e8%bf%90%e8%a1%8c-fyne-demo"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;如果你想在开始编写自己的应用程序之前看到Fyne工具包的实际效果，你可以查看我们的演示应用程序。&lt;/p&gt;
&lt;h3 id="运行"&gt;运行&lt;a class="anchor" href="#%e8%bf%90%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果愿意，你可以使用以下命令直接运行演示（需要Go 1.16或更高版本）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run fyne.io/fyne/v2/cmd/fyne_demo@latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@gofyne/started/fynedemo-dark.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;对于早期版本的Go，你需要使用以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run fyne.io/fyne/v2/cmd/fyne_demo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过浏览应用的不同标签，你可以看到Fyne工具包的所有功能。&lt;/p&gt;
&lt;h3 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;你可以将该应用安装为计算机上的图形应用程序，就像所有其他应用程序一样。我们有一个有用的&lt;code&gt;fyne&lt;/code&gt;工具可以为你完成这项工作。首先，你需要安装该工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go install fyne.io/fyne/v2/cmd/fyne@latest&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，你可以简单地打包并安装演示应用程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne get fyne.io/fyne/v2/cmd/fyne_demo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成这一步骤后，你可以在应用启动器中找到“Fyne Demo”。&lt;/p&gt;
&lt;h3 id="探索代码"&gt;探索代码&lt;a class="anchor" href="#%e6%8e%a2%e7%b4%a2%e4%bb%a3%e7%a0%81"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果你对任何功能感兴趣，你应该查看&lt;a href="https://github.com/fyne-io/fyne/tree/master/cmd/fyne_demo"&gt;源码仓库&lt;/a&gt;或加入&lt;a href="https://fyne.io/#contact"&gt;社区频道&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>04. App 和 RunLoop</title><link>https://www.poloxue.com/gofyne/docs/01-started/04-apprun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/04-apprun/</guid><description>&lt;h1 id="app-和-runloop"&gt;App 和 RunLoop&lt;a class="anchor" href="#app-%e5%92%8c-runloop"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;对于一个图形用户界面（GUI）应用程序来说，它需要运行一个事件循环（有时被称为运行循环），来处理用户交互和绘图事件。在Fyne中，这是通过使用&lt;code&gt;App.Run()&lt;/code&gt;或&lt;code&gt;Window.ShowAndRun()&lt;/code&gt;函数启动的。这些函数中的一个必须在你的&lt;code&gt;main()&lt;/code&gt;函数的设置代码末尾被调用。&lt;/p&gt;
&lt;p&gt;一个应用程序应该只有一个运行循环，因此你应该在代码中只调用&lt;code&gt;Run()&lt;/code&gt;一次。第二次调用它将会导致错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;myApp&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;myWindow&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myApp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;myWindow&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;myWindow&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Show&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;myApp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Run&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;tidyUp&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tidyUp&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Exited&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于桌面运行时，一个应用程序可以通过调用&lt;code&gt;App.Quit()&lt;/code&gt;直接退出（移动应用不支持此功能）- 通常在开发者代码中不需要。一旦所有窗口都被关闭，应用程序也将退出。另外，请注意，在应用程序退出之前，执行&lt;code&gt;Run()&lt;/code&gt;之后的函数将不会被调用。&lt;/p&gt;</description></item><item><title>05. 更新 GUI 内容</title><link>https://www.poloxue.com/gofyne/docs/01-started/05-updating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/05-updating/</guid><description>&lt;h1 id="更新-gui-内容"&gt;更新 GUI 内容&lt;a class="anchor" href="#%e6%9b%b4%e6%96%b0-gui-%e5%86%85%e5%ae%b9"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在完成了Hello World教程或其他示例之后，你将创建一个基本的用户界面。在这个页面中，我们将看到如何从代码中更新GUI的内容。&lt;/p&gt;
&lt;p&gt;第一步是将你想要更新的控件赋值给一个变量。在Hello World教程中，我们直接将&lt;code&gt;widget.NewLabel&lt;/code&gt;传递给&lt;code&gt;SetContent()&lt;/code&gt;，为了更新它，我们将其更改为两行不同的代码，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦内容被赋值给一个变量，我们就可以调用像&lt;code&gt;SetText(&amp;quot;new text&amp;quot;)&lt;/code&gt;这样的函数。在我们的示例中，我们将使用&lt;code&gt;Time.Format&lt;/code&gt;的帮助，将标签的内容设置为当前时间。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;formatted&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Now&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Format&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Time: 03:04:05&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;formatted&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是我们需要做的，以改变一个可见项的内容（见下面的完整代码）。然而，我们可以进一步定期更新内容。&lt;/p&gt;
&lt;h3 id="在后台运行"&gt;在后台运行&lt;a class="anchor" href="#%e5%9c%a8%e5%90%8e%e5%8f%b0%e8%bf%90%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大多数应用程序都需要在后台运行进程，例如下载数据或响应事件。为了模拟这一点，我们将扩展上述代码，使其每秒运行一次。&lt;/p&gt;
&lt;p&gt;像大多数Go代码一样，我们可以创建一个goroutine（使用&lt;code&gt;go&lt;/code&gt;关键字）并在那里运行我们的代码。如果我们将文本更新代码移动到一个新函数中，它可以在初始显示以及定期更新时被调用。通过组合goroutine和&lt;code&gt;time.Tick&lt;/code&gt;在一个&lt;code&gt;for&lt;/code&gt;循环中，我们可以每秒更新标签。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;go&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Tick&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Second&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;updateTime&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}()&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将这段代码放在&lt;code&gt;ShowAndRun&lt;/code&gt;或&lt;code&gt;Run&lt;/code&gt;调用之前是很重要的，因为它们在应用程序关闭之前不会返回。将所有这些结合在一起，代码将运行并每秒更新用户界面，创建一个基本的时钟控件。完整的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;updateTime&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Label&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;formatted&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Now&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Format&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Time: 03:04:05&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;formatted&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Clock&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;updateTime&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;go&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Tick&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Second&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;updateTime&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clock&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShowAndRun&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段代码演示了如何在Fyne应用程序中创建动态更新的内容，这是构建交云动用户界面的基础。&lt;/p&gt;</description></item><item><title>06. 窗口 Window 处理</title><link>https://www.poloxue.com/gofyne/docs/01-started/06-windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/06-windows/</guid><description>&lt;h1 id="窗口-window-处理"&gt;窗口 Window 处理&lt;a class="anchor" href="#%e7%aa%97%e5%8f%a3-window-%e5%a4%84%e7%90%86"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;窗口是使用&lt;code&gt;App.NewWindow()&lt;/code&gt;创建的，并需要使用&lt;code&gt;Show()&lt;/code&gt;函数来显示。&lt;code&gt;fyne.Window&lt;/code&gt;上的辅助方法&lt;code&gt;ShowAndRun()&lt;/code&gt;允许你同时显示窗口并运行应用程序。&lt;/p&gt;
&lt;p&gt;默认情况下，窗口将通过检查&lt;code&gt;MinSize()&lt;/code&gt;函数（在后面的示例中会有更多介绍）来显示其内容的正确大小。你可以通过调用&lt;code&gt;Window.Resize()&lt;/code&gt;方法来设置更大的尺寸。这个方法接受一个&lt;code&gt;fyne.Size&lt;/code&gt;，其中包含使用设备独立像素（这意味着在不同设备上将是相同的）的宽度和高度，例如，要默认使窗口正方形，我们可以这样做：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Resize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewSize&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，桌面环境可能有限制，导致窗口小于请求的尺寸。移动设备通常会忽略这一点，因为它们只以全屏显示。&lt;/p&gt;
&lt;p&gt;如果你希望显示第二个窗口，你只需调用&lt;code&gt;Show()&lt;/code&gt;函数。如果你想在应用程序启动时打开多个窗口，将&lt;code&gt;Window.Show()&lt;/code&gt;与&lt;code&gt;App.Run()&lt;/code&gt;分开也可能是有帮助的。下面的示例展示了如何在启动时加载两个窗口。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fyne.io/fyne/v2/widget&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Show&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w2&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Larger&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;More content&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Resize&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;fyne&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewSize&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Show&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Run&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述应用程序将在两个窗口都关闭时退出。如果你的应用程序安排得当，一个窗口是主窗口，其他窗口是辅助视图，你可以设置一个窗口为“主窗口”，这样如果该窗口关闭，应用程序就会退出。要做到这一点，使用&lt;code&gt;Window&lt;/code&gt;上的&lt;code&gt;SetMaster()&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;窗口可以在任何时候被创建，我们可以改变上面的代码，使得第二个窗口（w2）的内容是一个打开新窗口的按钮。你也可以从更复杂的工作流中加载窗口，但要小心，因为新窗口通常会出现在当前活动内容之上。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;w2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewButton&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Open new&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w3&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Third&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w3&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Third&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w3&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Show&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段描述说明了如何在Fyne应用程序中处理窗口，包括创建、显示、调整大小以及如何从代码中动态添加新窗口。&lt;/p&gt;</description></item><item><title>07. 测试 GUI 应用程序</title><link>https://www.poloxue.com/gofyne/docs/01-started/07-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/07-testing/</guid><description>&lt;h1 id="测试-gui-应用程序"&gt;测试 GUI 应用程序&lt;a class="anchor" href="#%e6%b5%8b%e8%af%95-gui-%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;一个好的测试套件的一部分是能够快速编写测试并定期运行它们。Fyne的API旨在使应用程序测试变得简单。通过将组件逻辑与其渲染定义分离，我们可以在不实际显示它们的情况下加载应用程序，并完全测试其功能。&lt;/p&gt;
&lt;h3 id="示例"&gt;示例&lt;a class="anchor" href="#%e7%a4%ba%e4%be%8b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们可以通过扩展我们的&lt;a href="https://www.poloxue.com/gofyne/docs/01-started/02-hello/"&gt;Hello World&lt;/a&gt;应用程序来演示单元测试，包括为用户输入他们的名字以便问候的空间。我们首先更新用户界面，使其包含两个元素：一个用于问候的&lt;code&gt;Label&lt;/code&gt;和一个用于输入名字的&lt;code&gt;Entry&lt;/code&gt;。我们使用&lt;code&gt;container.NewVBox&lt;/code&gt;（一个垂直盒子容器）将它们一个接一个地显示。更新后的用户界面代码如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;makeUI&lt;/span&gt;() (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Label&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewEntry&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewWindow&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello Person&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetContent&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;container&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewVBox&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;makeUI&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ShowAndRun&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为了测试这个输入行为，我们创建了一个新文件（以 &lt;code&gt;_test.go&lt;/code&gt; 结尾，将其标记为测试），定义了一个&lt;code&gt;TestGreeter&lt;/code&gt;函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;TestGreeting&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;testing&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以添加一个验证初始状态的初始测试，为此我们测试从&lt;code&gt;makeUI&lt;/code&gt;返回的&lt;code&gt;Label&lt;/code&gt;的&lt;code&gt;Text&lt;/code&gt;字段，如果它不正确，则错误测试。将以下代码添加到测试方法中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;in&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;makeUI&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Text&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Error&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Incorrect initial greeting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个测试将通过 - 接下来我们添加到测试中以验证问候者。我们使用Fyne的&lt;code&gt;fyne.io/fyne/v2/test&lt;/code&gt;包来帮助测试场景，调用&lt;code&gt;test.Type&lt;/code&gt;来模拟用户输入。以下测试代码将检查当输入用户姓名时输出是否更新（也确保添加了导入）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;in&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Andy&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Text&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Hello Andy!&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Error&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Incorrect user greeting&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以使用&lt;code&gt;go test .&lt;/code&gt;运行所有这些测试 - 就像任何其他测试一样。这样做，你现在会看到一个失败 - 因为我们没有添加问候逻辑。将&lt;code&gt;makeUI&lt;/code&gt;函数更新为以下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;makeUI&lt;/span&gt;() (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Label&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Entry&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewLabel&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;in&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;widget&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewEntry&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;in&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;OnChanged&lt;/span&gt; = &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetText&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;out&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样做，你会看到测试现在通过了。你也可以运行完整的应用程序（使用&lt;code&gt;go run .&lt;/code&gt;），并且当你在&lt;code&gt;Entry&lt;/code&gt;字段中输入名字时，看到问候更新。还要注意，所有这些测试都是在不显示窗口或窃取你的鼠标的情况下运行的 - 这是Fyne单元测试设置的另一个好处。&lt;/p&gt;</description></item><item><title>08. 打包桌面应用</title><link>https://www.poloxue.com/gofyne/docs/01-started/08-packaging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/08-packaging/</guid><description>&lt;h1 id="打包桌面应用"&gt;打包桌面应用&lt;a class="anchor" href="#%e6%89%93%e5%8c%85%e6%a1%8c%e9%9d%a2%e5%ba%94%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;将图形应用程序打包以供分发可能会很复杂。图形应用程序通常有与它们关联的图标和元数据，以及集成到每个环境所需的特定格式。Windows可执行文件需要嵌入图标，macOS应用是捆绑包，在Linux中有各种应该安装的元数据文件。多麻烦啊！&lt;/p&gt;
&lt;p&gt;幸运的是，“fyne”应用有一个“package”命令可以自动处理这一切。只需指定目标操作系统和任何所需的元数据（如图标），就会生成适当的包。对于.icns或.ico图标转换将自动完成，所以只需提供.png文件 :)。你需要做的就是已经为目标平台构建了应用程序&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go install fyne.io/fyne/v2/cmd/fyne@latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os darwin -icon myapp.png&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你使用的是Go的旧版本（&amp;lt;1.16），你应该使用&lt;code&gt;go get&lt;/code&gt;安装fyne&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go get fyne.io/fyne/v2/cmd/fyne
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os darwin -icon myapp.png&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将创建myapp.app，一个完整的捆绑结构，用于分发给macOS用户。然后你也可以为Linux和Windows版本构建&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os linux -icon myapp.png
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os windows -icon myapp.png&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些命令将创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;myapp.tar.gz，包含从usr/local/开始的文件夹结构，Linux用户可以将其展开到他们的系统根目录。&lt;/li&gt;
&lt;li&gt;myapp.exe（在第二次构建后，这是Windows包所需的）将嵌入图标和应用元数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你只想在你的电脑上安装桌面应用程序，那么你可以使用有用的install子命令。例如，要将你当前的应用程序系统范围内安装，你可以简单地执行以下操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne install -icon myapp.png&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所有这些命令也支持默认图标文件&lt;code&gt;Icon.png&lt;/code&gt;，这样你就可以避免每次执行时键入参数。从Fyne 2.1开始，还有一个&lt;a href="https://www.poloxue.com/gofyne/docs/01-started/11-metadata/"&gt;元数据文件&lt;/a&gt;，你可以为你的项目设置默认选项。&lt;/p&gt;
&lt;p&gt;当然，如果你愿意，你仍然可以使用标准的Go工具运行你的应用程序。&lt;/p&gt;</description></item><item><title>09. 打包移动应用</title><link>https://www.poloxue.com/gofyne/docs/01-started/09-mobile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/09-mobile/</guid><description>&lt;h1 id="打包移动应用"&gt;打包移动应用&lt;a class="anchor" href="#%e6%89%93%e5%8c%85%e7%a7%bb%e5%8a%a8%e5%ba%94%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;你的Fyne应用代码可以直接作为移动应用运行，就像它在桌面上做的那样。然而，将代码打包用于分发就复杂一些。这个页面将探索正是为了做到这一点而将你的应用带到iOS和Android上的过程。&lt;/p&gt;
&lt;p&gt;首先，你需要为移动打包安装更多的开发工具。对于Android构建，你必须安装Android SDK和NDK，并设置适当的环境，以便工具（如&lt;code&gt;adb&lt;/code&gt;）可以在命令行中找到。要构建iOS应用，你需要在你的macOS电脑上安装Xcode以及命令行工具可选包。&lt;/p&gt;
&lt;p&gt;一旦你有了一个工作的开发环境，打包就很简单了。要为Android和iOS构建应用程序，以下命令将为你完成所有操作。确保有一个唯一的应用程序标识符，因为在你首次发布后更改这些是不明智的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os android -appID com.example.myapp -icon mobileIcon.png
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os ios -appID com.example.myapp -icon mobileIcon.png&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这些命令完成后（首次编译可能需要一些时间），你将在你的目录中看到两个新文件，&lt;code&gt;myapp.apk&lt;/code&gt;和&lt;code&gt;myapp.app&lt;/code&gt;。你会看到后者与darwin应用程序捆绑包同名 - 不要将它们混淆，因为它们在另一个平台上不会工作。&lt;/p&gt;
&lt;p&gt;要在你的手机或模拟器上安装Android应用，只需调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;adb install myapp.apk&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于iOS，要在设备上安装，打开Xcode并在“Window”菜单中选择“Devices and Simulators”菜单项。然后找到你的手机并将&lt;code&gt;myapp.app&lt;/code&gt;图标拖到你的应用列表上。&lt;/p&gt;
&lt;p&gt;如果你想在模拟器上安装，请确保使用&lt;code&gt;iossimulator&lt;/code&gt;而不是&lt;code&gt;ios&lt;/code&gt;打包你的应用程序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os iossimulator -appID com.example.myapp -icon mobileIcon.png&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，你可以如下使用命令行工具：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;xcrun simctl install booted myapp.app&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这些步骤介绍了如何为iOS和Android设备打包和安装Fyne应用程序，从而使Fyne成为开发跨平台移动应用的强大工具。&lt;/p&gt;</description></item><item><title>10. 在浏览器中运行</title><link>https://www.poloxue.com/gofyne/docs/01-started/10-webapp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/10-webapp/</guid><description>&lt;h1 id="在浏览器中运行"&gt;在浏览器中运行&lt;a class="anchor" href="#%e5%9c%a8%e6%b5%8f%e8%a7%88%e5%99%a8%e4%b8%ad%e8%bf%90%e8%a1%8c"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Fyne应用程序也可以通过标准的网络浏览器在网络上运行！由于不同引擎的标准和优势各异，这稍微复杂一些。&lt;/p&gt;
&lt;p&gt;使用Fyne创建的网络应用将提供一个WASM运行时以及一个JavaScript代码包，这使得生成的网页可以查看当前浏览器并选择适合其优势的实现方式。这在大多数系统上提供了极好的用户体验。&lt;/p&gt;
&lt;p&gt;为了准备你的应用通过网络使用，我们再次使用“fyne”命令行应用，它有一个用于快速测试的“serve”命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go install fyne.io/fyne/v2/cmd/fyne@latest
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne serve&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你会看到，过了一会儿，一个网页服务器已经在8080端口启动。只需在你的网络浏览器中打开https://localhost:8080，你就可以使用你的应用了！&lt;/p&gt;
&lt;p&gt;这个过程中使用的工具对Go版本非常敏感，因此可能会出现与版本不匹配相关的错误。如果你使用的是1.18版之后的Go，你应该确保你有1.18版的副本，并在你的环境中引用它，比如（对于一个基于&lt;a href="https://brew.sh"&gt;homebrew&lt;/a&gt;的安装）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export GOPHERJS_GOROOT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/opt/homebrew/Cellar/go@1.18/1.18.10/libexec&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以在&lt;a href="https://github.com/gopherjs/gopherjs"&gt;GopherJS&lt;/a&gt;文档上了解更多相关信息。&lt;/p&gt;
&lt;h3 id="打包用于网络分发"&gt;打包用于网络分发&lt;a class="anchor" href="#%e6%89%93%e5%8c%85%e7%94%a8%e4%ba%8e%e7%bd%91%e7%bb%9c%e5%88%86%e5%8f%91"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fyne serve&lt;/code&gt;命令非常适合本地测试，但就像其他平台一样，你也会想要能够分发你的应用。为了准备上传的文件，就像常规的&lt;a href="https://www.poloxue.com/gofyne/docs/01-started/08-packaging/"&gt;打包&lt;/a&gt;一样，使用&lt;code&gt;fyne package&lt;/code&gt;命令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os web&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以选择只为WASM或JavaScript打包，而不是自动检测设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os wasm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fyne package -os js&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="演示"&gt;演示&lt;a class="anchor" href="#%e6%bc%94%e7%a4%ba"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;你可以访问&lt;a href="https://demo.fyne.io/"&gt;demo.fyne.io&lt;/a&gt;，在任何设备上测试Fyne应用的实际运行情况。&lt;/p&gt;
&lt;h3 id="限制"&gt;限制&lt;a class="anchor" href="#%e9%99%90%e5%88%b6"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;截至v2.4.0版本发布，网络驱动程序还没有完全完成，所以你的应用可能无法使用以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多窗口（但对话框都可以在当前窗口内部工作）&lt;/li&gt;
&lt;li&gt;文档和偏好设置的存储&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题正在被解决，并将在未来的版本中得到解决。&lt;/p&gt;</description></item><item><title>11. 应用元数据 Metadata</title><link>https://www.poloxue.com/gofyne/docs/01-started/11-metadata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/11-metadata/</guid><description>&lt;h1 id="应用元数据-metadata"&gt;应用元数据 Metadata&lt;a class="anchor" href="#%e5%ba%94%e7%94%a8%e5%85%83%e6%95%b0%e6%8d%ae-metadata"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;自&lt;code&gt;fyne&lt;/code&gt;命令v2.1.0版本发布以来，我们支持一个元数据文件，允许你在仓库中存储有关你的应用的信息。这个文件是可选的，但可以帮助避免在每个包和发布命令中记住特定的构建参数。&lt;/p&gt;
&lt;p&gt;文件应该命名为&lt;code&gt;FyneApp.toml&lt;/code&gt;，位于你运行&lt;code&gt;fyne&lt;/code&gt;命令的目录中（通常是&lt;code&gt;main&lt;/code&gt;包）。文件的内容如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-toml" data-lang="toml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Website&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;https://example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[&lt;span style="color:#a6e22e"&gt;Details&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Icon&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;Icon.png&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;My App&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ID&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;com.example.app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Version&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;Build&lt;/span&gt; = &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件的顶部部分是元数据，如果你将你的应用上传到https://apps.fyne.io列表页面时会使用，因此它是可选的。[Details]部分包含了其他应用商店和操作系统在发布过程中使用的有关你的应用的数据。如果找到了这个文件，fyne工具将会使用它，很多强制性的命令参数如果元数据存在则不是必需的。你仍然可以使用命令行参数覆盖这些值。&lt;/p&gt;</description></item><item><title>12. 发布到应用商店</title><link>https://www.poloxue.com/gofyne/docs/01-started/12-distribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/12-distribution/</guid><description>&lt;h1 id="分发到应用商店"&gt;分发到应用商店&lt;a class="anchor" href="#%e5%88%86%e5%8f%91%e5%88%b0%e5%ba%94%e7%94%a8%e5%95%86%e5%ba%97"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;按照&lt;a href="https://www.poloxue.com/gofyne/docs/01-started/08-packaging/"&gt;打包&lt;/a&gt;页面所述打包图形应用程序会提供一个可以直接分享或分发的文件或捆绑包。然而，签名并上传到应用商店和市场是一个需要特定平台配置的额外步骤，我们将在这个页面中介绍。&lt;/p&gt;
&lt;p&gt;在这些步骤中，我们将使用fyne命令行工具的一部分新工具。&lt;code&gt;fyne release&lt;/code&gt;步骤处理为每个商店的签名和准备，但参数因平台而异，我们将在下面看到。&lt;/p&gt;
&lt;h3 id="macos-appstore自fyne-142起"&gt;macOS AppStore（自fyne 1.4.2起）&lt;a class="anchor" href="#macos-appstore%e8%87%aafyne-142%e8%b5%b7"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先决条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行macOS和Xcode的Apple mac&lt;/li&gt;
&lt;li&gt;Apple开发者账户&lt;/li&gt;
&lt;li&gt;Mac AppStore 应用证书&lt;/li&gt;
&lt;li&gt;Mac AppStore 安装程序证书&lt;/li&gt;
&lt;li&gt;从 AppStore 下载的 Apple Transporter 应用&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href="https://appstoreconnect.apple.com"&gt;AppStore Connect&lt;/a&gt;上为要上传的构建准备好你的应用/版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为发布捆绑完成的应用：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ fyne release -appID com.example.myapp -appVersion 1.0 -appBuild &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; -category games&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;.pkg&lt;/code&gt;拖到Transporter上并点击“交付”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;返回到AppStore Connect网站，选择你的构建版本进行发布，并提交审核。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="谷歌play商店android"&gt;谷歌Play商店（Android）&lt;a class="anchor" href="#%e8%b0%b7%e6%ad%8cplay%e5%95%86%e5%ba%97android"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先决条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Play控制台账户&lt;/li&gt;
&lt;li&gt;分发密钥库（创建指南在
&lt;a href="https://developer.android.com/studio/publish/app-signing"&gt;android文档&lt;/a&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href="https://play.google.com/apps/publish"&gt;Google Play控制台&lt;/a&gt;上为要上传的构建准备好你的应用/版本。关闭“Play应用签名”选项，因为我们自己管理它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为发布捆绑完成的应用：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ fyne release -os android -appID com.example.myapp -appVersion 1.0 -appBuild &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;.apk&lt;/code&gt;文件拖到Play控制台中应用版本页面的构建投放区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始新版本的推出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="ios-appstore自fyne-141起"&gt;iOS AppStore（自fyne 1.4.1起）&lt;a class="anchor" href="#ios-appstore%e8%87%aafyne-141%e8%b5%b7"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先决条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行macOS和Xcode的Apple mac&lt;/li&gt;
&lt;li&gt;Apple开发者账户&lt;/li&gt;
&lt;li&gt;iOS AppStore 分发证书&lt;/li&gt;
&lt;li&gt;从 AppStore 下载的Apple Transporter应用&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在&lt;a href="https://appstoreconnect.apple.com"&gt;AppStore Connect&lt;/a&gt;上为要上传的构建准备好你的应用/版本。&lt;/p&gt;</description></item><item><title>13. 跨平台编译</title><link>https://www.poloxue.com/gofyne/docs/01-started/13-cross-compile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/01-started/13-cross-compile/</guid><description>&lt;h2 id="跨平台编译"&gt;跨平台编译&lt;a class="anchor" href="#%e8%b7%a8%e5%b9%b3%e5%8f%b0%e7%bc%96%e8%af%91"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;使用Go进行跨平台编译被设计得非常简单 - 我们只需设置目标操作系统的环境变量&lt;code&gt;GOOS&lt;/code&gt;（如果目标是不同的架构，还需要设置&lt;code&gt;GOARCH&lt;/code&gt;）。不幸的是，当使用原生图形调用时，Fyne中的CGo使用使这变得有些复杂。&lt;/p&gt;
&lt;h3 id="从开发计算机编译"&gt;从开发计算机编译&lt;a class="anchor" href="#%e4%bb%8e%e5%bc%80%e5%8f%91%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bc%96%e8%af%91"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;要跨编译Fyne应用程序，你还必须设置&lt;code&gt;CGO_ENABLED=1&lt;/code&gt;，这告诉go启用C编译器（当目标平台与当前系统不同时，这通常是关闭的）。不幸的是，这意味着你必须为你将要编译的目标平台安装一个C编译器。安装适当的编译器后，你还需要设置&lt;code&gt;CC&lt;/code&gt;环境变量来告诉Go使用哪个编译器。&lt;/p&gt;
&lt;p&gt;安装所需工具有许多方法 - 并且可以使用不同的工具。Fyne开发者推荐的配置是：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;GOOS（目标）&lt;/th&gt;
 &lt;th&gt;CC&lt;/th&gt;
 &lt;th&gt;提供者&lt;/th&gt;
 &lt;th&gt;下载&lt;/th&gt;
 &lt;th&gt;备注&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;darwin&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;o32-clang&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;osxcross&lt;/td&gt;
 &lt;td&gt;&lt;a href="https://github.com/tpoechtrager/osxcross"&gt;来自github.com&lt;/a&gt;&lt;/td&gt;
 &lt;td&gt;你还需要安装macOS SDK（下载链接处有指引）&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;windows&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;x86_64-w64-mingw64-gcc&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;mingw64&lt;/td&gt;
 &lt;td&gt;包管理器&lt;/td&gt;
 &lt;td&gt;对于macOS使用&lt;a href="https://brew.sh"&gt;homebrew&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;linux&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;gcc&lt;/code&gt; 或 &lt;code&gt;x86_64-linux-musl-gcc&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;gcc 或 musl-cross&lt;/td&gt;
 &lt;td&gt;&lt;a href="https://www.cygwin.com/"&gt;cygwin&lt;/a&gt; 或 包管理器&lt;/td&gt;
 &lt;td&gt;musl-cross可从&lt;a href="https://brew.sh"&gt;homebrew&lt;/a&gt;获取，提供linux gcc。你还需要为编译安装X11和mesa头文件。&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设置上述环境变量后，你应该能够以通常的方式进行编译。如果进一步出现错误，很可能是由于缺少包。一些目标平台需要安装额外的库或头文件才能成功编译。&lt;/p&gt;
&lt;h3 id="使用虚拟环境"&gt;使用虚拟环境&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8%e8%99%9a%e6%8b%9f%e7%8e%af%e5%a2%83"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;由于Linux系统能够轻松地交叉编译到macOS和Windows，因此当你不是从Linux开发时，使用虚拟化环境可能更简单。Docker镜像是复杂构建配置的有用工具，这也适用于Fyne。可以使用不同的工具。Fyne开发者推荐的工具是&lt;a href="https://github.com/fyne-io/fyne-cross"&gt;fyne-cross&lt;/a&gt;。它受到&lt;a href="https://github.com/karalabe/xgo"&gt;xgo&lt;/a&gt;的启发，并使用基于&lt;a href="https://github.com/docker/golang-cross"&gt;golang-cross&lt;/a&gt;镜像构建的&lt;a href="https://hub.docker.com/r/fyneio/fyne-cross"&gt;docker镜像&lt;/a&gt;，该镜像包括了Windows的MinGW编译器和macOS SDK，以及Fyne的需求。&lt;/p&gt;
&lt;p&gt;fyne-cross允许为以下目标构建二进制文件并创建分发包：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;GOOS&lt;/th&gt;
 &lt;th&gt;GOARCH&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;darwin&lt;/td&gt;
 &lt;td&gt;amd64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;darwin&lt;/td&gt;
 &lt;td&gt;386&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;linux&lt;/td&gt;
 &lt;td&gt;amd64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;linux&lt;/td&gt;
 &lt;td&gt;386&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;linux&lt;/td&gt;
 &lt;td&gt;arm64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;linux&lt;/td&gt;
 &lt;td&gt;arm&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;windows&lt;/td&gt;
 &lt;td&gt;amd64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;windows&lt;/td&gt;
 &lt;td&gt;386&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;android&lt;/td&gt;
 &lt;td&gt;amd64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;android&lt;/td&gt;
 &lt;td&gt;386&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;android&lt;/td&gt;
 &lt;td&gt;arm64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;android&lt;/td&gt;
 &lt;td&gt;arm&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;ios&lt;/td&gt;
 &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;freebsd&lt;/td&gt;
 &lt;td&gt;amd64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;freebsd&lt;/td&gt;
 &lt;td&gt;arm64&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote class='book-hint '&gt;
&lt;p&gt;注意：iOS编译仅支持在darwin主机上。&lt;/p&gt;</description></item></channel></rss>