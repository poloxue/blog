<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>探索 Fyne on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/02-explore/</link><description>Recent content in 探索 Fyne on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/02-explore/index.xml" rel="self" type="application/rss+xml"/><item><title>01. Canvas 和 CanvasObject</title><link>https://www.poloxue.com/gofyne/docs/02-explore/01-canvas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/01-canvas/</guid><description>Canvas 和 CanvasObject # 在Fyne中，画布（Canvas）是应用程序绘制的区域。每个窗口都有一个画布，你可以通过Window.Canvas()访问它，但通常你会发现Window上的函数可以避免直接访问画布。
Fyne中可以绘制的所有内容都是CanvasObject类型。这个示例打开了一个新窗口，然后通过设置窗口画布的内容来展示不同类型的基本图形元素。如文本和圆形示例所示，每种类型的对象都有许多定制方式。
除了使用Canvas.SetContent()更改显示的内容外，还可以更改当前可见的内容。例如，如果你更改了矩形的FillColour，可以使用rect.Refresh()请求刷新这个已存在的组件。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;time&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;Canvas&amp;#34;) myCanvas := myWindow.Canvas() blue := color.NRGBA{R: 0, G: 0, B: 180, A: 255} rect := canvas.NewRectangle(blue) myCanvas.SetContent(rect) go func() { time.Sleep(time.Second) green := color.NRGBA{R: 0, G: 180, B: 0, A: 255} rect.FillColor = green rect.Refresh() }() myWindow.Resize(fyne.NewSize(100, 100)) myWindow.ShowAndRun() } 我们可以用相同的方式绘制许多不同的绘图元素，如圆形和文本。
func setContentToText(c fyne.</description></item><item><title>02. 容器与布局</title><link>https://www.poloxue.com/gofyne/docs/02-explore/02-container/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/02-container/</guid><description>容器与布局 # 在前一个示例中，我们看到了如何将CanvasObject设置为Canvas的内容，但只显示一个视觉元素并不是很有用。要显示多个项，我们使用Container类型。
由于fyne.Container也是一个fyne.CanvasObject，我们可以将它设置为fyne.Canvas的内容。在这个示例中，我们创建了3个文本对象，然后使用container.NewWithoutLayout()函数将它们放入一个容器中。由于没有设置布局，我们可以像你看到的那样用text2.Move()移动元素。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; //&amp;#34;fyne.io/fyne/v2/layout&amp;#34; ) func main() { myApp := app.New() myWindow := myApp.NewWindow(&amp;#34;Container&amp;#34;) green := color.NRGBA{R: 0, G: 180, B: 0, A: 255} text1 := canvas.NewText(&amp;#34;Hello&amp;#34;, green) text2 := canvas.NewText(&amp;#34;There&amp;#34;, green) text2.Move(fyne.NewPos(20, 20)) content := container.NewWithoutLayout(text1, text2) // content := container.New(layout.NewGridLayout(2), text1, text2) myWindow.SetContent(content) myWindow.ShowAndRun() } fyne.Layout实现了一种在容器内组织项目的方法。通过在这个示例中取消注释container.New()行，你改变了容器以使用2列的网格布局。运行此代码并尝试调整窗口大小，看看布局如何自动配置窗口的内容。还要注意，text2的手动位置被布局代码忽略了。
要了解更多，你可以查看 布局组件。</description></item><item><title>03. 内置控件 Widget</title><link>https://www.poloxue.com/gofyne/docs/02-explore/03-widgets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/03-widgets/</guid><description>标准 Widget (在 widget 包中） # 手风琴（Accordion） # 手风琴显示一个手风琴项目列表。每个项目由一个按钮表示，当点击时会展示一个详细视图。
按钮（Button） # 按钮控件有一个文本标签和图标，两者都是可选的。
卡片（Card） # 卡片控件以头部和副标题将元素分组，所有这些都是可选的。
复选框（Check） # 复选框控件有一个文本标签和一个选中（或未选中）的图标。
输入框（Entry） # 输入框控件允许在聚焦时输入简单文本。
密码输入框控件隐藏文本输入，并添加一个按钮以显示文本。
文件图标（FileIcon） # 文件图标为各种类型的文件提供有用的标准图标。它显示文件类型的指示图标并显示文件类型的扩展名。
表单（Form） # 表单控件是一个两列网格，每行有一个标签和一个控件（通常是输入）。如果应该显示任何表单控制按钮，则网格的最后一行将包含它们。
超链接（Hyperlink） # 超链接控件是一个具有适当填充和布局的文本组件。点击时，URL会在默认网络浏览器中打开。
图标（Icon） # 图标控件是一个基本的图像组件，加载资源以匹配主题。
标签（Label） # 标签控件是一个具有适当填充和布局的标签组件。
进度条（Progress bar） # 进度条控件创建一个表示进度的水平面板。
无限进度条控件创建一个表示无限等待的水平面板。一个无限进度条会重复从0%循环到100%，直到调用Stop()。
单选组（RadioGroup） # 单选组控件有一个文本标签列表和每个旁边的单选检查图标。
选择（Select） # 选择控件有一个选项列表，显示当前选项，并在点击时触发一个事件函数。
选择输入（SelectEntry） # 选择输入控件在选择控件中添加了一个可编辑组件。用户可以选择一个选项或输入自己的值。
分隔符（Separator） # 分隔符控件在其他元素之间显示一条分隔线。
滑块（Slider） # 滑块是一个可以在两个固定值之间滑动的控件。
文本网格（TextGrid） # 文本网格是一个等宽的字符网格。这是设计用来被文本编辑器、代码预览或终端仿真器使用的。
工具栏（Toolbar） # 工具栏控件创建一个水平的工具按钮列表。
集合控件（在widget包中） # 集合控件提供高级缓存功能，以提供大量数据的高性能渲染。这确实导致了更复杂的构造器，但对于它启用的结果来说是一个好平衡。这些控件中的每一个都使用了一系列回调，最小集由它们的构造函数定义，其中包括数据大小，可以重用的模板项目的创建，以及将数据应用到即将添加到显示中的控件的函数。
列表（List） # 列表提供了许多子项的高性能垂直滚动。</description></item><item><title>04. 布局组件</title><link>https://www.poloxue.com/gofyne/docs/02-explore/04-layouts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/04-layouts/</guid><description>布局组件 # 水平盒（HBox） # 水平盒将项目以水平行的方式排列。容器中的每个元素将具有相同的高度（容器中最高项目的高度），并且对象将按其最小宽度左对齐。
垂直盒（VBox） # 垂直盒将项目以垂直列的方式排列。容器中的每个元素将具有相同的宽度（容器中最宽项目的宽度），并且对象将按其最小高度顶部对齐。
居中（Center） # 居中布局将所有容器元素定位在容器的中心。每个对象都将设置为其最小尺寸。
表单（Form） # 表单布局将项目成对排列，其中第一列为最小宽度。这通常用于表单中的标签元素，其中标签位于第一列，其描述的项目位于第二列。你应该总是向表单布局添加偶数个元素。
网格（Grid） # 网格布局在可用空间中均匀排列项目。指定列数，对象水平定位，直到达到列数，此时开始新的行。所有对象具有相同的大小，即宽度除以列总数，高度将是总高度除以所需行数减去填充。
网格包裹（GridWrap） # 网格包裹布局将所有项目沿一行流动排列，如果空间不足，则换到新行。所有对象将设置为相同的大小，即传递给布局的大小。这种布局可能不会尊重项目的MinSize以管理这种统一布局。通常用于文件管理器或图像缩略图列表。
边框（Border） # 边框布局支持在可用空间外围定位项目。边框传递指向对象的指针（顶部、左侧、底部、右侧）。容器中未定位在边框上的所有项目将填充剩余空间。
最大（Max） # 最大布局将所有容器元素定位以填充可用空间。对象都将是全尺寸的，并按照它们被添加到容器中的顺序绘制（最后添加的在最上面）。
填充（Padded） # 填充布局将所有容器元素定位以填充可用空间，但在外围有一小块填充。填充的大小是主题特定的。对象都将按照它们被添加到容器中的顺序绘制（最后添加的在最上面）。
组合布局 # 通过使用多个布局，可以构建更复杂的应用程序结构。每个具有自己布局的多个容器可以嵌套，仅使用上面列出的标准布局创建完整的用户界面布局。例如，一个用于页眉的水平盒，一个用于左侧文件面板的垂直盒，以及内容区域中的网格包装布局 - 所有这些都放在使用边框布局的容器内，可以构建下面所示的结果。</description></item><item><title>05. Dialog 对话框</title><link>https://www.poloxue.com/gofyne/docs/02-explore/05-dialogs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/05-dialogs/</guid><description>对话框列表 # 颜色 # 允许用户从标准集合中选择一个颜色（或在高级模式中选择任何颜色）。
确认 # 请求确认一个操作。
文件打开 # 提示用户选择一个文件以在应用内使用。实际显示的对话框将取决于当前操作系统。
表单 # 在一个对话框中获取各种输入元素，并进行验证。
信息 # 一种向应用用户展示一些信息的简单方法。
自定义 # 在对话框容器内展示任何内容。</description></item><item><title>06. 主题 Icon 小图标</title><link>https://www.poloxue.com/gofyne/docs/02-explore/06-icons/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/06-icons/</guid><description>主题 Icon 小图标 # 以下每个图标都可以通过theme包作为一个函数获得。例如theme.InfoIcon()。
这些图标也可以通过使用ThemeIconName以及在实现了fyne.Theme的结构体上的Icon方法，通过它们的源图标名称获得。例如theme.Icon(theme.IconNameInfo)。
列表 # AccountIcon ArrowDropDownIcon ArrowDropUpIcon BrokenImageIcon CancelIcon &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?> CheckButtonIcon &lt;?xml version="1.0" encoding="UTF-8" standalone="no"?> CheckButtonCheckedIcon ColorAchromaticIcon ColorChromaticIcon ColorPaletteIcon ComputerIcon ConfirmIcon ContentAddIcon ContentClearIcon ContentCopyIcon ContentCutIcon ContentPasteIcon ContentRedoIcon ContentRemoveIcon ContentUndoIcon DeleteIcon DocumentCreateIcon DocumentIcon DocumentPrintIcon DocumentSaveIcon DownloadIcon ErrorIcon &lt;?xml version="1.0" encoding="UTF-8"?> FileApplicationIcon &lt;?xml version="1.0" encoding="UTF-8"?> FileAudioIcon FileIcon &lt;?xml version="1.0" encoding="UTF-8"?> FileImageIcon &lt;?xml version="1.0" encoding="UTF-8"?> FileTextIcon &lt;?xml version="1.0" encoding="UTF-8"?> FileVideoIcon FolderIcon FolderNewIcon FolderOpenIcon GridIcon HelpIcon HistoryIcon HomeIcon InfoIcon ListIcon LoginIcon LogoutIcon MailAttachmentIcon MailComposeIcon MailForwardIcon MailReplyAllIcon MailReplyIcon MailSendIcon MediaFastForwardIcon MediaFastRewindIcon MediaMusicIcon MediaPauseIcon MediaPhotoIcon MediaPlayIcon MediaRecordIcon MediaReplayIcon MediaSkipNextIcon MediaSkipPreviousIcon MediaStopIcon MediaVideoIcon MenuExpandIcon MenuIcon MoreHorizontalIcon MoreVerticalIcon MoveDownIcon MoveUpIcon NavigateBackIcon NavigateNextIcon QuestionIcon &lt;?</description></item><item><title>07. 快捷键</title><link>https://www.poloxue.com/gofyne/docs/02-explore/07-shortcuts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/07-shortcuts/</guid><description>快捷键 # 快捷键是可以通过键盘组合键或上下文菜单触发的常见任务。快捷键，很像键盘事件，可以附加到一个聚焦的元素上，或者在Canvas上注册，以便在Window中始终可用。
在Canvas中注册 # 有许多标准的快捷键定义（如fyne.ShortcutCopy），它们连接到标准键盘快捷键和右键菜单。添加新Shortcut的第一步是定义快捷键。对于大多数用途，这将是一个键盘触发的快捷键，这是一个桌面扩展。为此，我们使用desktop.CustomShortcut，例如，要使用Tab键和Control修饰符，你可能会做如下操作：
ctrlTab := &amp;amp;desktop.CustomShortcut{KeyName: fyne.KeyTab, Modifier: fyne.KeyModifierControl} ctrlAltTab := &amp;amp;desktop.CustomShortcut{KeyName: fyne.KeyTab, Modifier: fyne.KeyModifierControl | fyne.KeyModifierAlt} 注意，这个快捷键可以重复使用，所以你可以将它附加到菜单或其他项上。在这个示例中，我们希望它始终可用，所以我们将其注册到我们窗口的Canvas上，如下所示：
ctrlTab := &amp;amp;desktop.CustomShortcut{KeyName: fyne.KeyTab, Modifier: fyne.KeyModifierControl} w.Canvas().AddShortcut(ctrlTab, func(shortcut fyne.Shortcut) { log.Println(&amp;#34;我们按下了Ctrl+Tab&amp;#34;) }) w.Canvas().AddShortcut(ctrlAltTab, func(shortcut fyne.Shortcut) { log.Println(&amp;#34;我们按下了Ctrl+Alt+Tab&amp;#34;) }) 如你所见，在这种方式注册快捷键有两个部分 - 传递快捷键定义以及回调函数。如果用户输入键盘快捷键，那么函数将被调用并打印输出。
快捷键只能与修饰键结合使用。为了响应没有修饰键的键盘输入，请使用canvas.OnTypedRune或canvas.OnTypedKey。
在输入框中添加快捷键 # 当当前项目聚焦时，让快捷键仅适用也是有帮助的。这种方法可以用于任何可聚焦的控件，并通过扩展该控件并添加TypedShortcut处理器来管理。这和添加键处理器很像，不同之处在于传入的值将是一个fyne.Shortcut。
type myEntry struct { widget.Entry } func (m *myEntry) TypedShortcut(s fyne.Shortcut) { if _, ok := s.(*desktop.CustomShortcut); !ok { m.Entry.TypedShortcut(s) return } log.Println(&amp;#34;输入了快捷键:&amp;#34;, s) } 从上面的摘录中你可以看到如何实现一个TypedShortcut处理器。在这个函数内部，你应该检查快捷键是否为之前使用的自定义类型。如果快捷键是标准的，调用原始快捷键处理器（如果控件有一个）是个好主意。 完成这些检查后，你可以将快捷键与你正在处理的各种类型进行比较（如果有多个）。</description></item><item><title>08. 偏好设置</title><link>https://www.poloxue.com/gofyne/docs/02-explore/08-preferences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/08-preferences/</guid><description>偏好设置 # 为应用程序存储用户配置和值是应用开发者的常见任务，但在多个平台上实现它可能既乏味又耗时。为了简化这个过程，Fyne 提供了一个 API，用于以清晰且易于理解的方式在文件系统上存储值，同时为您处理复杂的部分。
让我们从 API 的设置开始。它是 Preferences 接口的一部分，其中存在用于 Bool、Float、Int 和 String 值的存储和加载功能。它们每个都包含三个不同的函数，一个用于加载，一个带有回退值的加载，最后一个用于存储值。下面为 String 类型展示了这三个函数及其行为：
// String 查找键的字符串值 String(key string) string // StringWithFallback 查找字符串值，并在未找到时返回给定的回退值 StringWithFallback(key, fallback string) string // SetString 为给定键保存一个字符串值 SetString(key string, value string) 这些函数可以通过创建的应用变量并调用其 Preferences() 方法来访问。请注意，创建带有唯一 ID 的应用是必要的（通常像反转的 url 那样）。这意味着应用程序需要使用 app.NewWithID() 来创建，以拥有自己存储值的位置。它大致可以像下面的示例那样使用：
a := app.NewWithID(&amp;#34;com.example.tutorial.preferences&amp;#34;) [...] a.Preferences().SetBool(&amp;#34;Boolean&amp;#34;, true) number := a.Preferences().IntWithFallback(&amp;#34;ApplicationLuckyNumber&amp;#34;, 21) expression := a.Preferences().String(&amp;#34;RegularExpression&amp;#34;) [...] 为了展示这一点，我们将构建一个简单的小应用，它总是在设定的时间后关闭。这个超时应该是用户可更改的，并在应用程序的下一次启动时应用。
让我们首先创建一个名为 timeout 的变量，用于以 time.Duration 的形式存储时间。
var timeout time.Duration 然后，我们可以创建一个选择控件，让用户从几个预定义的字符串中选择超时，然后将超时乘以字符串所对应的秒数。最后，使用 &amp;quot;AppTimeout&amp;quot; 键将字符串值设置为选定的值。</description></item><item><title>09. 系统托盘菜单</title><link>https://www.poloxue.com/gofyne/docs/02-explore/09-systray/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/09-systray/</guid><description>添加系统托盘菜单 # 自 v2.2.0 版本以来，Fyne 内置了对系统托盘菜单的支持。此功能在 macOS、Windows 和 Linux 计算机上显示一个图标，当点击时，会弹出由应用程序指定的菜单。
由于这是一个特定于桌面的功能，我们首先必须进行运行时检查，以确认应用程序正在桌面模式下运行。为此，我们进行 Go 类型断言以获取对桌面功能的引用：
if desk, ok := a.(desktop.App); ok { ... } 如果 ok 变量为真，则我们可以使用标准 Fyne 菜单 API 设置菜单，你可能之前在 Window.SetMainMenu 中使用过这个 API。
m := fyne.NewMenu(&amp;#34;MyApp&amp;#34;, fyne.NewMenuItem(&amp;#34;Show&amp;#34;, func() { log.Println(&amp;#34;点击了显示&amp;#34;) })) desk.SetSystemTrayMenu(m) 将此代码添加到应用程序的设置中，运行应用程序，你会看到系统托盘中显示了一个 Fyne 图标。当你点击它时，会出现一个包含“显示”和“退出”的菜单。
默认图标是 Fyne 标志，你可以通过 应用元数据更改这个设置，或者通过 App.SetIcon 或直接使用 desk.SetSystemTrayIcon 为系统托盘设置应用图标。
管理窗口生命周期 # 默认情况下，当你关闭所有窗口时 Fyne 应用将会退出，这可能不是你希望的系统托盘应用的行为。要覆盖此行为，你可以使用 Window.SetCloseIntercept 功能来覆盖窗口关闭时的操作。在下面的示例中，我们通过调用 Window.Hide() 来隐藏窗口而不是关闭它。在第一次显示窗口之前添加这个。
w.SetCloseIntercept(func() { w.Hide() }) 隐藏窗口的好处是你可以简单地再次使用 Window.Show() 显示它，如果需要第二次使用相同的内容，这比创建一个新窗口更高效。我们更新之前创建的菜单以显示上面隐藏的窗口。
fyne.NewMenuItem(&amp;#34;Show&amp;#34;, func() { w.</description></item><item><title>10. 数据绑定</title><link>https://www.poloxue.com/gofyne/docs/02-explore/10-binding/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/10-binding/</guid><description>数据绑定 # 数据绑定在 Fyne v2.0.0 中引入，使得将许多控件连接到随时间更新的数据源变得更加容易。data/binding 包提供了许多有用的绑定，可以管理应用中使用的大多数标准类型。数据绑定可以使用绑定 API 管理（例如 NewString），也可以连接到外部数据项（如 BindInt(*int)）。
支持绑定的控件通常有一个 ...WithData 构造器，在创建控件时设置绑定。你也可以调用 Bind() 和 Unbind() 来管理现有控件的数据。以下示例展示了如何管理一个与简单的 Label 控件绑定的 String 数据项。
package main import ( &amp;#34;time&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/data/binding&amp;#34; &amp;#34;fyne.io/fyne/v2/widget&amp;#34; ) func main() { a := app.New() w := a.NewWindow(&amp;#34;Hello&amp;#34;) str := binding.NewString() go func() { dots := &amp;#34;.....&amp;#34; for i := 5; i &amp;gt;= 0; i-- { str.Set(&amp;#34;倒计时&amp;#34; + dots[:i]) time.Sleep(time.Second) } str.Set(&amp;#34;发射！&amp;#34;) }() w.SetContent(widget.NewLabelWithData(str)) w.ShowAndRun() } 你可以在本站的 数据绑定部分了解更多信息。</description></item><item><title>11. 编译选项</title><link>https://www.poloxue.com/gofyne/docs/02-explore/11-compiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/02-explore/11-compiling/</guid><description> 编译选项 # Fyne 通常会通过选择驱动程序和配置来适当地为目标平台配置您的应用程序。以下构建标签得到支持，可帮助您的开发。例如，如果您希望在桌面计算机上模拟移动应用程序，您可以使用以下命令：
go run -tags mobile main.go 标签 描述 debug 显示调试信息，包括视觉布局，以帮助理解您的应用。 gles 强制使用嵌入式 OpenGL (GLES) 而不是完整的 OpenGL。这通常由目标设备控制，通常不需要。 hints 显示开发者提示以进行改进或优化。使用 hints 运行时，当您的应用程序不遵循材料设计或其他建议时，将记录下来。 mobile 此标签在模拟的移动窗口中运行应用程序。当您想要在不编译和安装到设备的情况下预览您的应用在移动平台上的外观时非常有用。 no_animations 禁用标准控件和容器中的非必要动画。 no_emoji 不包含嵌入的 emoji 字体。这将在您的应用中禁用 emoji，但会使二进制文件更小。 no_native_menus 此标志专门用于 macOS，表示应用程序不应使用 macOS 原生菜单。相反，菜单将在应用程序窗口内显示。在 macOS 上测试应用程序以模拟 Windows 或 Linux 上的行为时最有用。</description></item></channel></rss>