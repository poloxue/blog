<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>画图和动画 on Go Fyne 中文</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/</link><description>Recent content in 画图和动画 on Go Fyne 中文</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/gofyne/docs/03-canvas/index.xml" rel="self" type="application/rss+xml"/><item><title>01. 矩形 Rectangle</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/01-rectangle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/01-rectangle/</guid><description>矩形 Rectangle # canvas.Rectangle 是 Fyne 中最简单的画布对象。它显示指定颜色的区块。您也可以使用 FillColor 字段设置颜色。
在这个示例中，矩形填充了窗口，因为它是唯一的内容元素。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;矩形&amp;#34;) rect := canvas.NewRectangle(color.White) w.SetContent(rect) w.Resize(fyne.NewSize(150, 100)) w.ShowAndRun() } 其他的 fyne.CanvasObject 类型有更多的配置，让我们 接下来看看 canvas.Text。</description></item><item><title>02. 文本 Text</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/02-text/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/02-text/</guid><description>文本 Text # canvas.Text 用于 Fyne 内的所有文本渲染。它通过指定文本和文本颜色来创建。文本使用当前主题指定的默认字体渲染。
文本对象允许某些配置，如 Alignment 和 TextStyle 字段，如此示例中所示。如果你想使用等宽字体，可以指定 fyne.TextStyle{Monospace: true}。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;文本&amp;#34;) text := canvas.NewText(&amp;#34;文本对象&amp;#34;, color.White) text.Alignment = fyne.TextAlignTrailing text.TextStyle = fyne.TextStyle{Italic: true} w.SetContent(text) w.ShowAndRun() } 通过指定 FYNE_FONT 环境变量，可以使用另一种字体。使用这个来设置一个 .ttf 文件，代替 Fyne 工具包或当前主题提供的字体。</description></item><item><title>03. 线条 Line</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/03-line/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/03-line/</guid><description>线条 Line # canvas.Line 对象从 Position1（默认是左上角）画到 Position2（默认是右下角）。你可以指定它的颜色，并且可以改变笔触宽度，否则默认为 1。
线的位置可以使用 Position1 或 Position2 字段，或者使用 Move() 和 Resize() 函数来操作。例如，宽度为 0 的区域会显示为垂直线，而高度为 0 则会是水平线。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;线条&amp;#34;) line := canvas.NewLine(color.White) line.StrokeWidth = 5 w.SetContent(line) w.Resize(fyne.NewSize(100, 100)) w.ShowAndRun() } 线条通常用于自定义布局或手动控制。与文本不同，它们没有自然（最小）大小，但可以在复杂布局中产生出色的效果。</description></item><item><title>04. 圆 Circle</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/04-circle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/04-circle/</guid><description>圆 Circle # canvas.Circle 定义了一个由指定颜色填充的圆形。您还可以设置 StrokeWidth，因此显示不同的 StrokeColor，如此示例中所示。
圆形将填充通过调用 Resize() 或由其控制的布局指定的空间。由于示例将圆形设置为窗口内容，它将调整大小以填充窗口，存在基本的内边距（由主题控制）。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;圆形&amp;#34;) circle := canvas.NewCircle(color.White) circle.StrokeColor = color.Gray{Y: 0x99} circle.StrokeWidth = 5 w.SetContent(circle) w.Resize(fyne.NewSize(100, 100)) w.ShowAndRun() } 所有这些都是基本类型，可以由我们的驱动程序渲染，无需额外信息。接下来，我们将看看更复杂的类型，从 Image 开始。</description></item><item><title>05. 图片 Image</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/05-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/05-image/</guid><description>图片 Image # canvas.Image 在 Fyne 中代表一个可缩放的图像资源。它可以从资源（如示例所示）、图像文件、包含图像的 URI 位置、io.Reader 或内存中的 Go image.Image 加载。
默认的图像填充模式是 canvas.ImageFillStretch，它会导致图像填充指定的空间（通过 Resize() 或布局）。或者，你可以使用 canvas.ImageFillContain 以确保保持纵横比并且图像在边界内。此外，你可以使用 canvas.ImageFillOriginal（如此示例中所用），以确保它也具有等于原始图像大小的最小尺寸。
package main import ( &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/theme&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;图像&amp;#34;) image := canvas.NewImageFromResource(theme.FyneLogo()) // image := canvas.NewImageFromURI(uri) // image := canvas.NewImageFromImage(src) // image := canvas.NewImageFromReader(reader, name) // image := canvas.NewImageFromFile(fileName) image.FillMode = canvas.ImageFillOriginal w.SetContent(image) w.ShowAndRun() } 图像可以是基于位图的（如 PNG 和 JPEG）或基于矢量的（如 SVG）。我们建议尽可能使用可缩放图像，因为它们在大小变化时继续渲染良好。在使用原始图像大小时要小心，因为它们可能不会完全按预期与不同的用户界面比例一致。由于 Fyne 允许整个用户界面缩放，一个 25px 的图像文件可能与一个 25 高度的 fyne 对象不同。</description></item><item><title>06. 矢量 Raster</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/06-raster/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/06-raster/</guid><description>矢量 Raster # canvas.Raster 类似于图像，但在屏幕上为每个像素精确绘制一个点。这意味着，随着用户界面缩放或图像调整大小，将请求更多像素来填充空间。为此，我们使用一个 Generator 函数，如此示例所示——它将用于返回每个像素的颜色。
生成器函数可以基于像素（如此示例中我们为每个像素生成一个新的随机颜色）或基于完整图像。生成完整图像（使用 canvas.NewRaster()）更高效，但有时直接控制像素更方便。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;Raster&amp;#34;) raster := canvas.NewRasterWithPixels( func(_, _, w, h int) color.Color { return color.RGBA{R: uint8(rand.Intn(255)), G: uint8(rand.Intn(255)), B: uint8(rand.Intn(255)), A: 0xff} }) // raster := canvas.NewRasterFromImage() w.SetContent(raster) w.Resize(fyne.NewSize(120, 100)) w.ShowAndRun() } 如果您的像素数据存储在图像中，您可以通过 NewRasterFromImage() 函数加载它，该函数将加载图像以在屏幕上精确显示像素。</description></item><item><title>07. 渐变 Gradient</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/07-gradient/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/07-gradient/</guid><description> 渐变 Gradient # 最后一个画布原始类型是 Gradient，可用作 canvas.LinearGradient 和 canvas.RadialGradient，用于绘制从一种颜色到另一种颜色的渐变，有多种模式。你可以使用 NewHorizontalGradient()、NewVerticalGradient() 或 NewRadialGradient() 创建渐变。
要创建一个渐变，你需要一个起始颜色和结束颜色——画布会计算其中的每一个颜色。在这个示例中，我们使用 color.Transparent 来展示如何使用渐变（或任何其他类型）通过透明度值在背后的内容上实现半透明效果。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; ) func main() { myApp := app.New() w := myApp.NewWindow(&amp;#34;渐变&amp;#34;) gradient := canvas.NewHorizontalGradient(color.White, color.Transparent) //gradient := canvas.NewRadialGradient(color.White, color.Transparent) w.SetContent(gradient) w.Resize(fyne.NewSize(100, 100)) w.ShowAndRun() }</description></item><item><title>08. 动画 Animation</title><link>https://www.poloxue.com/gofyne/docs/03-canvas/08-animation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/gofyne/docs/03-canvas/08-animation/</guid><description>动画 Animation # Fyne 包含一个动画框架，允许您在一段时间内平滑地过渡画布属性从一个值到另一个值。动画可以包含任何代码，这意味着可以管理任何类型的对象属性，但是内置了尺寸、位置和颜色的动画。
动画通常使用画布包的内置助手创建，例如 NewSizeAnimation，并在创建的动画上调用 Start()。您可以设置动画以重复或自动反转，如下所示。
首先让我们看看逐渐改变 Rectangle 填充颜色的颜色动画。在以下代码示例中，我们将矩形设置为窗口的内容，如之前的代码示例所做的那样。最大的不同是我们在显示窗口之前启动的动画。使用 NewColorRGBAAnimation 创建动画，它将在指定的 red 状态到 blue 状态之间过渡颜色通道，并将在指定的持续时间（2秒）内完成。
package main import ( &amp;#34;image/color&amp;#34; &amp;#34;time&amp;#34; &amp;#34;fyne.io/fyne/v2&amp;#34; &amp;#34;fyne.io/fyne/v2/app&amp;#34; &amp;#34;fyne.io/fyne/v2/canvas&amp;#34; &amp;#34;fyne.io/fyne/v2/container&amp;#34; ) func main() { a := app.New() w := a.NewWindow(&amp;#34;Hello&amp;#34;) obj := canvas.NewRectangle(color.Black) obj.Resize(fyne.NewSize(50, 50)) w.SetContent(container.NewWithoutLayout(obj)) red := color.NRGBA{R:0xff, A:0xff} blue := color.NRGBA{B:0xff, A:0xff} canvas.NewColorRGBAAnimation(red, blue, time.Second*2, func(c color.Color) { obj.FillColor = c canvas.Refresh(obj) }).Start() w.Resize(fyne.NewSize(250, 50)) w.SetPadded(false) w.ShowAndRun() } 也可以同时对多个属性进行动画处理。如果您仔细观察，您会看到我们将矩形添加到了没有布局的容器中——这意味着我们可以手动移动或调整对象的大小。让我们添加一个新的位置动画，它将在窗口中移动 Rectangle，并自动反转。</description></item></channel></rss>