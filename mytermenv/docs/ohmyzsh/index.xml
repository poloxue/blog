<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>oh-my-zsh on 我的终端环境</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/</link><description>Recent content in oh-my-zsh on 我的终端环境</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/mytermenv/docs/ohmyzsh/index.xml" rel="self" type="application/rss+xml"/><item><title>安装与主题</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/install/</guid><description>安装与主题 # 本节介绍 ohmyzsh 的安装与主题。
安装 # oh-my-zsh 的安装很简单。安装命令，如下所示：
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; 安装后，就已经有一些默认效果，如命令行提示符的主题变化。
这是默认的 oh-my-zsh 主题 &amp;ldquo;robbyrussell&amp;rdquo;。
主题 # oh-my-zsh 提供了许多内置主题，可查看 themes 获取一系列的主题。
我们可直接通过 ~/.zshrc 配置更新主题配置，将内容修改如下：
ZSH_THEME=&amp;#34;agnoster&amp;#34;` # 默认为 robbyrussell 执行 source ~/.zshrc 生效配置，就能看到主题效果。
另外，oh-my-zsh 还提供了 random 主题，它会在 oh-my-zsh 内置主题中随机选择一个主题展示。只需编辑 ~/.zshrc，将 ZSH_THEME 更新为 random 即可。
配置如下所示：
ZSH_THEME=&amp;#34;random&amp;#34; 演示效果，如下所示：
说实话，我觉得没人会这么用吧。这明显很鸡肋的功能啊。</description></item><item><title>基础插件</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins/</guid><description>基础插件 # 重点来了，接下来我们一起来看看 zsh 的效率神器 - 插件能力吧。本问先给大家推荐 5 款常用的插件。ohmyzsh 提供的所有内置插件，都可以在仓库 ohmyzsh/ohmyzsh/plugins 中找到，每个插件都有相应的介绍文档。
本教程将要介绍的 5 个 oh-my-zsh 内置插件，如下所示：
git，Git 插件，其实就是提供一些常用的 git 命令别名。 web-search，命令行打开搜索引擎，已支持大部分搜索引擎； jsontools，用于格式化 json 数据； z，基于历史访问目录的快速跳转； vi-mode，使用 vi 模式编辑命令行； 启用所有插件，打开 zshrc 配置，把这些内置插件都打开，如下所示：
plugins=(git web-search jsontools z vi-mode) 插件 1 - git # Git 插件提供了 git 命令的大量别名，查看 git 插件文档。
如下一些常用命令的别名：
git clone -&amp;gt; gcl git status -&amp;gt; gst git commit -&amp;gt; gc git add -&amp;gt; ga git add --all -&amp;gt; gaa git diff -&amp;gt; gd git push -&amp;gt; gp git pull -&amp;gt; gl 更多命令的映射关键关系，可自行查看它的 文档。</description></item><item><title>基础插件 2</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins2/</guid><description>本文是基础篇插件的第二篇，继续介绍 4 个常用的 zsh 插件。我将涉及的插件，如下所示：
name description copypath 拷贝路径到剪贴版； copyfile 拷贝文件内容到剪贴板； copybuffer 拷贝命令行内容到剪贴板； sudo 命令行开头快速添加 sudo； 让我们正式开始。
推荐插件 # 先说 oh-my-zsh 的内置插件。
打开 zsh 配置文件 ~/.zshrc，将要使用的 oh-my-zsh 的内置插件提前配置。
plugins=(... copypath copyfile copybuffer sudo ...) 保存退出，执行 source ~/.zshrc 生效。
copypath # copypath 的用途如其名，就是用来 copy 路径的。
支持两种用法。
copypath: 无参数，直接拷贝当前路径；
copypath &amp;lt;文件或目录&amp;gt;：拷贝指定文件或目录的绝对路径；
相比于 pwd 之后再拷贝，这种方式真的是省心省力的方式。
copyfile # copyfile，用于拷贝文件内容，命令格式 copyfile &amp;lt;文件路径&amp;gt;。
假设，现有一个文件 test.txt。
cat test.txt Hello oh my zsh 一个测试命令，copyfile test.txt，即可将 test.txt 文件中的内容拷贝到剪贴板中。
效果如下：</description></item><item><title>高级插件</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/advancedplugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/advancedplugins/</guid><description>高级插件 # 我们再来了解 4 个非 oh-my-zsh 内置插件，它们 zsh-syntax-highlighting、zsh-autosuggestions、zsh-substring-history-search 和 you-should-use。这两个插件由 zsh 社区开发。
开始介绍前，先将这两个插件全部安装配置完成。
下载 # 下载命令如下所示：
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search git clone https://github.com/MichaelAquilina/zsh-you-should-use.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/you-should-use 配置 # 打开 .zshrc 完成配置：
plugins=(..., zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search you-should-use)) 记得执行 source ~/.zshrc 生效配置。
插件 1：zsh-syntax-highlighting # zsh-syntax-highlighting 是 zsh 的语法高亮插件，如果输入的命令不存在，或者输入 shell 语法不正确，将会自动以红色表示。它的优点就是，当我们在终端输入，实时输入实时反馈。
首先，我们尝试下错误命令，提示效果，如下所示：
再来看看，正确命令提示效果，如下所示：
对，就是这么简单。通过这个插件提供的实时反馈，可以防止我们在命令执行后，才知道输入错了。
插件 2：zsh-autosuggestions # zsh-autosuggestions 可以说是我最喜欢的插件了。
它的作用是什么呢？
它可用于提示补全建议，当输入字符，默认情况下，它基于我们的历史命令自动提供输入建议。还记得前面提到的，zsh 的历史命令是在不同的会话间共享。现在，再结合 zsh-autosuggestions 插件，简直不要太爽。哈哈。
我们先看下效果，如下所示：</description></item><item><title>自定义提示主题</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/powerlevel10k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/powerlevel10k/</guid><description>自定义提示主题 # 不知道你是否想过自定义 Shell 提示符主题能带来的不仅是终端美观度的提升，还能通过视觉优化增强了工作效率呢？
在众多 shell 提示符主题中，Powerlevel10k 因为支持高度可定制和丰富的功能选，非常值得推荐。本文基于这个主题介绍 zsh 主题插件 powerlevel10k，包括它的安装和配置自定义。
什么是 powerlevel10k? # Powerlevel10 是一款 zsh 的主题，强调性能、灵活性和开箱即用，但同时自定义能力极强。前面介绍 zsh 轻量级框架 oh-my-zsh 时，提到过一些 zsh 主题，而通过 p10k（powerlevel10k 的简称）的自定义配置化能力，同样能配置出覆盖出之前主题的类似效果，当然相对而言，也更加强大。
效果展示：
安装依赖字体 # 在安装 powerlevel10k 前，要先安装它依赖的字体： NerdFont。不同系统下的安装方法，查看 它的文档。
简单说下 Nerd Fonts 字体。它是一系列开源字体的集合，被特别增强，它包含大量的图标和符号，如开发工具、编程语言和版本控制系统的图标。这些字体对于提高我们终端和编辑器的视觉体验和功能性有着极大帮助。
有了它，我们的终端才能显示一些复杂字体甚至是图标。
MacOS 的话，可直接通过 Homebrew 快速安装：
brew tap homebrew/cask-fonts brew install font-hack-nerd-font 安装完成，配置终端字体，进入 iTerm2 Settings -&amp;gt; Profiles -&amp;gt; Text -&amp;gt; Font -&amp;gt; MesloLGS NF 即可。
现在，我们终端就支持 NerdFont 字体了。
如何测试？
接下来安装 Powerlevel10k 时，它会提示我们检查字体是否正确安装。</description></item></channel></rss>