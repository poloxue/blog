<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>高效终端 on 我的终端环境</title><link>https://www.poloxue.com/mytermenv/</link><description>Recent content in 高效终端 on 我的终端环境</description><generator>Hugo</generator><language>zh-cn</language><atom:link href="https://www.poloxue.com/mytermenv/index.xml" rel="self" type="application/rss+xml"/><item><title>entr - 实现语言无关热重启</title><link>https://www.poloxue.com/mytermenv/docs/commands/dev/entr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/dev/entr/</guid><description>&lt;h1 id="entr---实现语言无关热重启"&gt;entr - 实现语言无关热重启&lt;a class="anchor" href="#entr---%e5%ae%9e%e7%8e%b0%e8%af%ad%e8%a8%80%e6%97%a0%e5%85%b3%e7%83%ad%e9%87%8d%e5%90%af"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;hi&lt;/p&gt;
&lt;p&gt;在开发类似于 web 或其他常驻服务时，我们在修改代码后，要手动重启才能更新服务。如果你不是这种情况，或许框架默认支持热重启或是你集成了其他工具。&lt;/p&gt;
&lt;p&gt;本文将介绍一款工具，它能轻松实现简单的热重启，它具有语言和框架无关性，是一个通用小工具，它就是 &lt;a href="https://github.com/eradman/entr"&gt;entry&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;特别说明，这个工具主要是用在开发调试阶段，不支持复杂的热重启能力。&lt;/p&gt;
&lt;h2 id="什么-entry"&gt;什么 entry&lt;a class="anchor" href="#%e4%bb%80%e4%b9%88-entry"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;简单来说，它是一个可监听文件状态变化并执行特定动作的命令。让我们直接通过演示观察它的行为。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ls text.txt | entr echo &lt;span style="color:#e6db74"&gt;&amp;#34;file changed&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-11/2023-11-02-high-productivity-shell-commands-part3-01.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;我们通过 &lt;code&gt;ls text.txt&lt;/code&gt; 告诉 entry 监听的文件。当编辑并保存文件后，它通过指定命令 echo 打印提示 &lt;code&gt;file changed&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们只要对它稍做修改，就可以实现在监听到文件变化后，自动执行 &lt;code&gt;停止服务 -&amp;gt; 重新编译 -&amp;gt; 启动服务&lt;/code&gt; 等一系列动作。&lt;/p&gt;
&lt;h2 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# mac 安装命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install entr&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="实现热重启"&gt;实现热重启&lt;a class="anchor" href="#%e5%ae%9e%e7%8e%b0%e7%83%ad%e9%87%8d%e5%90%af"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，开发一个简单 Go server 服务，文件是 &lt;code&gt;main.go&lt;/code&gt;，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#e6db74"&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;HandleFunc&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;w&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ResponseWriter&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;req&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Request&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;w&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Write&lt;/span&gt;([]byte(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Server is listening on :3000&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ListenAndServe&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;:3000&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;为这个服务加上热重启能力，命令如下：&lt;/p&gt;</description></item><item><title>exa</title><link>https://www.poloxue.com/mytermenv/docs/commands/filesystem/exa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/filesystem/exa/</guid><description>&lt;h1 id="exa"&gt;exa&lt;a class="anchor" href="#exa"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;首先是 exa，一款可用于替换系统默认 ls 的命令，在平时工作中 ls 几乎使用最多的命令，而 exa 在支持 ls 的基本能力基础上，提供了更丰富的特性。&lt;/p&gt;
&lt;h2 id="快速安装"&gt;快速安装&lt;a class="anchor" href="#%e5%bf%ab%e9%80%9f%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install exa &lt;span style="color:#75715e"&gt;# 其他系统请查看 GithHub README.md&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="默认配色"&gt;默认配色&lt;a class="anchor" href="#%e9%bb%98%e8%ae%a4%e9%85%8d%e8%89%b2"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，exa 默认提供了配色效果，无需 ls 要追加 &lt;code&gt;--color&lt;/code&gt; 参数，省去了 alias 别名的设置。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-28-high-productivity-shell-commands-part1-01.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="显示图标"&gt;显示图标&lt;a class="anchor" href="#%e6%98%be%e7%a4%ba%e5%9b%be%e6%a0%87"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;其次，exa 支持显示文件图片，通过指明 &lt;code&gt;--icons&lt;/code&gt; 实现，显示文件类型图标；&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-28-high-productivity-shell-commands-part1-02.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="详情与-git"&gt;详情与 GIT&lt;a class="anchor" href="#%e8%af%a6%e6%83%85%e4%b8%8e-git"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;更复杂的命令，支持 ls -l 显示文件列表详情，添加头部说明 header，如果是 git 仓库，可显示文件的 Git 信息。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-28-high-productivity-shell-commands-part1-03.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="目录树-tree"&gt;目录树 Tree&lt;a class="anchor" href="#%e7%9b%ae%e5%bd%95%e6%a0%91-tree"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果想显示文件数，也不需要单独安装 tree 命令，如下 exa --tree --icons，显示文件树；&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-28-high-productivity-shell-commands-part1-04.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="别名"&gt;别名&lt;a class="anchor" href="#%e5%88%ab%e5%90%8d"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果你钟爱 exa 的这些能力，可通过别名将默认 ls 和 tree 命令替换为 exa。&lt;/p&gt;
&lt;p&gt;如下是一些常见的别名设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 默认显示 icons： &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;alias ls&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exa --icons&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 显示文件目录详情&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;alias ll&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exa --icons --long --header&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 显示全部文件目录，包括隐藏文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;alias la&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exa --icons --long --header --all&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 显示详情的同时，附带 git 状态信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;alias lg&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exa --icons --long --header --all --git&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 替换 tree 命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;alias tree&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exa --tree --icons&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如此一来，就将 exa 设置为系统默认 ls。&lt;/p&gt;</description></item><item><title>安装与主题</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/install/</guid><description>&lt;h1 id="安装与主题"&gt;安装与主题&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e4%b8%8e%e4%b8%bb%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节介绍 ohmyzsh 的安装与主题。&lt;/p&gt;
&lt;h2 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;oh-my-zsh 的安装很简单。安装命令，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sh -c &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装后，就已经有一些默认效果，如命令行提示符的主题变化。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-01.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;这是默认的 oh-my-zsh 主题 &amp;ldquo;robbyrussell&amp;rdquo;。&lt;/p&gt;
&lt;h2 id="主题"&gt;主题&lt;a class="anchor" href="#%e4%b8%bb%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;oh-my-zsh 提供了许多内置主题，可查看 &lt;a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes"&gt;themes&lt;/a&gt; 获取一系列的主题。&lt;/p&gt;
&lt;p&gt;我们可直接通过 ~/.zshrc 配置更新主题配置，将内容修改如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ZSH_THEME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;agnoster&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt; &lt;span style="color:#75715e"&gt;# 默认为 robbyrussell&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 生效配置，就能看到主题效果。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-02.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;另外，oh-my-zsh 还提供了 random 主题，它会在 oh-my-zsh 内置主题中随机选择一个主题展示。只需编辑 &lt;code&gt;~/.zshrc&lt;/code&gt;，将 ZSH_THEME 更新为 random 即可。&lt;/p&gt;
&lt;p&gt;配置如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ZSH_THEME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;random&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;演示效果，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-03.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;说实话，我觉得没人会这么用吧。这明显很鸡肋的功能啊。&lt;/p&gt;</description></item><item><title>简要介绍</title><link>https://www.poloxue.com/mytermenv/docs/terminal/hello/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/terminal/hello/</guid><description>&lt;h1 id="简要介绍"&gt;简要介绍&lt;a class="anchor" href="#%e7%ae%80%e8%a6%81%e4%bb%8b%e7%bb%8d"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;iTerm2 是一款终端软件，它是 macOS 下默认终端 Terminal 的替代品。每次拿到新电脑，或者因某种原因重装系统，我首先要做的就是下载 iTerm2 来替换默认的终端 terminal。&lt;/p&gt;
&lt;h2 id="iterm2-vs-默认-terminal"&gt;iTerm2 vs 默认 Terminal&lt;a class="anchor" href="#iterm2-vs-%e9%bb%98%e8%ae%a4-terminal"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;为什么要用 iTerm2 替换默认终端？相较于 Terminal，iTerm2 的几点优势：&lt;/p&gt;
&lt;p&gt;首先，它美观大方，相对于默认终端，它支持真彩。且它的功能上更加丰富，如灵活地分屏、主题配置；搜索功能，支持的搜索规则丰富；快捷键，快捷键的定制性更强；支持静态图片和 GIF 的展示；编程控制，支持如 python 编程控制，可实现自动背景，布局管理等。&lt;/p&gt;</description></item><item><title>fd - 更易用的文件查找命令</title><link>https://www.poloxue.com/mytermenv/docs/commands/search/fd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/search/fd/</guid><description>&lt;h1 id="fd"&gt;&lt;a href="https://github.com/sharkdp/fd"&gt;fd&lt;/a&gt;&lt;a class="anchor" href="#fd"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/sharkdp/fd"&gt;fd&lt;/a&gt; 是一款文件查找命令，可替换系统默认 find，它的体验更友好，且查询效率极高。我们在使用传统的 find 时，要经常查手册看帮助文档，但使用 fd，它的默认行为就能满足我们大部分的需求。&lt;/p&gt;
&lt;p&gt;如何使用呢？&lt;/p&gt;
&lt;h2 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install fd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="递归"&gt;递归&lt;a class="anchor" href="#%e9%80%92%e5%bd%92"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;文件系统下搜索文件名，最常见的场景是递归搜索文件名包含 pattern 的文件，不知道有你是否能立刻想起来 find 如何写呢？&lt;/p&gt;
&lt;p&gt;示例：遍历查找。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ fd pattern&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-01.gif" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="正则"&gt;正则&lt;a class="anchor" href="#%e6%ad%a3%e5%88%99"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如果要正则查询，pattern 默认即支持正则表达式。&lt;/p&gt;
&lt;p&gt;查找文件名包含日期的文件：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-02.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;或者查找所有的 go 代码文件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-03.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;这个表达式更加正确的表述是 fd &lt;code&gt;.*\.go$&lt;/code&gt;，查出所有以 &lt;code&gt;.go&lt;/code&gt; 结尾的文件。&lt;/p&gt;
&lt;h2 id="通配符"&gt;通配符&lt;a class="anchor" href="#%e9%80%9a%e9%85%8d%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;fd 同样是支持统配符的，通过 &lt;code&gt;-g&lt;/code&gt; 选项指定通配符。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-04.gif" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="文件类型"&gt;文件类型&lt;a class="anchor" href="#%e6%96%87%e4%bb%b6%e7%b1%bb%e5%9e%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;前面的查找 go 文件，其实也是查找类型是 Go 源码。但正则和通配符，都比较繁琐，可直接通过 &lt;code&gt;fd -e go pattern&lt;/code&gt; 的模式直接寻找指定扩展的文件。&lt;/p&gt;
&lt;p&gt;示例：查找 python 源码文件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-05.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;如果无需 patern，则表明查找所有的 &lt;code&gt;.py&lt;/code&gt; 的文件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-07.gif" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="隐藏文件和-gitinogre"&gt;隐藏文件和 &lt;code&gt;.gitinogre&lt;/code&gt;&lt;a class="anchor" href="#%e9%9a%90%e8%97%8f%e6%96%87%e4%bb%b6%e5%92%8c-gitinogre"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;fd 搜索效率高的一个原因是它默认不查找隐藏文件和 &lt;code&gt;gitignore&lt;/code&gt; 文件。&lt;/p&gt;</description></item><item><title>HTTPie - 人性化 HTTP 客户端</title><link>https://www.poloxue.com/mytermenv/docs/commands/dev/httpie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/dev/httpie/</guid><description>&lt;h1 id="人性化-http-client-命令---httpie"&gt;人性化 HTTP Client 命令 - httpie&lt;a class="anchor" href="#%e4%ba%ba%e6%80%a7%e5%8c%96-http-client-%e5%91%bd%e4%bb%a4---httpie"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;作为程序员，如果你要快速调试 HTTP 接口，首先想到的工具是什么？GUI 版 HTTP 客户端 Postman？命令行 curl？还是使用浏览器？不知道你是否抱怨过，如 curl 的很多传统命令基本都存在一个问题：虽然功能强大，但用户体验极差，基本不考虑使用者的感受。&lt;/p&gt;
&lt;p&gt;本文介绍一款意外丢失 54k star，不到两年重获 34k 的 HTTP 客户端命令 - &lt;a href="https://github.com/httpie/cli/"&gt;HTTPie&lt;/a&gt; ，它比 curl 更易于使用，是一款注重用户体验的 HTTP 客户端命令。&lt;/p&gt;
&lt;h2 id="一个趣事"&gt;一个趣事&lt;a class="anchor" href="#%e4%b8%80%e4%b8%aa%e8%b6%a3%e4%ba%8b"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先说关于 HTTPie 的 star 数的一个趣事：&lt;/p&gt;
&lt;p&gt;2022 年，由于 HTTPie 的作者出现了一次误操作，将仓位设为私有，导致 HTTPie 的 star 直接清零。经历了两年时间，如今重新恢复到 36k star。&lt;/p&gt;
&lt;p&gt;当时，HTTPie 官方还写了一篇博客，专门反思了这次的事故，查看博客：&lt;a href="https://httpie.io/blog/stardust"&gt;How We Lost 54k stars&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="为什么推荐-httpie"&gt;为什么推荐 HTTPie&lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e6%8e%a8%e8%8d%90-httpie"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;HTTPie 的哲学是使 API 测试和调试变得直观友好，相比传统命令行工具（如 curl 和 wget），它提供了更丰富的功能和更易读的输出。&lt;/p&gt;
&lt;p&gt;来自官方的示例：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2024-04/2024-04-10-httpie-02.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;首先是，它的命令行语法直观易懂，如发送 GET 请求只需 &lt;code&gt;http GET &amp;lt;URL&amp;gt;&lt;/code&gt;，而 POST 请求则是 &lt;code&gt;http POST &amp;lt;URL&amp;gt; &amp;lt;body&amp;gt;&lt;/code&gt;，这比 curl 的命令行参数更易于理解和记忆。&lt;/p&gt;</description></item><item><title>ripgrep - 更高效的文件搜索</title><link>https://www.poloxue.com/mytermenv/docs/commands/search/ripgrep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/search/ripgrep/</guid><description>&lt;h1 id="ripgrep"&gt;ripgrep&lt;a class="anchor" href="#ripgrep"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/BurntSushi/ripgrep"&gt;ripgrep&lt;/a&gt; 是一款文本搜索命令，功能与 grep 类似。和 fd 之于 find 一样，ripgrep 在体验和性能上同样完胜 grep。&lt;/p&gt;
&lt;h2 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install ripgrep&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="递归"&gt;递归&lt;a class="anchor" href="#%e9%80%92%e5%bd%92"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ripgrep 的默认行为也是递归搜索，命令为 rg pattern，且默认高亮显示，与 &lt;code&gt;grep --color main . -nR&lt;/code&gt; 对比，明显更加简洁易用，体验更好。&lt;/p&gt;
&lt;p&gt;示例效果：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-09.gif" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="指定目录"&gt;指定目录&lt;a class="anchor" href="#%e6%8c%87%e5%ae%9a%e7%9b%ae%e5%bd%95"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ripgrep 最后的参数即可指定搜索的目录。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rg main ~/Code/golang-examples/&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-10.gif" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="指定文件"&gt;指定文件&lt;a class="anchor" href="#%e6%8c%87%e5%ae%9a%e6%96%87%e4%bb%b6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;搜索指定文件与指定目录类似，命令的最后一个参数指定即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rg main ~/Code/golang-examples/main.go&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-11.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="通配符"&gt;通配符&lt;a class="anchor" href="#%e9%80%9a%e9%85%8d%e7%ac%a6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们使用 &lt;code&gt;-g&lt;/code&gt; 通过通配符指定搜索路径。&lt;/p&gt;
&lt;p&gt;如下是禁用目录递归：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rg main -g &lt;span style="color:#e6db74"&gt;&amp;#39;!/*/*&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可实现如排除指定的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rg main -g &lt;span style="color:#e6db74"&gt;&amp;#39;!main.go&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者排除指定的目录&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rg -g &lt;span style="color:#e6db74"&gt;&amp;#39;!directory&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="正则"&gt;正则&lt;a class="anchor" href="#%e6%ad%a3%e5%88%99"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ripgrep 支持通过 &lt;code&gt;-e&lt;/code&gt; 选项启用正则表达式搜索，如搜索文件中的指定日期格式内容。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rg -e &lt;span style="color:#e6db74"&gt;&amp;#39;[0-9]{2}:[0-9]{2}&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="默认过滤"&gt;默认过滤&lt;a class="anchor" href="#%e9%bb%98%e8%ae%a4%e8%bf%87%e6%bb%a4"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;和 fd 一样，ripgrep 的高效率搜索能力一方面也是因为默认忽略了一些文件，如它忽略隐藏文件以及 .gitgnore .ignore .rgignore 中的文件。禁用 ignore 可通过选项 &amp;ndash;no-ignore 即可。&lt;/p&gt;</description></item><item><title>zoxide</title><link>https://www.poloxue.com/mytermenv/docs/commands/filesystem/zoxide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/filesystem/zoxide/</guid><description>&lt;h1 id="zoxide"&gt;zoxide&lt;a class="anchor" href="#zoxide"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;在正式介绍 &lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt; 前，尝试提前问自己一个问题，Linux 默认命令 cd 好不好用？我的答案是，相当难用，无论多么丝滑的操作，一旦遇到 cd，只能说一句 f**k。&lt;/p&gt;
&lt;p&gt;你是不是经常这样使用 cd 呢？&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cd ../
cd ../
cd ../
cd ../../../
cd x/
cd y/
cd z/&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不想被 cd 折磨的话，我强烈推荐这个工具：&lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ajeetdsouza/zoxide"&gt;zoxide&lt;/a&gt; 是一款受到 z 和 autojump 启发而来的命令，它会记录访问过的目录，通过搜索找到最匹配你目标的目标。从而实现以 &lt;strong&gt;最最最最&lt;/strong&gt; 少按键就能实现目录跳转。&lt;/p&gt;
&lt;p&gt;一般情况下，我们关注的目录就那几个，90% 的情况用它的快速跳转能力即可，而一些特殊情况，cd 绝对路径即可，亦或者是使用它提供的另一种方式，交互式搜索。&lt;/p&gt;
&lt;p&gt;前面我写过一篇文章 介绍了 oh-my-zsh 提供的 z 插件，zoxide 与 z 相比更易于使用。这有一份对比报告：&lt;a href="https://www.libhunt.com/compare-zsh-z-vs-zoxide"&gt;zoxide vs zsh-z&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;具体介绍它的安装使用吧。&lt;/p&gt;
&lt;h3 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install zoxide &lt;span style="color:#75715e"&gt;# 其他系统请查看 GithHub README.md&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="配置"&gt;配置&lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 zsh 中使用 zoxide 要简单配置下，一行命令将 zoxide 初始化命令追加到 &lt;code&gt;~/.zshrc&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#39;eval &amp;#34;$(zoxide init zsh --cmd z)&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生效后，即可通过 z 命令使用 zoxide 的能力。&lt;/p&gt;</description></item><item><title>为什么选择 zsh ？</title><link>https://www.poloxue.com/mytermenv/docs/zsh/why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/zsh/why/</guid><description>&lt;h1 id="为什么选择-zsh-"&gt;为什么选择 zsh ？&lt;a class="anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%80%89%e6%8b%a9-zsh-"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;开始前，先问为什么，知其然，要知其所以然，是个好习惯。所以，为什么要用 zsh 呢？&lt;/p&gt;
&lt;p&gt;大家最熟悉的 shell 解释器，肯定是 bash。zsh（Z Sehll）相对于 bash（Bourne Again Shell）相对有哪些优势呢？&lt;/p&gt;
&lt;h3 id="改进的自动补全能力"&gt;改进的自动补全能力&lt;a class="anchor" href="#%e6%94%b9%e8%bf%9b%e7%9a%84%e8%87%aa%e5%8a%a8%e8%a1%a5%e5%85%a8%e8%83%bd%e5%8a%9b"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;zsh 提供了更强大、更灵活的自动补全功能。它不但可以自动补全命令，设置选项、参数甚至文件名，都可自动补全。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-18.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;对于命令参数，zsh 甚至可以显示简短的帮助信息，这使得探索新命令变得更加容易。&lt;/p&gt;
&lt;h3 id="更好的脚本和插件支持"&gt;更好的脚本和插件支持&lt;a class="anchor" href="#%e6%9b%b4%e5%a5%bd%e7%9a%84%e8%84%9a%e6%9c%ac%e5%92%8c%e6%8f%92%e4%bb%b6%e6%94%af%e6%8c%81"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;zsh 有一个强大的社区，提供了大量的插件和主题，如 oh-my-zsh 这个流行的 zsh 框架，允许我们轻松添加、更新插件和主题。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-21.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;这些插件可以增强 shell 的功能，提供便捷的别名、函数以及其他有用的特性。&lt;/p&gt;
&lt;h3 id="高级的主题和提示符定制"&gt;高级的主题和提示符定制&lt;a class="anchor" href="#%e9%ab%98%e7%ba%a7%e7%9a%84%e4%b8%bb%e9%a2%98%e5%92%8c%e6%8f%90%e7%a4%ba%e7%ac%a6%e5%ae%9a%e5%88%b6"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;zsh 还允许用户对命令行提示符进行高度定制，包括颜色、内容和格式。用户可以非常容易地调整提示符来显示 git 分支、Python 虚拟环境等信息。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-19.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;我们会在后续介绍一款非常强大的 zsh 插件，名为 powerlevel10k，它支持完全的主题自定义特性，非常强大。&lt;/p&gt;
&lt;h3 id="更智能的命令行交互"&gt;更智能的命令行交互&lt;a class="anchor" href="#%e6%9b%b4%e6%99%ba%e8%83%bd%e7%9a%84%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%ba%a4%e4%ba%92"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;zsh 还支持 bash 不具备的一些智能特性，如拼写校正和近似完成。如果用户输入的命令有拼写错误，zsh 可以建议正确的命令。&lt;/p&gt;
&lt;p&gt;如我输入 lls，会提示我 &amp;ldquo;zsh: correct &amp;rsquo;lls&amp;rsquo; to &amp;rsquo;ls&amp;rsquo; [nyae]?&amp;rdquo;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;❯ lls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;zsh: correct &lt;span style="color:#e6db74"&gt;&amp;#39;lls&amp;#39;&lt;/span&gt; to &lt;span style="color:#e6db74"&gt;&amp;#39;ls&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;nyae&lt;span style="color:#f92672"&gt;]&lt;/span&gt;?&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入 y 接受纠正建议。&lt;/p&gt;
&lt;p&gt;当然这个是要做个简单的配置，通过 &lt;code&gt;setopt CORRECT_ALL&lt;/code&gt; 启用。&lt;/p&gt;</description></item><item><title>基础插件</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins/</guid><description>&lt;h1 id="基础插件"&gt;基础插件&lt;a class="anchor" href="#%e5%9f%ba%e7%a1%80%e6%8f%92%e4%bb%b6"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;重点来了，接下来我们一起来看看 zsh 的效率神器 - 插件能力吧。本问先给大家推荐 5 款常用的插件。ohmyzsh 提供的所有内置插件，都可以在仓库 &lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins"&gt;ohmyzsh/ohmyzsh/plugins&lt;/a&gt; 中找到，每个插件都有相应的介绍文档。&lt;/p&gt;
&lt;p&gt;本教程将要介绍的 5 个 oh-my-zsh 内置插件，如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git"&gt;git&lt;/a&gt;，Git 插件，其实就是提供一些常用的 git 命令别名。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/web-search"&gt;web-search&lt;/a&gt;，命令行打开搜索引擎，已支持大部分搜索引擎；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/jsontools"&gt;jsontools&lt;/a&gt;，用于格式化 json 数据；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/z"&gt;z&lt;/a&gt;，基于历史访问目录的快速跳转；&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vi-mode"&gt;vi-mode&lt;/a&gt;，使用 vi 模式编辑命令行；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启用所有插件，打开 &lt;code&gt;zshrc&lt;/code&gt; 配置，把这些内置插件都打开，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plugins&lt;span style="color:#f92672"&gt;=(&lt;/span&gt;git web-search jsontools z vi-mode&lt;span style="color:#f92672"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="插件-1---git"&gt;插件 1 - git&lt;a class="anchor" href="#%e6%8f%92%e4%bb%b6-1---git"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Git 插件提供了 git 命令的大量别名，查看&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/"&gt;git 插件文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如下一些常用命令的别名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone -&amp;gt; gcl
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git status -&amp;gt; gst
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git commit -&amp;gt; gc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git add -&amp;gt; ga
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git add --all -&amp;gt; gaa
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git diff -&amp;gt; gd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git push -&amp;gt; gp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git pull -&amp;gt; gl&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更多命令的映射关键关系，可自行查看它的&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git/"&gt;文档&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>安装与主题</title><link>https://www.poloxue.com/mytermenv/docs/terminal/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/terminal/install/</guid><description>&lt;h1 id="安装与主题"&gt;安装与主题&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e4%b8%8e%e4%b8%bb%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;本节介绍 iTerm2 安装与主题。&lt;/p&gt;
&lt;h2 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先是安装，可通过 &lt;a href="https://iterm2.com/"&gt;iTerm2 官网&lt;/a&gt; 下载或者 MacOS 中 &lt;code&gt;brew&lt;/code&gt; 安装，我将以 brew 安装为例。&lt;/p&gt;
&lt;p&gt;如果还未安装 brew，安装命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/bin/bash -c &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装 iterm2，命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install --cask iterm2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等待执行完成，即安装完毕。&lt;/p&gt;
&lt;h2 id="主题"&gt;主题&lt;a class="anchor" href="#%e4%b8%bb%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;iTerm2 支持自定义主题，即设置颜色面板 color preset。我将先以 material design colors 为例，介绍如何安装设置。&lt;/p&gt;
&lt;p&gt;它的安装命令，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -Ls https://raw.githubusercontent.com/MartinSeeler/iterm2-material-design/master/material-design-colors.itermcolors &amp;gt; /tmp/material-design-colors.itermcolors &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; open /tmp/material-design-colors.itermcolors&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果成功执行，将会在 iTerm2 的 Preferences （使用快捷键 CMD+, 可快捷打开）-&amp;gt; Color 下的 &amp;ldquo;Color Presets&amp;rdquo; 中新增一条颜色面板选项，即 &amp;ldquo;material-design-color&amp;rdquo;。选中确认即可将 iTerm2 默认的颜色面板修改为 &amp;ldquo;material-design-color&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;上面的命令分为两步：首先通过 &lt;code&gt;curl&lt;/code&gt; 下载配色文件，然后再通过 &lt;code&gt;open&lt;/code&gt; 打开下载即可直接安装。&lt;/p&gt;
&lt;p&gt;稍微麻烦一点做法是，可通过设置面板 import 导入下载的后缀为 itermcolors 的文件。&lt;/p&gt;
&lt;p&gt;如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-09/2023-09-25-install-iterm2-as-my-developing-environment-07-v1.png" alt="" /&gt;&lt;/p&gt;</description></item><item><title>快速安装</title><link>https://www.poloxue.com/mytermenv/docs/zsh/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/zsh/install/</guid><description>&lt;h2 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;对于不同系统，zsh 的安装命令，如下所示：&lt;/p&gt;
&lt;p&gt;Debian&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;apt install zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Centos&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;yum install -y zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Arch Linux&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pacman -S zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fedora&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dnf install zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 macOS 系统的用户，MacOS 的默认 shell 从 2019 开始以前替换为 zsh，该步骤可省略。可阅读：&lt;a href="https://linuxhandbook.com/why-zsh/#:~:text=Zsh%20is%20more%20powerful%20and,more%20advanced%20features%20shipped%20in."&gt;What is Zsh? Should You Use it?&lt;/a&gt; 其中有介绍为什么 2019 macOS 将默认的 shell 从 bash 切换到 zsh。&lt;/p&gt;
&lt;p&gt;我看下来，主要原因就是版权问题啦。&lt;/p&gt;
&lt;p&gt;如果你是个老古董，还是用 MacOS 2019 之前的系统，可通过如下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成后，将 zsh 设置为默认 shell，命令如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chsh -s /bin/zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过如下命令检查下是否成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo $SHELL
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description></item><item><title>bat</title><link>https://www.poloxue.com/mytermenv/docs/commands/filesystem/bat/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/filesystem/bat/</guid><description>&lt;h1 id="bat"&gt;bat&lt;a class="anchor" href="#bat"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;说完了 ls 列举目录，cd 进入目录，我们继续介绍一个命令，&lt;a href="https://github.com/sharkdp/bat"&gt;bat&lt;/a&gt; 查看文件内容。&lt;/p&gt;
&lt;p&gt;这个 bat 和 Baidu/Alibaba/Tencent 没有联系，它是一款支持语法高亮、GIT 集成的用于替换类 Unix 系统下快速查看文件内容的命令，功能与 cat 相似的命令。&lt;/p&gt;
&lt;p&gt;我们直接介绍它的安装与使用吧。&lt;/p&gt;
&lt;h3 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install bat &lt;span style="color:#75715e"&gt;# 其他系统请查看 GithHub README.md&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="使用"&gt;使用&lt;a class="anchor" href="#%e4%bd%bf%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;对于 bat 命令，我先介绍它的使用，然后再谈配置，因为配置并非它的必选项而是优化项。&lt;/p&gt;
&lt;p&gt;bat 相比于 cat 的第一个优势，就是它支持语法高亮效果与行号显示。如我们查看一个 Go 的源码文件，效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-28-high-productivity-shell-commands-part1-08.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;而且，bat 还集成 Git。如下我们修改了 logger.go 文件，通过 bat 即可查看它的修改点；&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-28-high-productivity-shell-commands-part1-09.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，bat 采用分页输出，这对于读取大文件非常有帮助，不用担心失误导致产生一大片控制台输出。但如果你希望 bat 和 cat 一样，一次性无分页输出文本，可通过 &lt;code&gt;--pager=never&lt;/code&gt; 或 &lt;code&gt;--no-pager&lt;/code&gt; 选项实现。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bat --pager&lt;span style="color:#f92672"&gt;=&lt;/span&gt;never logger.go
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bat --no-pager logger.go&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你习惯使用 cat 的模式，希望默认不启用分页能力，可直接在配置文件配置默认行为，在其中增加 &lt;code&gt;--pager=never&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;接下来说说如何通过 bat 的配置改变它的默认行为吧。&lt;/p&gt;
&lt;h3 id="配置"&gt;配置&lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;bat 的配置文件路径是通过环境变量指定的。我们在 &lt;code&gt;.zshrc&lt;/code&gt; 中设置 bat 配置文件位置环境变量。&lt;/p&gt;</description></item><item><title>fzf - 交互式命令行查找器</title><link>https://www.poloxue.com/mytermenv/docs/commands/search/fzf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/commands/search/fzf/</guid><description>&lt;h1 id="fzf---交互式查找器"&gt;fzf - 交互式查找器&lt;a class="anchor" href="#fzf---%e4%ba%a4%e4%ba%92%e5%bc%8f%e6%9f%a5%e6%89%be%e5%99%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;fzf&lt;/a&gt; 全名 fuzzy finder，一款通用的命令行模糊查找工具。它可与其他命令结合，提升其他命令的使用体验。&lt;/p&gt;
&lt;h2 id="安装"&gt;安装&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install fzf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="目录搜索"&gt;目录搜索&lt;a class="anchor" href="#%e7%9b%ae%e5%bd%95%e6%90%9c%e7%b4%a2"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;fzf 的默认行为是在当前目录搜索。当然它的搜索和 fd 的搜索不同，它会进入交互式模式搜索文件或目录路径。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-13.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;它支持通过 CTRL+P/N 上下选择，确认搜索结果后，输入 Enter 确认后，它会将输出直接作为输出打印到标准输出。由于它输出为标准输出，我们就有了更多可能性，通过管道将它与其他命令结合。&lt;/p&gt;
&lt;h2 id="命令组合"&gt;命令组合&lt;a class="anchor" href="#%e5%91%bd%e4%bb%a4%e7%bb%84%e5%90%88"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;fzf 最大的魅力在于，我们可将其与其他命令组合，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将其他命令的输出作为 fzf 的输入，基于它进行搜索；&lt;/li&gt;
&lt;li&gt;或将 fzf 的搜索内容作为其他命令的输入，更智能使用其他命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们具体介绍下吧。&lt;/p&gt;
&lt;p&gt;首先，我们示例将 &lt;code&gt;one&lt;/code&gt;、&lt;code&gt;two&lt;/code&gt;、&lt;code&gt;three&lt;/code&gt;、&lt;code&gt;four&lt;/code&gt; 作为输入，通过 fzf 搜索选择。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;one\ntwo\nthree\nfour&amp;#34;&lt;/span&gt; | fzf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-14.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;更多可能就诞生了，我们可以讲 ls 的输出作为 fzf 的输入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ls | fzf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-15.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;将 fd 查找结果作为 fzf 的输入。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fd --type file | fzf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-30-high-productivity-shell-commands-part2-16.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们尝试将搜索结果作为其他命令的输入。毕竟，如果 fzf 的搜索结果只是输出到终端，那就太可惜了，可将其作为其它命令的输入。&lt;/p&gt;
&lt;p&gt;如将 fzf 搜索结果作为 vim 的输入，助力 vim 快速打开文件。&lt;/p&gt;</description></item><item><title>基础插件 2</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/basicplugins2/</guid><description>&lt;p&gt;本文是基础篇插件的第二篇，继续介绍 4 个常用的 zsh 插件。我将涉及的插件，如下所示：&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;name&lt;/th&gt;
 &lt;th&gt;description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;copypath&lt;/td&gt;
 &lt;td&gt;拷贝路径到剪贴版；&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;copyfile&lt;/td&gt;
 &lt;td&gt;拷贝文件内容到剪贴板；&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;copybuffer&lt;/td&gt;
 &lt;td&gt;拷贝命令行内容到剪贴板；&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;sudo&lt;/td&gt;
 &lt;td&gt;命令行开头快速添加 sudo；&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;让我们正式开始。&lt;/p&gt;
&lt;h2 id="推荐插件"&gt;推荐插件&lt;a class="anchor" href="#%e6%8e%a8%e8%8d%90%e6%8f%92%e4%bb%b6"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先说 oh-my-zsh 的内置插件。&lt;/p&gt;
&lt;p&gt;打开 zsh 配置文件 ~/.zshrc，将要使用的 oh-my-zsh 的内置插件提前配置。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plugins&lt;span style="color:#f92672"&gt;=(&lt;/span&gt;... copypath copyfile copybuffer sudo ...&lt;span style="color:#f92672"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;保存退出，执行 &lt;code&gt;source ~/.zshrc 生效&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id="copypath"&gt;copypath&lt;a class="anchor" href="#copypath"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/copypath"&gt;copypath&lt;/a&gt; 的用途如其名，就是用来 copy 路径的。&lt;/p&gt;
&lt;p&gt;支持两种用法。&lt;/p&gt;
&lt;p&gt;copypath: 无参数，直接拷贝当前路径；&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-19-zsh-6-powerful-plugins-01.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;copypath &amp;lt;文件或目录&amp;gt;：拷贝指定文件或目录的绝对路径；&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-19-zsh-6-powerful-plugins-02.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;相比于 &lt;code&gt;pwd&lt;/code&gt; 之后再拷贝，这种方式真的是省心省力的方式。&lt;/p&gt;
&lt;h3 id="copyfile"&gt;copyfile&lt;a class="anchor" href="#copyfile"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/copyfile"&gt;copyfile&lt;/a&gt;，用于拷贝文件内容，命令格式 copyfile &amp;lt;文件路径&amp;gt;。&lt;/p&gt;
&lt;p&gt;假设，现有一个文件 test.txt。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat test.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Hello oh my zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一个测试命令，&lt;code&gt;copyfile test.txt&lt;/code&gt;，即可将 &lt;code&gt;test.txt&lt;/code&gt; 文件中的内容拷贝到剪贴板中。&lt;/p&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-19-zsh-6-powerful-plugins-03.gif" alt="" /&gt;&lt;/p&gt;</description></item><item><title>开始使用</title><link>https://www.poloxue.com/mytermenv/docs/terminal/usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/terminal/usage/</guid><description>&lt;h1 id="开始使用"&gt;开始使用&lt;a class="anchor" href="#%e5%bc%80%e5%a7%8b%e4%bd%bf%e7%94%a8"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;打开 &amp;lsquo;iTerm2&amp;rsquo;，快速使用体验一下吧。&lt;/p&gt;
&lt;h2 id="分屏功能"&gt;分屏功能&lt;a class="anchor" href="#%e5%88%86%e5%b1%8f%e5%8a%9f%e8%83%bd"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;如下图所示，&amp;ldquo;CommandL+d&amp;rdquo; 垂直分屏，&amp;ldquo;Command+D&amp;rdquo; 水平分屏。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-09/2023-09-25-install-iterm2-as-my-developing-environment-02.jpeg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;当然，这个快捷键是可以配置的，因为这两个快捷键趋势不够便捷。我们打开它的快捷键配置，进入 Preferences -&amp;gt; Keys -&amp;gt; key Binds 即可开始设置快捷键键。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-09/2023-09-25-install-iterm2-as-my-developing-environment-08.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;其中的红色框内容可用于设置如何水平和垂直分割屏幕：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHIFT+COMMAND+| -&amp;gt; 水平切片 split horizontally；&lt;/li&gt;
&lt;li&gt;SHIFT+COMMAND+- -&amp;gt; 水平切片 split horizontally；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中的蓝色框区域可用于设置 vim 风格的上下左右分屏切换：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;COMMAND+h：向左选中&lt;/li&gt;
&lt;li&gt;COMMAND+j：向下选中&lt;/li&gt;
&lt;li&gt;COMMAND+k：向上选中&lt;/li&gt;
&lt;li&gt;COMMAND+l：向右选中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于习惯使用 vim，但不是每个任务都有打开 tmux + vim 组合的时候，这个快捷键的设置就是效率神器啊。&lt;/p&gt;
&lt;h3 id="分屏最大化"&gt;分屏最大化&lt;a class="anchor" href="#%e5%88%86%e5%b1%8f%e6%9c%80%e5%a4%a7%e5%8c%96"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如下图所示，&amp;ldquo;Shift+Command+Enter&amp;rdquo; 分屏最大化。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-09/2023-09-25-install-iterm2-as-my-developing-environment-03.jpeg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;再次 &amp;ldquo;Shift+Command+Enter&amp;rdquo; 恢复分屏。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-09/2023-09-25-install-iterm2-as-my-developing-environment-04.jpeg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;如果你习惯于在终端工作，那么分屏功能肯定是日常使用最多的能力了吧。如上的三分屏幕效果，左边座位代码编辑区域、右上方用于调试或运行代码，下面可用于其他一些测试或者运行命令区域。&lt;/p&gt;
&lt;h3 id="支持搜索"&gt;支持搜索&lt;a class="anchor" href="#%e6%94%af%e6%8c%81%e6%90%9c%e7%b4%a2"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;相对于 通过 &amp;ldquo;Command+f&amp;rdquo; 开启搜索框：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-09/2023-09-25-install-iterm2-as-my-developing-environment-10.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;iTerm2 的搜索能力更强大，可以在搜索框下拉仔细检查下它能力。诸如默认的 smartcase 模式、大小写敏感和不敏感模式、正则。可能你觉得这些不是很正常吗？俗话说，没有对比就没有伤害，如果你和系统默认的终端对比下就知道它的优秀之处了。&lt;/p&gt;
&lt;h3 id="其他"&gt;其他&lt;a class="anchor" href="#%e5%85%b6%e4%bb%96"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;iTerm2 是真彩 256 colors，这才让我们可以在 iTerm2 将 neovim 打造成媲美 vscode 的 IDE。&lt;/p&gt;</description></item><item><title>Python API</title><link>https://www.poloxue.com/mytermenv/docs/terminal/pyapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/terminal/pyapi/</guid><description>&lt;h1 id="python-api"&gt;Python API&lt;a class="anchor" href="#python-api"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;这部分主要介绍 iTerm2 提供的 Python API，利用它，带你实现一些不一样的能力。我将演示两个案例，分别是背景图自动更换和分屏创建自动化。&lt;/p&gt;
&lt;h3 id="自动更换背景图"&gt;自动更换背景图&lt;a class="anchor" href="#%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%8d%a2%e8%83%8c%e6%99%af%e5%9b%be"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;编程枯燥无味，想通过背景图为枯燥生活提供一些趣味。假设，我们要设计一个脚本，给终端一小时自动更好一个背景图。&lt;/p&gt;
&lt;p&gt;假设我的壁纸图片都在 &lt;code&gt;~/Public/images/beauties&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;p&gt;实现下这个代码，如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; iterm2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; asyncio
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 替换背景图片的函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;change_background&lt;/span&gt;(session, image_path):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 获取当前会话的配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; profile &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; session&lt;span style="color:#f92672"&gt;.&lt;/span&gt;async_get_profile()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 设置透明度，值在0（完全透明）到1（完全不透明）之间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; profile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;async_set_transparency(&lt;span style="color:#ae81ff"&gt;0.2&lt;/span&gt;) &lt;span style="color:#75715e"&gt;# 设置为50%透明度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 设置背景图像位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; profile&lt;span style="color:#f92672"&gt;.&lt;/span&gt;async_set_background_image_location(image_path)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;def&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(connection):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; app &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; iterm2&lt;span style="color:#f92672"&gt;.&lt;/span&gt;async_get_app(connection)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; window &lt;span style="color:#f92672"&gt;=&lt;/span&gt; app&lt;span style="color:#f92672"&gt;.&lt;/span&gt;current_terminal_window
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; window &lt;span style="color:#f92672"&gt;is&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;None&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; session &lt;span style="color:#f92672"&gt;=&lt;/span&gt; window&lt;span style="color:#f92672"&gt;.&lt;/span&gt;current_tab&lt;span style="color:#f92672"&gt;.&lt;/span&gt;current_session
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 获取脚本参数提供的目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; directory &lt;span style="color:#f92672"&gt;=&lt;/span&gt; sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(sys&lt;span style="color:#f92672"&gt;.&lt;/span&gt;argv) &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;not&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;isdir(directory):
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;raise&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ValueError&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;Provided path &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;directory&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; is not a directory&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;True&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# 创建无限循环以定期更换背景&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 获取目录中的所有图片文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; image_files &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;join(directory, f)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; f &lt;span style="color:#f92672"&gt;in&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;listdir(directory)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; f&lt;span style="color:#f92672"&gt;.&lt;/span&gt;lower()&lt;span style="color:#f92672"&gt;.&lt;/span&gt;endswith((&lt;span style="color:#e6db74"&gt;&amp;#34;.png&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;.jpg&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;.jpeg&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;.tiff&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;.bmp&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;.gif&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; image_files:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 随机选择一张图片&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; chosen_image &lt;span style="color:#f92672"&gt;=&lt;/span&gt; os&lt;span style="color:#f92672"&gt;.&lt;/span&gt;path&lt;span style="color:#f92672"&gt;.&lt;/span&gt;abspath(random&lt;span style="color:#f92672"&gt;.&lt;/span&gt;choice(image_files))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 调用函数更改背景&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; change_background(session, chosen_image)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; print(&lt;span style="color:#e6db74"&gt;f&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;No images found in directory &lt;/span&gt;&lt;span style="color:#e6db74"&gt;{&lt;/span&gt;directory&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# 等待一个小时&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; asyncio&lt;span style="color:#f92672"&gt;.&lt;/span&gt;sleep(&lt;span style="color:#ae81ff"&gt;3600&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;iterm2&lt;span style="color:#f92672"&gt;.&lt;/span&gt;run_until_complete(main)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;代码中提供了注释说明，不熟悉 Python 直接考虑即可，命令的接收参数是存放图片的目录。&lt;/p&gt;</description></item><item><title>高级插件</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/advancedplugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/advancedplugins/</guid><description>&lt;h1 id="高级插件"&gt;高级插件&lt;a class="anchor" href="#%e9%ab%98%e7%ba%a7%e6%8f%92%e4%bb%b6"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;我们再来了解 4 个非 oh-my-zsh 内置插件，它们 zsh-syntax-highlighting、zsh-autosuggestions、zsh-substring-history-search 和 you-should-use。这两个插件由 zsh 社区开发。&lt;/p&gt;
&lt;p&gt;开始介绍前，先将这两个插件全部安装配置完成。&lt;/p&gt;
&lt;h3 id="下载"&gt;下载&lt;a class="anchor" href="#%e4%b8%8b%e8%bd%bd"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下载命令如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span style="color:#e6db74"&gt;${&lt;/span&gt;ZSH_CUSTOM&lt;span style="color:#66d9ef"&gt;:-&lt;/span&gt;$HOME/.oh-my-zsh/custom&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting &lt;span style="color:#e6db74"&gt;${&lt;/span&gt;ZSH_CUSTOM&lt;span style="color:#66d9ef"&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;/plugins/zsh-syntax-highlighting
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/zsh-users/zsh-history-substring-search &lt;span style="color:#e6db74"&gt;${&lt;/span&gt;ZSH_CUSTOM&lt;span style="color:#66d9ef"&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;/plugins/zsh-history-substring-search
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/MichaelAquilina/zsh-you-should-use.git &lt;span style="color:#e6db74"&gt;${&lt;/span&gt;ZSH_CUSTOM&lt;span style="color:#66d9ef"&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;/plugins/you-should-use&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="配置"&gt;配置&lt;a class="anchor" href="#%e9%85%8d%e7%bd%ae"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;打开 &lt;code&gt;.zshrc&lt;/code&gt; 完成配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plugins&lt;span style="color:#f92672"&gt;=(&lt;/span&gt;..., zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search you-should-use&lt;span style="color:#f92672"&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;记得执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 生效配置。&lt;/p&gt;
&lt;h3 id="插件-1zsh-syntax-highlighting"&gt;插件 1：zsh-syntax-highlighting&lt;a class="anchor" href="#%e6%8f%92%e4%bb%b6-1zsh-syntax-highlighting"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;zsh-syntax-highlighting 是 zsh 的语法高亮插件，如果输入的命令不存在，或者输入 shell 语法不正确，将会自动以红色表示。它的优点就是，当我们在终端输入，实时输入实时反馈。&lt;/p&gt;
&lt;p&gt;首先，我们尝试下错误命令，提示效果，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-10.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;再来看看，正确命令提示效果，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-11.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;对，就是这么简单。通过这个插件提供的实时反馈，可以防止我们在命令执行后，才知道输入错了。&lt;/p&gt;
&lt;h3 id="插件-2zsh-autosuggestions"&gt;插件 2：zsh-autosuggestions&lt;a class="anchor" href="#%e6%8f%92%e4%bb%b6-2zsh-autosuggestions"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;zsh-autosuggestions 可以说是我最喜欢的插件了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-16.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;它的作用是什么呢？&lt;/p&gt;
&lt;p&gt;它可用于提示补全建议，当输入字符，默认情况下，它基于我们的历史命令自动提供输入建议。还记得前面提到的，zsh 的历史命令是在不同的会话间共享。现在，再结合 zsh-autosuggestions 插件，简直不要太爽。哈哈。&lt;/p&gt;
&lt;p&gt;我们先看下效果，如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-16-zsh-themes-and-plugin-12.gif" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，输入右方向键 → 可将建议直接输入终端。&lt;/p&gt;
&lt;p&gt;但这个其实体验很差，对于一个双手不想离开键盘中心区域的人而言，通过右键接受提示建议，这简直不能忍啊。是否能改变这个默认快捷键呢？&lt;/p&gt;</description></item><item><title>自定义提示主题</title><link>https://www.poloxue.com/mytermenv/docs/ohmyzsh/powerlevel10k/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/docs/ohmyzsh/powerlevel10k/</guid><description>&lt;h1 id="自定义提示主题"&gt;自定义提示主题&lt;a class="anchor" href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e6%8f%90%e7%a4%ba%e4%b8%bb%e9%a2%98"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;不知道你是否想过自定义 Shell 提示符主题能带来的不仅是终端美观度的提升，还能通过视觉优化增强了工作效率呢？&lt;/p&gt;
&lt;p&gt;在众多 shell 提示符主题中，Powerlevel10k 因为支持高度可定制和丰富的功能选，非常值得推荐。本文基于这个主题介绍 zsh 主题插件 powerlevel10k，包括它的安装和配置自定义。&lt;/p&gt;
&lt;h2 id="什么是-powerlevel10k"&gt;什么是 powerlevel10k?&lt;a class="anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af-powerlevel10k"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-20-zsh-theme-powerlevel10k-16.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Powerlevel10 是一款 zsh 的主题，强调性能、灵活性和开箱即用，但同时自定义能力极强。前面介绍 zsh 轻量级框架 oh-my-zsh 时，提到过一些 zsh 主题，而通过 p10k（powerlevel10k 的简称）的自定义配置化能力，同样能配置出覆盖出之前主题的类似效果，当然相对而言，也更加强大。&lt;/p&gt;
&lt;p&gt;效果展示：&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-20-zsh-theme-powerlevel10k-13.png" alt="" /&gt;&lt;/p&gt;
&lt;h2 id="安装依赖字体"&gt;安装依赖字体&lt;a class="anchor" href="#%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96%e5%ad%97%e4%bd%93"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在安装 powerlevel10k 前，要先安装它依赖的字体：&lt;a href="https://github.com/ryanoasis/nerd-fonts#font-installation"&gt;NerdFont&lt;/a&gt;。不同系统下的安装方法，查看&lt;a href="https://github.com/ryanoasis/nerd-fonts#font-installation"&gt;它的文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;简单说下 Nerd Fonts 字体。它是一系列开源字体的集合，被特别增强，它包含大量的图标和符号，如开发工具、编程语言和版本控制系统的图标。这些字体对于提高我们终端和编辑器的视觉体验和功能性有着极大帮助。&lt;/p&gt;
&lt;p&gt;有了它，我们的终端才能显示一些复杂字体甚至是图标。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@2023-10/2023-10-20-zsh-theme-powerlevel10k-14.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;MacOS 的话，可直接通过 Homebrew 快速安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew tap homebrew/cask-fonts
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install font-hack-nerd-font&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成，配置终端字体，进入 iTerm2 Settings -&amp;gt; Profiles -&amp;gt; Text -&amp;gt; Font -&amp;gt; MesloLGS NF 即可。&lt;/p&gt;
&lt;p&gt;现在，我们终端就支持 NerdFont 字体了。&lt;/p&gt;
&lt;p&gt;如何测试？&lt;/p&gt;
&lt;p&gt;接下来安装 Powerlevel10k 时，它会提示我们检查字体是否正确安装。&lt;/p&gt;</description></item><item><title/><link>https://www.poloxue.com/mytermenv/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/mytermenv/readme/</guid><description>&lt;h1 id="fyne-中文文档"&gt;Fyne 中文文档&lt;a class="anchor" href="#fyne-%e4%b8%ad%e6%96%87%e6%96%87%e6%a1%a3"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Fyne 是一款 GO 实现 GUI 框架，本文档是基于 Fyne v2.4 的官方文档中文翻译版。英文原版，请异步 &lt;a href="https://docs.fyne.io"&gt;docs.fyne.io&lt;/a&gt;。&lt;/p&gt;</description></item></channel></rss>