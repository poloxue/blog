<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on POLOXUE's BLOG</title><link>https://www.poloxue.com/tags/web/</link><description>Recent content in Web on POLOXUE's BLOG</description><generator>Hugo</generator><language>zh-cn</language><copyright>Polo Xue All rights reserved</copyright><lastBuildDate>Mon, 09 Oct 2023 13:35:05 +0800</lastBuildDate><atom:link href="https://www.poloxue.com/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>从头构建 Go Web 框架（四）：第三方路由集成</title><link>https://www.poloxue.com/posts/2023-09-30-build-your-own-webframework-in-golang-part-4/</link><pubDate>Mon, 09 Oct 2023 13:35:05 +0800</pubDate><guid>https://www.poloxue.com/posts/2023-09-30-build-your-own-webframework-in-golang-part-4/</guid><description>&lt;blockquote&gt;
&lt;p&gt;本系列文章写于 2014 年，相较于 golang 极短的发展历程，这已经是古董级别的一篇文章了，但 web 框架思想概念依然有效。希望通过翻译这个系列文章，能让大家都现有 Go Web 框架有更深的认识。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;本文是 &amp;ldquo;构建属于自己的 Web 框架&amp;rdquo; 系列文章中的第四篇，将介绍如何在 Go 中使用三方路由。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-23-build-your-own-webframework-in-golang"&gt;第 1 部分：简介&lt;/a&gt;，&lt;a href="https://www.nicolasmerouze.com/build-web-framework-golang"&gt;Build Your Own Web Framework In Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-28-build-your-own-webframework-in-golang-part-2"&gt;第 2 部分：Go 中间件：最佳实践和示例&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-2-Middlewares-in-Go-Best-practices-and-examples-32f41ae0e21b435c86cf9dd38bf0ff65"&gt;Part 2: Middlewares in Go: Best practices and examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2023-09-30-build-your-own-webframework-in-golang-part-3"&gt;第 3 部分：中间件数据共享&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-3-Share-Values-Between-Middlewares-dca6f9448a0c4be68b0da30137c38875"&gt;Part 3: Share Values Between Middlewares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2023-10-09-build-your-own-webframework-in-golang-part-4"&gt;第 4 部分：第三方路由&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-4-Guide-to-3rd-Party-Routers-in-Go-8ddcca5c360b4539a601ae383c9d7e5d"&gt;Part 4: Guide to 3rd Party Routers in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 5 部分：使用 MongoDB 实现 JSON-API&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-5-How-to-implement-JSON-API-standard-in-MongoDB-and-Go-a3daeead140846e4a6ae1e3c01b47f52"&gt;How to implement JSON-API standard in MongoDB and Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基于 Go 标准库 &lt;code&gt;net/http&lt;/code&gt;，已经足够写出一个 Web 应用。但不足的是，它提供的路由能力 &lt;code&gt;http.Handle(pattern, handler)&lt;/code&gt; 还是过于单一，只能实现一些静态路由。&lt;/p&gt;</description></item><item><title>从头构建 Go Web 框架（三）：中间件的数据共享</title><link>https://www.poloxue.com/posts/2023-09-30-build-your-own-webframework-in-golang-part-3/</link><pubDate>Fri, 29 Sep 2023 13:35:05 +0800</pubDate><guid>https://www.poloxue.com/posts/2023-09-30-build-your-own-webframework-in-golang-part-3/</guid><description>&lt;blockquote&gt;
&lt;p&gt;本系列文章写于 2014 年，相较于 golang 极短的发展历程，这已经是古董级别的一篇文章了，但 web 框架思想概念依然有效。系统通过这个系列文章，能让大家都现有 Go Web 框架有更深的认识。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;本文是 &amp;ldquo;构建属于自己的 Web 框架&amp;rdquo; 系列文章中的第二篇，将介绍中间件的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-23-build-your-own-webframework-in-golang"&gt;第 1 部分：简介&lt;/a&gt;，&lt;a href="https://www.nicolasmerouze.com/build-web-framework-golang"&gt;Build Your Own Web Framework In Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-28-build-your-own-webframework-in-golang-part-2"&gt;第 2 部分：Go 中间件：最佳实践和示例&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-2-Middlewares-in-Go-Best-practices-and-examples-32f41ae0e21b435c86cf9dd38bf0ff65"&gt;Part 2: Middlewares in Go: Best practices and examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2023-09-30-build-your-own-webframework-in-golang-part-3"&gt;第 3 部分：中间件数据共享&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-3-Share-Values-Between-Middlewares-dca6f9448a0c4be68b0da30137c38875"&gt;Part 3: Share Values Between Middlewares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 4 部分：第三方路由&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-4-Guide-to-3rd-Party-Routers-in-Go-8ddcca5c360b4539a601ae383c9d7e5d"&gt;Part 4: Guide to 3rd Party Routers in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 5 部分：使用 MongoDB 实现 JSON-API&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-5-How-to-implement-JSON-API-standard-in-MongoDB-and-Go-a3daeead140846e4a6ae1e3c01b47f52"&gt;How to implement JSON-API standard in MongoDB and Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;附加福利：上传文件到 s3&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Bonus-File-Upload-REST-API-with-Go-and-Amazon-S3-1130fbacad7442c5b0a7df9320d792b4"&gt;Bonus: File Upload REST API with Go and Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们在 &lt;a href="https://www.poloxue.com/posts/2021-10-28-build-your-own-webframework-in-golang-part-2"&gt;上文&lt;/a&gt; 中介绍了 middleware 的实现，通过创建 &lt;code&gt;func (http.Handler) http.Handler&lt;/code&gt; 类型函数，实现了路由或应用间共享代码。案例: 日志（logging） 和 异常恢复（panic recovery）。但是，这两个案例的功能还是相对单一，多数中间件要比它们复杂，需要在中间件间共享数据。&lt;/p&gt;</description></item><item><title>从头构建 Go Web 框架（二）：中间件</title><link>https://www.poloxue.com/posts/2021-10-28-build-your-own-webframework-in-golang-part-2/</link><pubDate>Thu, 28 Oct 2021 13:35:05 +0800</pubDate><guid>https://www.poloxue.com/posts/2021-10-28-build-your-own-webframework-in-golang-part-2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;本系列文章写于 2014 年，相较于 golang 极短的发展历程，这已经是古董级别的一篇文章了，但 web 框架思想概念依然有效。系统通过这个系列文章，能让大家都现有 Go Web 框架有更深的认识。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;本文是 &amp;ldquo;构建属于自己的 Web 框架&amp;rdquo; 系列文章中的第二篇，将介绍中间件的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-23-build-your-own-webframework-in-golang"&gt;第 1 部分：简介&lt;/a&gt;，&lt;a href="https://www.nicolasmerouze.com/build-web-framework-golang"&gt;Build Your Own Web Framework In Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-28-build-your-own-webframework-in-golang-part-2"&gt;第 2 部分：Go 中间件：最佳实践和示例&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-2-Middlewares-in-Go-Best-practices-and-examples-32f41ae0e21b435c86cf9dd38bf0ff65"&gt;Part 2: Middlewares in Go: Best practices and examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 3 部分：中间件数据共享&lt;/a&gt;，&lt;a href="https://www.nicolasmerouze.com/share-values-between-middlewares-context-golang"&gt;Part 3: Share Values Between Middlewares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 4 部分：第三方路由&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-4-Guide-to-3rd-Party-Routers-in-Go-8ddcca5c360b4539a601ae383c9d7e5d"&gt;Part 4: Guide to 3rd Party Routers in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 5 部分：使用 MongoDB 实现 JSON-API&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-5-How-to-implement-JSON-API-standard-in-MongoDB-and-Go-a3daeead140846e4a6ae1e3c01b47f52"&gt;How to implement JSON-API standard in MongoDB and Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;附加福利：上传文件到 s3&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Bonus-File-Upload-REST-API-with-Go-and-Amazon-S3-1130fbacad7442c5b0a7df9320d792b4"&gt;Bonus: File Upload REST API with Go and Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在编写 Go Web 应用时，代码重复是大多数开发者将会遇到的第一个问题。&lt;/p&gt;</description></item><item><title>从头构建 Go Web 框架（一）：介绍</title><link>https://www.poloxue.com/posts/2021-10-23-build-your-own-webframework-in-golang/</link><pubDate>Sat, 23 Oct 2021 20:33:14 +0800</pubDate><guid>https://www.poloxue.com/posts/2021-10-23-build-your-own-webframework-in-golang/</guid><description>&lt;blockquote&gt;
&lt;p&gt;本系列文章写于 2014 年，相较于 golang 极短的发展历程，这已经是古董级别的一篇文章了，但 web 框架思想概念依然有效。系统通过这个系列文章，能让大家都现有 Go Web 框架有更深的认识。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;本文是 &amp;ldquo;构建属于自己的 Web 框架&amp;rdquo; 系列文章中的第二篇，将介绍中间件的最佳实践。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-23-build-your-own-webframework-in-golang"&gt;第 1 部分：简介&lt;/a&gt;，&lt;a href="https://www.nicolasmerouze.com/build-web-framework-golang"&gt;Build Your Own Web Framework In Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.poloxue.com/posts/2021-10-28-build-your-own-webframework-in-golang-part-2"&gt;第 2 部分：Go 中间件：最佳实践和示例&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-2-Middlewares-in-Go-Best-practices-and-examples-32f41ae0e21b435c86cf9dd38bf0ff65"&gt;Part 2: Middlewares in Go: Best practices and examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 3 部分：中间件数据共享&lt;/a&gt;，&lt;a href="https://www.nicolasmerouze.com/share-values-between-middlewares-context-golang"&gt;Part 3: Share Values Between Middlewares&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 4 部分：第三方路由&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-4-Guide-to-3rd-Party-Routers-in-Go-8ddcca5c360b4539a601ae383c9d7e5d"&gt;Part 4: Guide to 3rd Party Routers in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;第 5 部分：使用 MongoDB 实现 JSON-API&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Part-5-How-to-implement-JSON-API-standard-in-MongoDB-and-Go-a3daeead140846e4a6ae1e3c01b47f52"&gt;How to implement JSON-API standard in MongoDB and Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;附加福利：上传文件到 s3&lt;/a&gt;，&lt;a href="https://nicolasmerouze.notion.site/Bonus-File-Upload-REST-API-with-Go-and-Amazon-S3-1130fbacad7442c5b0a7df9320d792b4"&gt;Bonus: File Upload REST API with Go and Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/go-martin/martini"&gt;Martini&lt;/a&gt; 发布之后，迅速成为了最受大家欢迎的 Go 语言 Web 框架，且现在依旧是如此。但必须指出的是，它不符合常规习惯，非常慢，概念也有不足。它教了我们一堆错误的做法。但因为它上手容易，许多开发人员仍在使用。&lt;/p&gt;</description></item></channel></rss>