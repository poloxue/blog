<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on POLOXUE's BLOG</title><link>https://www.poloxue.com/tags/go/</link><description>Recent content in Go on POLOXUE's BLOG</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Polo Xue All rights reserved</copyright><atom:link href="https://www.poloxue.com/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 命令行解析 flag 包之扩展新类型</title><link>https://www.poloxue.com/go/go-flag-new-type-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.poloxue.com/go/go-flag-new-type-extension/</guid><description>上篇文章 说到，除布尔类型 Flag，flag 支持的还有整型（int、int64、uint、uint64）、浮点型（float64）、字符串（string）和时长（duration）。
flag 内置支持能满足大部分的需求，但某些场景，需要自定义解析规则。一个优秀的库肯定要支持扩展的。本文将介绍如何为 flag 扩展一个新的类型支持？
扩展目标 在 gvg 这个小工具中，list 子命令支持获取 Go 的版本列表。但版本的信息来源有多处，比如 installed（已安装）、local（本地仓库）和 remote（远程仓库）。
查看下 list 的帮助信息，如下：
1 2 3 4 5 6 7 8 NAME: gvg list - list go versions USAGE: gvg list [command options] [arguments...] OPTIONS: --origin value the origin of version information , such as installed, local, remote (default: &amp;#34;installed&amp;#34;) 可以看出，list 子命令支持一个 Flag 选项，--origin。它用于指定版本信息的来源，允许值的范围是 installed、local 和 remote。
如果要求不严格，用 StringVar 也可以实现。但问题是，使用 String，即使输入不在指定范围也能成功解析，不够严谨。虽说在获取后也可以检查，但还是不够灵活、可配置型也差。
接下来，我们要实现一个新的类型的 Flag，使选项的值必需在指定范围，否则要给出一定的错误提示信息。</description></item></channel></rss>