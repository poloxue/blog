<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on POLOXUE's BLOG</title><link>https://www.poloxue.com/tags/git/</link><description>Recent content in Git on POLOXUE's BLOG</description><generator>Hugo</generator><language>zh-cn</language><copyright>Polo Xue All rights reserved</copyright><lastBuildDate>Mon, 18 Mar 2019 10:36:55 +0800</lastBuildDate><atom:link href="https://www.poloxue.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>谈谈版本管理 GIT 的理论与架构</title><link>https://www.poloxue.com/posts/2019-03-18-git-architecture/</link><pubDate>Mon, 18 Mar 2019 10:36:55 +0800</pubDate><guid>https://www.poloxue.com/posts/2019-03-18-git-architecture/</guid><description>&lt;p&gt;GIT 是当前最流行的版本控制系统。之前在公司系统做过一次系统总结，抽时间整理成文。&lt;/p&gt;
&lt;h2 id="基础概念"&gt;基础概念&lt;/h2&gt;
&lt;p&gt;GIT是一种版本控制软件，那就首先了解一下什么是 “版本控制”？&lt;/p&gt;
&lt;p&gt;比较官方的解释是，版本控制系统是一种记录一个或若干个内容变化，以便将来查询特定版本修订情况的系统。&lt;/p&gt;
&lt;p&gt;简言之，你的修改只要提到到版本控制系统，基本都可以找回，版本控制系统就像一台时光机器，可以让你回到任何一个时间点。&lt;/p&gt;
&lt;p&gt;了解了版本控制系统的功能，我们知道就算你把代码改的一塌糊涂，照样可以恢复到我们过去的任何一个时间点，工作量却微乎其微。是不是很amazing。&lt;/p&gt;
&lt;p&gt;总结一下版本控制系统有哪些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录文件所有历史变化。这是版本控制系统的基本能力；&lt;/li&gt;
&lt;li&gt;随时恢复到任意时间点。历史记录功能使我们不怕改错代码了；&lt;/li&gt;
&lt;li&gt;支持多功能并行开发。通常版本控制系统都支持分支，保证了并行开发的可行；&lt;/li&gt;
&lt;li&gt;多人协作并行开发。对于多人协作项目，支持多人协作开发的版本管理将事半功倍；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上面介绍的几个比较常见的优点，版本控制系统的好处还有很多，就不一一列举了，可通过实践自己逐渐体悟总结。下面基于GIT做更多介绍。&lt;/p&gt;
&lt;h2 id="常见类别"&gt;常见类别&lt;/h2&gt;
&lt;p&gt;版本控制系统常见类别有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地版本控制系统、&lt;/li&gt;
&lt;li&gt;集中式版本控制系统、&lt;/li&gt;
&lt;li&gt;分布式版本控制系统；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="本地版本控制系统"&gt;本地版本控制系统&lt;/h3&gt;
&lt;p&gt;代表有 RCS(Revision Control System)，Linux下面的可用来作为配置文件管理的版本控制工具，工作使用不多；&lt;/p&gt;
&lt;p&gt;
 &lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@main/2019-03-18-git-architecture-01.png" alt=""&gt;

&lt;/p&gt;
&lt;p&gt;关于其优缺点，简述如下：&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单，很多系统中都有内置；&lt;/li&gt;
&lt;li&gt;适合管理文本，如系统配置；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理少量文件，不支持项目的管理；&lt;/li&gt;
&lt;li&gt;支持的文件类型单一；&lt;/li&gt;
&lt;li&gt;不支持远程，网络传输；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="集中式版本控制系统"&gt;集中式版本控制系统&lt;/h3&gt;
&lt;p&gt;代表如CVS，SVN(Subversion)，SVN是曾经最流行的版本管理系统，很多人都有用过，因而对于集中式版本控制系统很多人都很了解它。&lt;/p&gt;
&lt;p&gt;
 &lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@main/2019-03-18-git-architecture-02.png" alt=""&gt;

&lt;/p&gt;
&lt;h4 id="优点"&gt;优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;适合多人团队协作开发；&lt;/li&gt;
&lt;li&gt;代码集中化管理；&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="缺点"&gt;缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单点故障；&lt;/li&gt;
&lt;li&gt;必须联网，无法单机工作；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点就不多说了，大家可能对缺点更是记忆深刻。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单点故障，集中式管理的缺点，代码集中一台机器上，这个问题其实可通过备份集群解决；&lt;/li&gt;
&lt;li&gt;必须联网工作，这个缺点深恶痛觉，一旦公司网络出现问题，几个小时甚至一天无法工作；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于这些缺点，便有了分布版本控制系统。&lt;/p&gt;
&lt;h3 id="分布式版本控制系统"&gt;分布式版本控制系统&lt;/h3&gt;
&lt;p&gt;代表就是今天要说的GIT了。想知道GIT有多流行吗？看看GITHUB就知道了，现在很多公司都已经把自己的代码库迁移到了GIT。可见GIT在如今的流行程度，也说明分布式版本控制系统是如今的趋势。如下基本架构图：&lt;/p&gt;
&lt;p&gt;
 &lt;img src="https://cdn.jsdelivr.net/gh/poloxue/images@main/2019-03-18-git-architecture-03.png" alt=""&gt;

&lt;/p&gt;
&lt;p&gt;关于分布式版本控制系统，这里只说优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适合多人团队协作开发；&lt;/li&gt;
&lt;li&gt;代码集中化管理；&lt;/li&gt;
&lt;li&gt;可以离线工作；&lt;/li&gt;
&lt;li&gt;每个计算机都是一个完整仓库；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面两点SVN也可以做到，说一下后两点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以离线工作，分布式版本管理系统每个计算机都有一个完整的仓库，可本地提交，可以做到离线工作。没有了SVN令人抓狂的断网无法工作问题;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个计算机都是一个完整的仓库，也就没有了SVN的单点故障。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="git与svn的比较"&gt;GIT与SVN的比较&lt;/h2&gt;
&lt;p&gt;GIT的作者Linus一直比较痛恨集中方式版本控制系统。虽然有很多已知免费的集中式版本控制系统，但是在2002之前提交Linux源码的方式都是通过diff提交给Linus的，然后进行手工合并。下面让我们来以GIT与SVN作为代表，来看看为什么Linus痛恨集中式版本管理系统，而喜欢分布式版本管理系统。下面具体比较一下它们的区别：&lt;/p&gt;
&lt;h3 id="git是分布式的svn为集中式的"&gt;GIT是分布式的，SVN为集中式的&lt;/h3&gt;
&lt;p&gt;常识，两者最重要的区别，也是后面所有区别的基石；&lt;/p&gt;
&lt;h3 id="git-随处都是版本库svn-只有一个中央版本库"&gt;GIT 随处都是版本库，SVN 只有一个中央版本库&lt;/h3&gt;
&lt;p&gt;因为GIT是分布式的所以能做到到处都是版本库，而SVN是集中式的，所以只有一个中央仓库。因而GIT能够做到无需网络提交，到处到时版本库，压根不用担心提交速度问题，不用时刻依赖与网络工作，不用担心单点故障。当工作完成之后直接推送远程即可实现工作协作；&lt;/p&gt;
&lt;h3 id="git没有全局版本号svn有全局版本号"&gt;GIT没有全局版本号，SVN有全局版本号&lt;/h3&gt;
&lt;p&gt;GIT版本库到处都是，之间没有实时共享数据，所以无法确保版本号的唯一性，无法使用全局版本号，分布在各个机器上的版本库版本号使用40位的HASH值取代。重复的情况是存在的，从数学的角度考虑，可能性是2的63次方分之一，基本可忽略。而对于SVN，唯一版本，所以能够做到使用全局的版本号，版本号采用自增的方式；&lt;/p&gt;
&lt;h3 id="git把内容按元数据存储svn按文件存储"&gt;GIT把内容按元数据存储，SVN按文件存储&lt;/h3&gt;
&lt;p&gt;GIT存储的不是实际的文件，而是指向性数据。SVN保存的是文件数据。当GIT切换版本的时候，实际上切换的是元数据，而且本地操作，快捷有效；&lt;/p&gt;
&lt;h3 id="git记录文件快照svn记录文件差异"&gt;GIT记录文件快照，SVN记录文件差异&lt;/h3&gt;
&lt;p&gt;GIT的元数据，即指向性数据指向的是实际的文件快照，这也是GIT能够快速切换版本的一个原因。SVN保存的文件数据是各个版本之间的文件差异，所以切换版本的时候需要逐级的差异计算，速度比较慢，而且还需网络传输。当工程较大时，速度与GIT相比差异会相当的大。&lt;/p&gt;
&lt;h3 id="git的内容完整性高svn完整性低"&gt;GIT的内容完整性高，SVN完整性低&lt;/h3&gt;
&lt;p&gt;因为GIT的数据记录都有HASH值校验，所以内容完整性较高。而SVN则没有此功能，内容完整性低。；&lt;/p&gt;</description></item></channel></rss>